/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// Entity - struct for Entity
type Entity struct {
	AaSequence *AaSequence
	CustomEntity *CustomEntity
	DnaOligo *DnaOligo
	DnaSequence *DnaSequence
	Mixture *Mixture
	RnaOligo *RnaOligo
}

// AaSequenceAsEntity is a convenience function that returns AaSequence wrapped in Entity
func AaSequenceAsEntity(v *AaSequence) Entity {
	return Entity{
		AaSequence: v,
	}
}

// CustomEntityAsEntity is a convenience function that returns CustomEntity wrapped in Entity
func CustomEntityAsEntity(v *CustomEntity) Entity {
	return Entity{
		CustomEntity: v,
	}
}

// DnaOligoAsEntity is a convenience function that returns DnaOligo wrapped in Entity
func DnaOligoAsEntity(v *DnaOligo) Entity {
	return Entity{
		DnaOligo: v,
	}
}

// DnaSequenceAsEntity is a convenience function that returns DnaSequence wrapped in Entity
func DnaSequenceAsEntity(v *DnaSequence) Entity {
	return Entity{
		DnaSequence: v,
	}
}

// MixtureAsEntity is a convenience function that returns Mixture wrapped in Entity
func MixtureAsEntity(v *Mixture) Entity {
	return Entity{
		Mixture: v,
	}
}

// RnaOligoAsEntity is a convenience function that returns RnaOligo wrapped in Entity
func RnaOligoAsEntity(v *RnaOligo) Entity {
	return Entity{
		RnaOligo: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Entity) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AaSequence
	err = newStrictDecoder(data).Decode(&dst.AaSequence)
	if err == nil {
		jsonAaSequence, _ := json.Marshal(dst.AaSequence)
		if string(jsonAaSequence) == "{}" { // empty struct
			dst.AaSequence = nil
		} else {
			match++
		}
	} else {
		dst.AaSequence = nil
	}

	// try to unmarshal data into CustomEntity
	err = newStrictDecoder(data).Decode(&dst.CustomEntity)
	if err == nil {
		jsonCustomEntity, _ := json.Marshal(dst.CustomEntity)
		if string(jsonCustomEntity) == "{}" { // empty struct
			dst.CustomEntity = nil
		} else {
			match++
		}
	} else {
		dst.CustomEntity = nil
	}

	// try to unmarshal data into DnaOligo
	err = newStrictDecoder(data).Decode(&dst.DnaOligo)
	if err == nil {
		jsonDnaOligo, _ := json.Marshal(dst.DnaOligo)
		if string(jsonDnaOligo) == "{}" { // empty struct
			dst.DnaOligo = nil
		} else {
			match++
		}
	} else {
		dst.DnaOligo = nil
	}

	// try to unmarshal data into DnaSequence
	err = newStrictDecoder(data).Decode(&dst.DnaSequence)
	if err == nil {
		jsonDnaSequence, _ := json.Marshal(dst.DnaSequence)
		if string(jsonDnaSequence) == "{}" { // empty struct
			dst.DnaSequence = nil
		} else {
			match++
		}
	} else {
		dst.DnaSequence = nil
	}

	// try to unmarshal data into Mixture
	err = newStrictDecoder(data).Decode(&dst.Mixture)
	if err == nil {
		jsonMixture, _ := json.Marshal(dst.Mixture)
		if string(jsonMixture) == "{}" { // empty struct
			dst.Mixture = nil
		} else {
			match++
		}
	} else {
		dst.Mixture = nil
	}

	// try to unmarshal data into RnaOligo
	err = newStrictDecoder(data).Decode(&dst.RnaOligo)
	if err == nil {
		jsonRnaOligo, _ := json.Marshal(dst.RnaOligo)
		if string(jsonRnaOligo) == "{}" { // empty struct
			dst.RnaOligo = nil
		} else {
			match++
		}
	} else {
		dst.RnaOligo = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AaSequence = nil
		dst.CustomEntity = nil
		dst.DnaOligo = nil
		dst.DnaSequence = nil
		dst.Mixture = nil
		dst.RnaOligo = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Entity)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Entity)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Entity) MarshalJSON() ([]byte, error) {
	if src.AaSequence != nil {
		return json.Marshal(&src.AaSequence)
	}

	if src.CustomEntity != nil {
		return json.Marshal(&src.CustomEntity)
	}

	if src.DnaOligo != nil {
		return json.Marshal(&src.DnaOligo)
	}

	if src.DnaSequence != nil {
		return json.Marshal(&src.DnaSequence)
	}

	if src.Mixture != nil {
		return json.Marshal(&src.Mixture)
	}

	if src.RnaOligo != nil {
		return json.Marshal(&src.RnaOligo)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Entity) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AaSequence != nil {
		return obj.AaSequence
	}

	if obj.CustomEntity != nil {
		return obj.CustomEntity
	}

	if obj.DnaOligo != nil {
		return obj.DnaOligo
	}

	if obj.DnaSequence != nil {
		return obj.DnaSequence
	}

	if obj.Mixture != nil {
		return obj.Mixture
	}

	if obj.RnaOligo != nil {
		return obj.RnaOligo
	}

	// all schemas are nil
	return nil
}

type NullableEntity struct {
	value *Entity
	isSet bool
}

func (v NullableEntity) Get() *Entity {
	return v.value
}

func (v *NullableEntity) Set(val *Entity) {
	v.value = val
	v.isSet = true
}

func (v NullableEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntity(val *Entity) *NullableEntity {
	return &NullableEntity{value: val, isSet: true}
}

func (v NullableEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


