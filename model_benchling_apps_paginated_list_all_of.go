/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BenchlingAppsPaginatedListAllOf struct for BenchlingAppsPaginatedListAllOf
type BenchlingAppsPaginatedListAllOf struct {
	Apps []BenchlingApp `json:"apps,omitempty"`
}

// NewBenchlingAppsPaginatedListAllOf instantiates a new BenchlingAppsPaginatedListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBenchlingAppsPaginatedListAllOf() *BenchlingAppsPaginatedListAllOf {
	this := BenchlingAppsPaginatedListAllOf{}
	return &this
}

// NewBenchlingAppsPaginatedListAllOfWithDefaults instantiates a new BenchlingAppsPaginatedListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBenchlingAppsPaginatedListAllOfWithDefaults() *BenchlingAppsPaginatedListAllOf {
	this := BenchlingAppsPaginatedListAllOf{}
	return &this
}

// GetApps returns the Apps field value if set, zero value otherwise.
func (o *BenchlingAppsPaginatedListAllOf) GetApps() []BenchlingApp {
	if o == nil || isNil(o.Apps) {
		var ret []BenchlingApp
		return ret
	}
	return o.Apps
}

// GetAppsOk returns a tuple with the Apps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchlingAppsPaginatedListAllOf) GetAppsOk() ([]BenchlingApp, bool) {
	if o == nil || isNil(o.Apps) {
    return nil, false
	}
	return o.Apps, true
}

// HasApps returns a boolean if a field has been set.
func (o *BenchlingAppsPaginatedListAllOf) HasApps() bool {
	if o != nil && !isNil(o.Apps) {
		return true
	}

	return false
}

// SetApps gets a reference to the given []BenchlingApp and assigns it to the Apps field.
func (o *BenchlingAppsPaginatedListAllOf) SetApps(v []BenchlingApp) {
	o.Apps = v
}

func (o BenchlingAppsPaginatedListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Apps) {
		toSerialize["apps"] = o.Apps
	}
	return json.Marshal(toSerialize)
}

type NullableBenchlingAppsPaginatedListAllOf struct {
	value *BenchlingAppsPaginatedListAllOf
	isSet bool
}

func (v NullableBenchlingAppsPaginatedListAllOf) Get() *BenchlingAppsPaginatedListAllOf {
	return v.value
}

func (v *NullableBenchlingAppsPaginatedListAllOf) Set(val *BenchlingAppsPaginatedListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBenchlingAppsPaginatedListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBenchlingAppsPaginatedListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenchlingAppsPaginatedListAllOf(val *BenchlingAppsPaginatedListAllOf) *NullableBenchlingAppsPaginatedListAllOf {
	return &NullableBenchlingAppsPaginatedListAllOf{value: val, isSet: true}
}

func (v NullableBenchlingAppsPaginatedListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenchlingAppsPaginatedListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


