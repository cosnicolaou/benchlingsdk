/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// WorkflowPatch struct for WorkflowPatch
type WorkflowPatch struct {
	// Description of the workflow
	Description *string `json:"description,omitempty"`
	// Name of the workflow
	Name *string `json:"name,omitempty"`
	// ID of the project that contains the workflow
	ProjectId *string `json:"projectId,omitempty"`
}

// NewWorkflowPatch instantiates a new WorkflowPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowPatch() *WorkflowPatch {
	this := WorkflowPatch{}
	return &this
}

// NewWorkflowPatchWithDefaults instantiates a new WorkflowPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowPatchWithDefaults() *WorkflowPatch {
	this := WorkflowPatch{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WorkflowPatch) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowPatch) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WorkflowPatch) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WorkflowPatch) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WorkflowPatch) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowPatch) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WorkflowPatch) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WorkflowPatch) SetName(v string) {
	o.Name = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *WorkflowPatch) GetProjectId() string {
	if o == nil || isNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowPatch) GetProjectIdOk() (*string, bool) {
	if o == nil || isNil(o.ProjectId) {
    return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *WorkflowPatch) HasProjectId() bool {
	if o != nil && !isNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *WorkflowPatch) SetProjectId(v string) {
	o.ProjectId = &v
}

func (o WorkflowPatch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowPatch struct {
	value *WorkflowPatch
	isSet bool
}

func (v NullableWorkflowPatch) Get() *WorkflowPatch {
	return v.value
}

func (v *NullableWorkflowPatch) Set(val *WorkflowPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowPatch(val *WorkflowPatch) *NullableWorkflowPatch {
	return &NullableWorkflowPatch{value: val, isSet: true}
}

func (v NullableWorkflowPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


