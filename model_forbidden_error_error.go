/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ForbiddenErrorError struct for ForbiddenErrorError
type ForbiddenErrorError struct {
	InvalidId *string `json:"invalidId,omitempty"`
	Message *string `json:"message,omitempty"`
	Type *string `json:"type,omitempty"`
	UserMessage *string `json:"userMessage,omitempty"`
}

// NewForbiddenErrorError instantiates a new ForbiddenErrorError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForbiddenErrorError() *ForbiddenErrorError {
	this := ForbiddenErrorError{}
	return &this
}

// NewForbiddenErrorErrorWithDefaults instantiates a new ForbiddenErrorError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForbiddenErrorErrorWithDefaults() *ForbiddenErrorError {
	this := ForbiddenErrorError{}
	return &this
}

// GetInvalidId returns the InvalidId field value if set, zero value otherwise.
func (o *ForbiddenErrorError) GetInvalidId() string {
	if o == nil || isNil(o.InvalidId) {
		var ret string
		return ret
	}
	return *o.InvalidId
}

// GetInvalidIdOk returns a tuple with the InvalidId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenErrorError) GetInvalidIdOk() (*string, bool) {
	if o == nil || isNil(o.InvalidId) {
    return nil, false
	}
	return o.InvalidId, true
}

// HasInvalidId returns a boolean if a field has been set.
func (o *ForbiddenErrorError) HasInvalidId() bool {
	if o != nil && !isNil(o.InvalidId) {
		return true
	}

	return false
}

// SetInvalidId gets a reference to the given string and assigns it to the InvalidId field.
func (o *ForbiddenErrorError) SetInvalidId(v string) {
	o.InvalidId = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ForbiddenErrorError) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenErrorError) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
    return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ForbiddenErrorError) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ForbiddenErrorError) SetMessage(v string) {
	o.Message = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ForbiddenErrorError) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenErrorError) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ForbiddenErrorError) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ForbiddenErrorError) SetType(v string) {
	o.Type = &v
}

// GetUserMessage returns the UserMessage field value if set, zero value otherwise.
func (o *ForbiddenErrorError) GetUserMessage() string {
	if o == nil || isNil(o.UserMessage) {
		var ret string
		return ret
	}
	return *o.UserMessage
}

// GetUserMessageOk returns a tuple with the UserMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForbiddenErrorError) GetUserMessageOk() (*string, bool) {
	if o == nil || isNil(o.UserMessage) {
    return nil, false
	}
	return o.UserMessage, true
}

// HasUserMessage returns a boolean if a field has been set.
func (o *ForbiddenErrorError) HasUserMessage() bool {
	if o != nil && !isNil(o.UserMessage) {
		return true
	}

	return false
}

// SetUserMessage gets a reference to the given string and assigns it to the UserMessage field.
func (o *ForbiddenErrorError) SetUserMessage(v string) {
	o.UserMessage = &v
}

func (o ForbiddenErrorError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InvalidId) {
		toSerialize["invalidId"] = o.InvalidId
	}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.UserMessage) {
		toSerialize["userMessage"] = o.UserMessage
	}
	return json.Marshal(toSerialize)
}

type NullableForbiddenErrorError struct {
	value *ForbiddenErrorError
	isSet bool
}

func (v NullableForbiddenErrorError) Get() *ForbiddenErrorError {
	return v.value
}

func (v *NullableForbiddenErrorError) Set(val *ForbiddenErrorError) {
	v.value = val
	v.isSet = true
}

func (v NullableForbiddenErrorError) IsSet() bool {
	return v.isSet
}

func (v *NullableForbiddenErrorError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForbiddenErrorError(val *ForbiddenErrorError) *NullableForbiddenErrorError {
	return &NullableForbiddenErrorError{value: val, isSet: true}
}

func (v NullableForbiddenErrorError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForbiddenErrorError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


