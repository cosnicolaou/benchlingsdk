/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AssayRunSchema struct for AssayRunSchema
type AssayRunSchema struct {
	ArchiveRecord NullableAaSequenceArchiveRecord `json:"archiveRecord,omitempty"`
	FieldDefinitions []SchemaFieldDefinitionsInner `json:"fieldDefinitions,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	DerivedFrom NullableString `json:"derivedFrom,omitempty"`
	Organization *BaseAssaySchemaAllOfOrganization `json:"organization,omitempty"`
	SystemName *string `json:"systemName,omitempty"`
	AutomationInputFileConfigs []AssayRunSchemaAllOfAutomationInputFileConfigs `json:"automationInputFileConfigs,omitempty"`
	AutomationOutputFileConfigs []AssayRunSchemaAllOfAutomationInputFileConfigs `json:"automationOutputFileConfigs,omitempty"`
	// DateTime the Assay Run Schema was last modified
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`
}

// NewAssayRunSchema instantiates a new AssayRunSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssayRunSchema() *AssayRunSchema {
	this := AssayRunSchema{}
	return &this
}

// NewAssayRunSchemaWithDefaults instantiates a new AssayRunSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssayRunSchemaWithDefaults() *AssayRunSchema {
	this := AssayRunSchema{}
	return &this
}

// GetArchiveRecord returns the ArchiveRecord field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssayRunSchema) GetArchiveRecord() AaSequenceArchiveRecord {
	if o == nil || isNil(o.ArchiveRecord.Get()) {
		var ret AaSequenceArchiveRecord
		return ret
	}
	return *o.ArchiveRecord.Get()
}

// GetArchiveRecordOk returns a tuple with the ArchiveRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssayRunSchema) GetArchiveRecordOk() (*AaSequenceArchiveRecord, bool) {
	if o == nil {
    return nil, false
	}
	return o.ArchiveRecord.Get(), o.ArchiveRecord.IsSet()
}

// HasArchiveRecord returns a boolean if a field has been set.
func (o *AssayRunSchema) HasArchiveRecord() bool {
	if o != nil && o.ArchiveRecord.IsSet() {
		return true
	}

	return false
}

// SetArchiveRecord gets a reference to the given NullableAaSequenceArchiveRecord and assigns it to the ArchiveRecord field.
func (o *AssayRunSchema) SetArchiveRecord(v AaSequenceArchiveRecord) {
	o.ArchiveRecord.Set(&v)
}
// SetArchiveRecordNil sets the value for ArchiveRecord to be an explicit nil
func (o *AssayRunSchema) SetArchiveRecordNil() {
	o.ArchiveRecord.Set(nil)
}

// UnsetArchiveRecord ensures that no value is present for ArchiveRecord, not even an explicit nil
func (o *AssayRunSchema) UnsetArchiveRecord() {
	o.ArchiveRecord.Unset()
}

// GetFieldDefinitions returns the FieldDefinitions field value if set, zero value otherwise.
func (o *AssayRunSchema) GetFieldDefinitions() []SchemaFieldDefinitionsInner {
	if o == nil || isNil(o.FieldDefinitions) {
		var ret []SchemaFieldDefinitionsInner
		return ret
	}
	return o.FieldDefinitions
}

// GetFieldDefinitionsOk returns a tuple with the FieldDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunSchema) GetFieldDefinitionsOk() ([]SchemaFieldDefinitionsInner, bool) {
	if o == nil || isNil(o.FieldDefinitions) {
    return nil, false
	}
	return o.FieldDefinitions, true
}

// HasFieldDefinitions returns a boolean if a field has been set.
func (o *AssayRunSchema) HasFieldDefinitions() bool {
	if o != nil && !isNil(o.FieldDefinitions) {
		return true
	}

	return false
}

// SetFieldDefinitions gets a reference to the given []SchemaFieldDefinitionsInner and assigns it to the FieldDefinitions field.
func (o *AssayRunSchema) SetFieldDefinitions(v []SchemaFieldDefinitionsInner) {
	o.FieldDefinitions = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AssayRunSchema) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunSchema) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AssayRunSchema) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AssayRunSchema) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AssayRunSchema) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunSchema) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AssayRunSchema) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AssayRunSchema) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AssayRunSchema) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunSchema) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AssayRunSchema) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AssayRunSchema) SetType(v string) {
	o.Type = &v
}

// GetDerivedFrom returns the DerivedFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssayRunSchema) GetDerivedFrom() string {
	if o == nil || isNil(o.DerivedFrom.Get()) {
		var ret string
		return ret
	}
	return *o.DerivedFrom.Get()
}

// GetDerivedFromOk returns a tuple with the DerivedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssayRunSchema) GetDerivedFromOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.DerivedFrom.Get(), o.DerivedFrom.IsSet()
}

// HasDerivedFrom returns a boolean if a field has been set.
func (o *AssayRunSchema) HasDerivedFrom() bool {
	if o != nil && o.DerivedFrom.IsSet() {
		return true
	}

	return false
}

// SetDerivedFrom gets a reference to the given NullableString and assigns it to the DerivedFrom field.
func (o *AssayRunSchema) SetDerivedFrom(v string) {
	o.DerivedFrom.Set(&v)
}
// SetDerivedFromNil sets the value for DerivedFrom to be an explicit nil
func (o *AssayRunSchema) SetDerivedFromNil() {
	o.DerivedFrom.Set(nil)
}

// UnsetDerivedFrom ensures that no value is present for DerivedFrom, not even an explicit nil
func (o *AssayRunSchema) UnsetDerivedFrom() {
	o.DerivedFrom.Unset()
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *AssayRunSchema) GetOrganization() BaseAssaySchemaAllOfOrganization {
	if o == nil || isNil(o.Organization) {
		var ret BaseAssaySchemaAllOfOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunSchema) GetOrganizationOk() (*BaseAssaySchemaAllOfOrganization, bool) {
	if o == nil || isNil(o.Organization) {
    return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *AssayRunSchema) HasOrganization() bool {
	if o != nil && !isNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given BaseAssaySchemaAllOfOrganization and assigns it to the Organization field.
func (o *AssayRunSchema) SetOrganization(v BaseAssaySchemaAllOfOrganization) {
	o.Organization = &v
}

// GetSystemName returns the SystemName field value if set, zero value otherwise.
func (o *AssayRunSchema) GetSystemName() string {
	if o == nil || isNil(o.SystemName) {
		var ret string
		return ret
	}
	return *o.SystemName
}

// GetSystemNameOk returns a tuple with the SystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunSchema) GetSystemNameOk() (*string, bool) {
	if o == nil || isNil(o.SystemName) {
    return nil, false
	}
	return o.SystemName, true
}

// HasSystemName returns a boolean if a field has been set.
func (o *AssayRunSchema) HasSystemName() bool {
	if o != nil && !isNil(o.SystemName) {
		return true
	}

	return false
}

// SetSystemName gets a reference to the given string and assigns it to the SystemName field.
func (o *AssayRunSchema) SetSystemName(v string) {
	o.SystemName = &v
}

// GetAutomationInputFileConfigs returns the AutomationInputFileConfigs field value if set, zero value otherwise.
func (o *AssayRunSchema) GetAutomationInputFileConfigs() []AssayRunSchemaAllOfAutomationInputFileConfigs {
	if o == nil || isNil(o.AutomationInputFileConfigs) {
		var ret []AssayRunSchemaAllOfAutomationInputFileConfigs
		return ret
	}
	return o.AutomationInputFileConfigs
}

// GetAutomationInputFileConfigsOk returns a tuple with the AutomationInputFileConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunSchema) GetAutomationInputFileConfigsOk() ([]AssayRunSchemaAllOfAutomationInputFileConfigs, bool) {
	if o == nil || isNil(o.AutomationInputFileConfigs) {
    return nil, false
	}
	return o.AutomationInputFileConfigs, true
}

// HasAutomationInputFileConfigs returns a boolean if a field has been set.
func (o *AssayRunSchema) HasAutomationInputFileConfigs() bool {
	if o != nil && !isNil(o.AutomationInputFileConfigs) {
		return true
	}

	return false
}

// SetAutomationInputFileConfigs gets a reference to the given []AssayRunSchemaAllOfAutomationInputFileConfigs and assigns it to the AutomationInputFileConfigs field.
func (o *AssayRunSchema) SetAutomationInputFileConfigs(v []AssayRunSchemaAllOfAutomationInputFileConfigs) {
	o.AutomationInputFileConfigs = v
}

// GetAutomationOutputFileConfigs returns the AutomationOutputFileConfigs field value if set, zero value otherwise.
func (o *AssayRunSchema) GetAutomationOutputFileConfigs() []AssayRunSchemaAllOfAutomationInputFileConfigs {
	if o == nil || isNil(o.AutomationOutputFileConfigs) {
		var ret []AssayRunSchemaAllOfAutomationInputFileConfigs
		return ret
	}
	return o.AutomationOutputFileConfigs
}

// GetAutomationOutputFileConfigsOk returns a tuple with the AutomationOutputFileConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunSchema) GetAutomationOutputFileConfigsOk() ([]AssayRunSchemaAllOfAutomationInputFileConfigs, bool) {
	if o == nil || isNil(o.AutomationOutputFileConfigs) {
    return nil, false
	}
	return o.AutomationOutputFileConfigs, true
}

// HasAutomationOutputFileConfigs returns a boolean if a field has been set.
func (o *AssayRunSchema) HasAutomationOutputFileConfigs() bool {
	if o != nil && !isNil(o.AutomationOutputFileConfigs) {
		return true
	}

	return false
}

// SetAutomationOutputFileConfigs gets a reference to the given []AssayRunSchemaAllOfAutomationInputFileConfigs and assigns it to the AutomationOutputFileConfigs field.
func (o *AssayRunSchema) SetAutomationOutputFileConfigs(v []AssayRunSchemaAllOfAutomationInputFileConfigs) {
	o.AutomationOutputFileConfigs = v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *AssayRunSchema) GetModifiedAt() time.Time {
	if o == nil || isNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunSchema) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.ModifiedAt) {
    return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *AssayRunSchema) HasModifiedAt() bool {
	if o != nil && !isNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *AssayRunSchema) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

func (o AssayRunSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveRecord.IsSet() {
		toSerialize["archiveRecord"] = o.ArchiveRecord.Get()
	}
	if !isNil(o.FieldDefinitions) {
		toSerialize["fieldDefinitions"] = o.FieldDefinitions
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.DerivedFrom.IsSet() {
		toSerialize["derivedFrom"] = o.DerivedFrom.Get()
	}
	if !isNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !isNil(o.SystemName) {
		toSerialize["systemName"] = o.SystemName
	}
	if !isNil(o.AutomationInputFileConfigs) {
		toSerialize["automationInputFileConfigs"] = o.AutomationInputFileConfigs
	}
	if !isNil(o.AutomationOutputFileConfigs) {
		toSerialize["automationOutputFileConfigs"] = o.AutomationOutputFileConfigs
	}
	if !isNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	return json.Marshal(toSerialize)
}

type NullableAssayRunSchema struct {
	value *AssayRunSchema
	isSet bool
}

func (v NullableAssayRunSchema) Get() *AssayRunSchema {
	return v.value
}

func (v *NullableAssayRunSchema) Set(val *AssayRunSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAssayRunSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAssayRunSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssayRunSchema(val *AssayRunSchema) *NullableAssayRunSchema {
	return &NullableAssayRunSchema{value: val, isSet: true}
}

func (v NullableAssayRunSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssayRunSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


