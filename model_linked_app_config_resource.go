/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// LinkedAppConfigResource - struct for LinkedAppConfigResource
type LinkedAppConfigResource struct {
	InaccessibleResource *InaccessibleResource
	LinkedAppConfigResourceSummary *LinkedAppConfigResourceSummary
}

// InaccessibleResourceAsLinkedAppConfigResource is a convenience function that returns InaccessibleResource wrapped in LinkedAppConfigResource
func InaccessibleResourceAsLinkedAppConfigResource(v *InaccessibleResource) LinkedAppConfigResource {
	return LinkedAppConfigResource{
		InaccessibleResource: v,
	}
}

// LinkedAppConfigResourceSummaryAsLinkedAppConfigResource is a convenience function that returns LinkedAppConfigResourceSummary wrapped in LinkedAppConfigResource
func LinkedAppConfigResourceSummaryAsLinkedAppConfigResource(v *LinkedAppConfigResourceSummary) LinkedAppConfigResource {
	return LinkedAppConfigResource{
		LinkedAppConfigResourceSummary: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *LinkedAppConfigResource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into InaccessibleResource
	err = newStrictDecoder(data).Decode(&dst.InaccessibleResource)
	if err == nil {
		jsonInaccessibleResource, _ := json.Marshal(dst.InaccessibleResource)
		if string(jsonInaccessibleResource) == "{}" { // empty struct
			dst.InaccessibleResource = nil
		} else {
			match++
		}
	} else {
		dst.InaccessibleResource = nil
	}

	// try to unmarshal data into LinkedAppConfigResourceSummary
	err = newStrictDecoder(data).Decode(&dst.LinkedAppConfigResourceSummary)
	if err == nil {
		jsonLinkedAppConfigResourceSummary, _ := json.Marshal(dst.LinkedAppConfigResourceSummary)
		if string(jsonLinkedAppConfigResourceSummary) == "{}" { // empty struct
			dst.LinkedAppConfigResourceSummary = nil
		} else {
			match++
		}
	} else {
		dst.LinkedAppConfigResourceSummary = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.InaccessibleResource = nil
		dst.LinkedAppConfigResourceSummary = nil

		return fmt.Errorf("data matches more than one schema in oneOf(LinkedAppConfigResource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(LinkedAppConfigResource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src LinkedAppConfigResource) MarshalJSON() ([]byte, error) {
	if src.InaccessibleResource != nil {
		return json.Marshal(&src.InaccessibleResource)
	}

	if src.LinkedAppConfigResourceSummary != nil {
		return json.Marshal(&src.LinkedAppConfigResourceSummary)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *LinkedAppConfigResource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InaccessibleResource != nil {
		return obj.InaccessibleResource
	}

	if obj.LinkedAppConfigResourceSummary != nil {
		return obj.LinkedAppConfigResourceSummary
	}

	// all schemas are nil
	return nil
}

type NullableLinkedAppConfigResource struct {
	value *LinkedAppConfigResource
	isSet bool
}

func (v NullableLinkedAppConfigResource) Get() *LinkedAppConfigResource {
	return v.value
}

func (v *NullableLinkedAppConfigResource) Set(val *LinkedAppConfigResource) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkedAppConfigResource) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkedAppConfigResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkedAppConfigResource(val *LinkedAppConfigResource) *NullableLinkedAppConfigResource {
	return &NullableLinkedAppConfigResource{value: val, isSet: true}
}

func (v NullableLinkedAppConfigResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkedAppConfigResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


