/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// LabAutomationTransformUpdate struct for LabAutomationTransformUpdate
type LabAutomationTransformUpdate struct {
	BlobId *string `json:"blobId,omitempty"`
	Errors []LabAutomationBenchlingAppError `json:"errors,omitempty"`
}

// NewLabAutomationTransformUpdate instantiates a new LabAutomationTransformUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabAutomationTransformUpdate() *LabAutomationTransformUpdate {
	this := LabAutomationTransformUpdate{}
	return &this
}

// NewLabAutomationTransformUpdateWithDefaults instantiates a new LabAutomationTransformUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabAutomationTransformUpdateWithDefaults() *LabAutomationTransformUpdate {
	this := LabAutomationTransformUpdate{}
	return &this
}

// GetBlobId returns the BlobId field value if set, zero value otherwise.
func (o *LabAutomationTransformUpdate) GetBlobId() string {
	if o == nil || isNil(o.BlobId) {
		var ret string
		return ret
	}
	return *o.BlobId
}

// GetBlobIdOk returns a tuple with the BlobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabAutomationTransformUpdate) GetBlobIdOk() (*string, bool) {
	if o == nil || isNil(o.BlobId) {
    return nil, false
	}
	return o.BlobId, true
}

// HasBlobId returns a boolean if a field has been set.
func (o *LabAutomationTransformUpdate) HasBlobId() bool {
	if o != nil && !isNil(o.BlobId) {
		return true
	}

	return false
}

// SetBlobId gets a reference to the given string and assigns it to the BlobId field.
func (o *LabAutomationTransformUpdate) SetBlobId(v string) {
	o.BlobId = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *LabAutomationTransformUpdate) GetErrors() []LabAutomationBenchlingAppError {
	if o == nil || isNil(o.Errors) {
		var ret []LabAutomationBenchlingAppError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabAutomationTransformUpdate) GetErrorsOk() ([]LabAutomationBenchlingAppError, bool) {
	if o == nil || isNil(o.Errors) {
    return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *LabAutomationTransformUpdate) HasErrors() bool {
	if o != nil && !isNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []LabAutomationBenchlingAppError and assigns it to the Errors field.
func (o *LabAutomationTransformUpdate) SetErrors(v []LabAutomationBenchlingAppError) {
	o.Errors = v
}

func (o LabAutomationTransformUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BlobId) {
		toSerialize["blobId"] = o.BlobId
	}
	if !isNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableLabAutomationTransformUpdate struct {
	value *LabAutomationTransformUpdate
	isSet bool
}

func (v NullableLabAutomationTransformUpdate) Get() *LabAutomationTransformUpdate {
	return v.value
}

func (v *NullableLabAutomationTransformUpdate) Set(val *LabAutomationTransformUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableLabAutomationTransformUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableLabAutomationTransformUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabAutomationTransformUpdate(val *LabAutomationTransformUpdate) *NullableLabAutomationTransformUpdate {
	return &NullableLabAutomationTransformUpdate{value: val, isSet: true}
}

func (v NullableLabAutomationTransformUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabAutomationTransformUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


