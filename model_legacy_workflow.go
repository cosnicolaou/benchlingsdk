/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"time"
)

// LegacyWorkflow struct for LegacyWorkflow
type LegacyWorkflow struct {
	// DateTime at which the the legacy workflow was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// Description of the legacy workflow
	Description NullableString `json:"description,omitempty"`
	// User-friendly ID of the legacy workflow
	DisplayId *string `json:"displayId,omitempty"`
	// ID of the legacy workflow
	Id *string `json:"id,omitempty"`
	// Name of the legacy workflow
	Name *string `json:"name,omitempty"`
	// ID of the project that contains the legacy workflow
	ProjectId *string `json:"projectId,omitempty"`
}

// NewLegacyWorkflow instantiates a new LegacyWorkflow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyWorkflow() *LegacyWorkflow {
	this := LegacyWorkflow{}
	return &this
}

// NewLegacyWorkflowWithDefaults instantiates a new LegacyWorkflow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyWorkflowWithDefaults() *LegacyWorkflow {
	this := LegacyWorkflow{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *LegacyWorkflow) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflow) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *LegacyWorkflow) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *LegacyWorkflow) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LegacyWorkflow) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LegacyWorkflow) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *LegacyWorkflow) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *LegacyWorkflow) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *LegacyWorkflow) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *LegacyWorkflow) UnsetDescription() {
	o.Description.Unset()
}

// GetDisplayId returns the DisplayId field value if set, zero value otherwise.
func (o *LegacyWorkflow) GetDisplayId() string {
	if o == nil || isNil(o.DisplayId) {
		var ret string
		return ret
	}
	return *o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflow) GetDisplayIdOk() (*string, bool) {
	if o == nil || isNil(o.DisplayId) {
    return nil, false
	}
	return o.DisplayId, true
}

// HasDisplayId returns a boolean if a field has been set.
func (o *LegacyWorkflow) HasDisplayId() bool {
	if o != nil && !isNil(o.DisplayId) {
		return true
	}

	return false
}

// SetDisplayId gets a reference to the given string and assigns it to the DisplayId field.
func (o *LegacyWorkflow) SetDisplayId(v string) {
	o.DisplayId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LegacyWorkflow) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflow) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LegacyWorkflow) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LegacyWorkflow) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LegacyWorkflow) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflow) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LegacyWorkflow) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LegacyWorkflow) SetName(v string) {
	o.Name = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *LegacyWorkflow) GetProjectId() string {
	if o == nil || isNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflow) GetProjectIdOk() (*string, bool) {
	if o == nil || isNil(o.ProjectId) {
    return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *LegacyWorkflow) HasProjectId() bool {
	if o != nil && !isNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *LegacyWorkflow) SetProjectId(v string) {
	o.ProjectId = &v
}

func (o LegacyWorkflow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !isNil(o.DisplayId) {
		toSerialize["displayId"] = o.DisplayId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	return json.Marshal(toSerialize)
}

type NullableLegacyWorkflow struct {
	value *LegacyWorkflow
	isSet bool
}

func (v NullableLegacyWorkflow) Get() *LegacyWorkflow {
	return v.value
}

func (v *NullableLegacyWorkflow) Set(val *LegacyWorkflow) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyWorkflow) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyWorkflow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyWorkflow(val *LegacyWorkflow) *NullableLegacyWorkflow {
	return &NullableLegacyWorkflow{value: val, isSet: true}
}

func (v NullableLegacyWorkflow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyWorkflow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


