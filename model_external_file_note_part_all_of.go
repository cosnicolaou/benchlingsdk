/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ExternalFileNotePartAllOf struct for ExternalFileNotePartAllOf
type ExternalFileNotePartAllOf struct {
	// The ID of the external file. Use the 'Get an external file' endpoint to retrieve metadata about it. 
	ExternalFileId *string `json:"externalFileId,omitempty"`
	// Array of links referenced in the caption via an @-mention, hyperlink, or the drag-n-dropped preview attached to the note. 
	Links []EntryLink `json:"links,omitempty"`
	// The caption of the file attachment.
	Text *string `json:"text,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewExternalFileNotePartAllOf instantiates a new ExternalFileNotePartAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalFileNotePartAllOf() *ExternalFileNotePartAllOf {
	this := ExternalFileNotePartAllOf{}
	return &this
}

// NewExternalFileNotePartAllOfWithDefaults instantiates a new ExternalFileNotePartAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalFileNotePartAllOfWithDefaults() *ExternalFileNotePartAllOf {
	this := ExternalFileNotePartAllOf{}
	return &this
}

// GetExternalFileId returns the ExternalFileId field value if set, zero value otherwise.
func (o *ExternalFileNotePartAllOf) GetExternalFileId() string {
	if o == nil || isNil(o.ExternalFileId) {
		var ret string
		return ret
	}
	return *o.ExternalFileId
}

// GetExternalFileIdOk returns a tuple with the ExternalFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFileNotePartAllOf) GetExternalFileIdOk() (*string, bool) {
	if o == nil || isNil(o.ExternalFileId) {
    return nil, false
	}
	return o.ExternalFileId, true
}

// HasExternalFileId returns a boolean if a field has been set.
func (o *ExternalFileNotePartAllOf) HasExternalFileId() bool {
	if o != nil && !isNil(o.ExternalFileId) {
		return true
	}

	return false
}

// SetExternalFileId gets a reference to the given string and assigns it to the ExternalFileId field.
func (o *ExternalFileNotePartAllOf) SetExternalFileId(v string) {
	o.ExternalFileId = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ExternalFileNotePartAllOf) GetLinks() []EntryLink {
	if o == nil || isNil(o.Links) {
		var ret []EntryLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFileNotePartAllOf) GetLinksOk() ([]EntryLink, bool) {
	if o == nil || isNil(o.Links) {
    return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ExternalFileNotePartAllOf) HasLinks() bool {
	if o != nil && !isNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []EntryLink and assigns it to the Links field.
func (o *ExternalFileNotePartAllOf) SetLinks(v []EntryLink) {
	o.Links = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ExternalFileNotePartAllOf) GetText() string {
	if o == nil || isNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFileNotePartAllOf) GetTextOk() (*string, bool) {
	if o == nil || isNil(o.Text) {
    return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ExternalFileNotePartAllOf) HasText() bool {
	if o != nil && !isNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ExternalFileNotePartAllOf) SetText(v string) {
	o.Text = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ExternalFileNotePartAllOf) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalFileNotePartAllOf) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ExternalFileNotePartAllOf) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ExternalFileNotePartAllOf) SetType(v string) {
	o.Type = &v
}

func (o ExternalFileNotePartAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExternalFileId) {
		toSerialize["externalFileId"] = o.ExternalFileId
	}
	if !isNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !isNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableExternalFileNotePartAllOf struct {
	value *ExternalFileNotePartAllOf
	isSet bool
}

func (v NullableExternalFileNotePartAllOf) Get() *ExternalFileNotePartAllOf {
	return v.value
}

func (v *NullableExternalFileNotePartAllOf) Set(val *ExternalFileNotePartAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalFileNotePartAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalFileNotePartAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalFileNotePartAllOf(val *ExternalFileNotePartAllOf) *NullableExternalFileNotePartAllOf {
	return &NullableExternalFileNotePartAllOf{value: val, isSet: true}
}

func (v NullableExternalFileNotePartAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalFileNotePartAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


