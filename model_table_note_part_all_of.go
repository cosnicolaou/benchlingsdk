/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// TableNotePartAllOf struct for TableNotePartAllOf
type TableNotePartAllOf struct {
	// Array of links referenced in the caption via an @-mention, hyperlink, or the drag-n-dropped preview attached to the note. 
	Links []EntryLink `json:"links,omitempty"`
	Table *EntryTable `json:"table,omitempty"`
	// The caption of the table.
	Text *string `json:"text,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewTableNotePartAllOf instantiates a new TableNotePartAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTableNotePartAllOf() *TableNotePartAllOf {
	this := TableNotePartAllOf{}
	return &this
}

// NewTableNotePartAllOfWithDefaults instantiates a new TableNotePartAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTableNotePartAllOfWithDefaults() *TableNotePartAllOf {
	this := TableNotePartAllOf{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *TableNotePartAllOf) GetLinks() []EntryLink {
	if o == nil || isNil(o.Links) {
		var ret []EntryLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableNotePartAllOf) GetLinksOk() ([]EntryLink, bool) {
	if o == nil || isNil(o.Links) {
    return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *TableNotePartAllOf) HasLinks() bool {
	if o != nil && !isNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []EntryLink and assigns it to the Links field.
func (o *TableNotePartAllOf) SetLinks(v []EntryLink) {
	o.Links = v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *TableNotePartAllOf) GetTable() EntryTable {
	if o == nil || isNil(o.Table) {
		var ret EntryTable
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableNotePartAllOf) GetTableOk() (*EntryTable, bool) {
	if o == nil || isNil(o.Table) {
    return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *TableNotePartAllOf) HasTable() bool {
	if o != nil && !isNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given EntryTable and assigns it to the Table field.
func (o *TableNotePartAllOf) SetTable(v EntryTable) {
	o.Table = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *TableNotePartAllOf) GetText() string {
	if o == nil || isNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableNotePartAllOf) GetTextOk() (*string, bool) {
	if o == nil || isNil(o.Text) {
    return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *TableNotePartAllOf) HasText() bool {
	if o != nil && !isNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *TableNotePartAllOf) SetText(v string) {
	o.Text = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TableNotePartAllOf) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TableNotePartAllOf) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TableNotePartAllOf) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TableNotePartAllOf) SetType(v string) {
	o.Type = &v
}

func (o TableNotePartAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !isNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	if !isNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTableNotePartAllOf struct {
	value *TableNotePartAllOf
	isSet bool
}

func (v NullableTableNotePartAllOf) Get() *TableNotePartAllOf {
	return v.value
}

func (v *NullableTableNotePartAllOf) Set(val *TableNotePartAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTableNotePartAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTableNotePartAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTableNotePartAllOf(val *TableNotePartAllOf) *NullableTableNotePartAllOf {
	return &NullableTableNotePartAllOf{value: val, isSet: true}
}

func (v NullableTableNotePartAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTableNotePartAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


