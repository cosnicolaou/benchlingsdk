/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// RequestTask A request task. 
type RequestTask struct {
	Schema NullableSchemaSummary `json:"schema,omitempty"`
	// Schema fields to set on the request task. Every field should have its name as a key, mapping to an object with information about the value of the field. 
	Fields *ModelMap `json:"fields,omitempty"`
	// IDs of all request sample groups now associated with this task.
	SampleGroupIds []string `json:"sampleGroupIds,omitempty"`
}

// NewRequestTask instantiates a new RequestTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestTask() *RequestTask {
	this := RequestTask{}
	return &this
}

// NewRequestTaskWithDefaults instantiates a new RequestTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestTaskWithDefaults() *RequestTask {
	this := RequestTask{}
	return &this
}

// GetSchema returns the Schema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RequestTask) GetSchema() SchemaSummary {
	if o == nil || isNil(o.Schema.Get()) {
		var ret SchemaSummary
		return ret
	}
	return *o.Schema.Get()
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RequestTask) GetSchemaOk() (*SchemaSummary, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schema.Get(), o.Schema.IsSet()
}

// HasSchema returns a boolean if a field has been set.
func (o *RequestTask) HasSchema() bool {
	if o != nil && o.Schema.IsSet() {
		return true
	}

	return false
}

// SetSchema gets a reference to the given NullableSchemaSummary and assigns it to the Schema field.
func (o *RequestTask) SetSchema(v SchemaSummary) {
	o.Schema.Set(&v)
}
// SetSchemaNil sets the value for Schema to be an explicit nil
func (o *RequestTask) SetSchemaNil() {
	o.Schema.Set(nil)
}

// UnsetSchema ensures that no value is present for Schema, not even an explicit nil
func (o *RequestTask) UnsetSchema() {
	o.Schema.Unset()
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *RequestTask) GetFields() ModelMap {
	if o == nil || isNil(o.Fields) {
		var ret ModelMap
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestTask) GetFieldsOk() (*ModelMap, bool) {
	if o == nil || isNil(o.Fields) {
    return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *RequestTask) HasFields() bool {
	if o != nil && !isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given ModelMap and assigns it to the Fields field.
func (o *RequestTask) SetFields(v ModelMap) {
	o.Fields = &v
}

// GetSampleGroupIds returns the SampleGroupIds field value if set, zero value otherwise.
func (o *RequestTask) GetSampleGroupIds() []string {
	if o == nil || isNil(o.SampleGroupIds) {
		var ret []string
		return ret
	}
	return o.SampleGroupIds
}

// GetSampleGroupIdsOk returns a tuple with the SampleGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestTask) GetSampleGroupIdsOk() ([]string, bool) {
	if o == nil || isNil(o.SampleGroupIds) {
    return nil, false
	}
	return o.SampleGroupIds, true
}

// HasSampleGroupIds returns a boolean if a field has been set.
func (o *RequestTask) HasSampleGroupIds() bool {
	if o != nil && !isNil(o.SampleGroupIds) {
		return true
	}

	return false
}

// SetSampleGroupIds gets a reference to the given []string and assigns it to the SampleGroupIds field.
func (o *RequestTask) SetSampleGroupIds(v []string) {
	o.SampleGroupIds = v
}

func (o RequestTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Schema.IsSet() {
		toSerialize["schema"] = o.Schema.Get()
	}
	if !isNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !isNil(o.SampleGroupIds) {
		toSerialize["sampleGroupIds"] = o.SampleGroupIds
	}
	return json.Marshal(toSerialize)
}

type NullableRequestTask struct {
	value *RequestTask
	isSet bool
}

func (v NullableRequestTask) Get() *RequestTask {
	return v.value
}

func (v *NullableRequestTask) Set(val *RequestTask) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestTask) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestTask(val *RequestTask) *NullableRequestTask {
	return &NullableRequestTask{value: val, isSet: true}
}

func (v NullableRequestTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


