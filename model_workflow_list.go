/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// WorkflowList struct for WorkflowList
type WorkflowList struct {
	Workflows []LegacyWorkflow `json:"workflows,omitempty"`
}

// NewWorkflowList instantiates a new WorkflowList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowList() *WorkflowList {
	this := WorkflowList{}
	return &this
}

// NewWorkflowListWithDefaults instantiates a new WorkflowList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowListWithDefaults() *WorkflowList {
	this := WorkflowList{}
	return &this
}

// GetWorkflows returns the Workflows field value if set, zero value otherwise.
func (o *WorkflowList) GetWorkflows() []LegacyWorkflow {
	if o == nil || isNil(o.Workflows) {
		var ret []LegacyWorkflow
		return ret
	}
	return o.Workflows
}

// GetWorkflowsOk returns a tuple with the Workflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowList) GetWorkflowsOk() ([]LegacyWorkflow, bool) {
	if o == nil || isNil(o.Workflows) {
    return nil, false
	}
	return o.Workflows, true
}

// HasWorkflows returns a boolean if a field has been set.
func (o *WorkflowList) HasWorkflows() bool {
	if o != nil && !isNil(o.Workflows) {
		return true
	}

	return false
}

// SetWorkflows gets a reference to the given []LegacyWorkflow and assigns it to the Workflows field.
func (o *WorkflowList) SetWorkflows(v []LegacyWorkflow) {
	o.Workflows = v
}

func (o WorkflowList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Workflows) {
		toSerialize["workflows"] = o.Workflows
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowList struct {
	value *WorkflowList
	isSet bool
}

func (v NullableWorkflowList) Get() *WorkflowList {
	return v.value
}

func (v *NullableWorkflowList) Set(val *WorkflowList) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowList) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowList(val *WorkflowList) *NullableWorkflowList {
	return &NullableWorkflowList{value: val, isSet: true}
}

func (v NullableWorkflowList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


