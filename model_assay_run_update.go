/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AssayRunUpdate struct for AssayRunUpdate
type AssayRunUpdate struct {
	Fields *map[string]Field `json:"fields,omitempty"`
}

// NewAssayRunUpdate instantiates a new AssayRunUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssayRunUpdate() *AssayRunUpdate {
	this := AssayRunUpdate{}
	return &this
}

// NewAssayRunUpdateWithDefaults instantiates a new AssayRunUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssayRunUpdateWithDefaults() *AssayRunUpdate {
	this := AssayRunUpdate{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *AssayRunUpdate) GetFields() map[string]Field {
	if o == nil || isNil(o.Fields) {
		var ret map[string]Field
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunUpdate) GetFieldsOk() (*map[string]Field, bool) {
	if o == nil || isNil(o.Fields) {
    return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *AssayRunUpdate) HasFields() bool {
	if o != nil && !isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]Field and assigns it to the Fields field.
func (o *AssayRunUpdate) SetFields(v map[string]Field) {
	o.Fields = &v
}

func (o AssayRunUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}

type NullableAssayRunUpdate struct {
	value *AssayRunUpdate
	isSet bool
}

func (v NullableAssayRunUpdate) Get() *AssayRunUpdate {
	return v.value
}

func (v *NullableAssayRunUpdate) Set(val *AssayRunUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAssayRunUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAssayRunUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssayRunUpdate(val *AssayRunUpdate) *NullableAssayRunUpdate {
	return &NullableAssayRunUpdate{value: val, isSet: true}
}

func (v NullableAssayRunUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssayRunUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


