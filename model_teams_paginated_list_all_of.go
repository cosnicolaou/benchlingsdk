/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// TeamsPaginatedListAllOf struct for TeamsPaginatedListAllOf
type TeamsPaginatedListAllOf struct {
	Teams []Team `json:"teams,omitempty"`
}

// NewTeamsPaginatedListAllOf instantiates a new TeamsPaginatedListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamsPaginatedListAllOf() *TeamsPaginatedListAllOf {
	this := TeamsPaginatedListAllOf{}
	return &this
}

// NewTeamsPaginatedListAllOfWithDefaults instantiates a new TeamsPaginatedListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamsPaginatedListAllOfWithDefaults() *TeamsPaginatedListAllOf {
	this := TeamsPaginatedListAllOf{}
	return &this
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *TeamsPaginatedListAllOf) GetTeams() []Team {
	if o == nil || isNil(o.Teams) {
		var ret []Team
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsPaginatedListAllOf) GetTeamsOk() ([]Team, bool) {
	if o == nil || isNil(o.Teams) {
    return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *TeamsPaginatedListAllOf) HasTeams() bool {
	if o != nil && !isNil(o.Teams) {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []Team and assigns it to the Teams field.
func (o *TeamsPaginatedListAllOf) SetTeams(v []Team) {
	o.Teams = v
}

func (o TeamsPaginatedListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Teams) {
		toSerialize["teams"] = o.Teams
	}
	return json.Marshal(toSerialize)
}

type NullableTeamsPaginatedListAllOf struct {
	value *TeamsPaginatedListAllOf
	isSet bool
}

func (v NullableTeamsPaginatedListAllOf) Get() *TeamsPaginatedListAllOf {
	return v.value
}

func (v *NullableTeamsPaginatedListAllOf) Set(val *TeamsPaginatedListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamsPaginatedListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamsPaginatedListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamsPaginatedListAllOf(val *TeamsPaginatedListAllOf) *NullableTeamsPaginatedListAllOf {
	return &NullableTeamsPaginatedListAllOf{value: val, isSet: true}
}

func (v NullableTeamsPaginatedListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamsPaginatedListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


