/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// InitialTable struct for InitialTable
type InitialTable struct {
	// blobId of an uploaded csv blob. The CSV should be formatted with column headers of `columnId` which can be found in the [EntryTemplate](#/components/schemas/EntryTemplate). For more information on uploading a blob, [click here](https://docs.benchling.com/docs/uploading-a-blob-to-benchling).
	CsvData *string `json:"csvData,omitempty"`
	// Template table API ID
	TemplateTableID *string `json:"templateTableID,omitempty"`
}

// NewInitialTable instantiates a new InitialTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitialTable() *InitialTable {
	this := InitialTable{}
	return &this
}

// NewInitialTableWithDefaults instantiates a new InitialTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitialTableWithDefaults() *InitialTable {
	this := InitialTable{}
	return &this
}

// GetCsvData returns the CsvData field value if set, zero value otherwise.
func (o *InitialTable) GetCsvData() string {
	if o == nil || isNil(o.CsvData) {
		var ret string
		return ret
	}
	return *o.CsvData
}

// GetCsvDataOk returns a tuple with the CsvData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitialTable) GetCsvDataOk() (*string, bool) {
	if o == nil || isNil(o.CsvData) {
    return nil, false
	}
	return o.CsvData, true
}

// HasCsvData returns a boolean if a field has been set.
func (o *InitialTable) HasCsvData() bool {
	if o != nil && !isNil(o.CsvData) {
		return true
	}

	return false
}

// SetCsvData gets a reference to the given string and assigns it to the CsvData field.
func (o *InitialTable) SetCsvData(v string) {
	o.CsvData = &v
}

// GetTemplateTableID returns the TemplateTableID field value if set, zero value otherwise.
func (o *InitialTable) GetTemplateTableID() string {
	if o == nil || isNil(o.TemplateTableID) {
		var ret string
		return ret
	}
	return *o.TemplateTableID
}

// GetTemplateTableIDOk returns a tuple with the TemplateTableID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitialTable) GetTemplateTableIDOk() (*string, bool) {
	if o == nil || isNil(o.TemplateTableID) {
    return nil, false
	}
	return o.TemplateTableID, true
}

// HasTemplateTableID returns a boolean if a field has been set.
func (o *InitialTable) HasTemplateTableID() bool {
	if o != nil && !isNil(o.TemplateTableID) {
		return true
	}

	return false
}

// SetTemplateTableID gets a reference to the given string and assigns it to the TemplateTableID field.
func (o *InitialTable) SetTemplateTableID(v string) {
	o.TemplateTableID = &v
}

func (o InitialTable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CsvData) {
		toSerialize["csvData"] = o.CsvData
	}
	if !isNil(o.TemplateTableID) {
		toSerialize["templateTableID"] = o.TemplateTableID
	}
	return json.Marshal(toSerialize)
}

type NullableInitialTable struct {
	value *InitialTable
	isSet bool
}

func (v NullableInitialTable) Get() *InitialTable {
	return v.value
}

func (v *NullableInitialTable) Set(val *InitialTable) {
	v.value = val
	v.isSet = true
}

func (v NullableInitialTable) IsSet() bool {
	return v.isSet
}

func (v *NullableInitialTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitialTable(val *InitialTable) *NullableInitialTable {
	return &NullableInitialTable{value: val, isSet: true}
}

func (v NullableInitialTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitialTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


