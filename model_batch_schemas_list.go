/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BatchSchemasList struct for BatchSchemasList
type BatchSchemasList struct {
	BatchSchemas []BatchSchema `json:"batchSchemas,omitempty"`
}

// NewBatchSchemasList instantiates a new BatchSchemasList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchSchemasList() *BatchSchemasList {
	this := BatchSchemasList{}
	return &this
}

// NewBatchSchemasListWithDefaults instantiates a new BatchSchemasList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchSchemasListWithDefaults() *BatchSchemasList {
	this := BatchSchemasList{}
	return &this
}

// GetBatchSchemas returns the BatchSchemas field value if set, zero value otherwise.
func (o *BatchSchemasList) GetBatchSchemas() []BatchSchema {
	if o == nil || isNil(o.BatchSchemas) {
		var ret []BatchSchema
		return ret
	}
	return o.BatchSchemas
}

// GetBatchSchemasOk returns a tuple with the BatchSchemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchSchemasList) GetBatchSchemasOk() ([]BatchSchema, bool) {
	if o == nil || isNil(o.BatchSchemas) {
    return nil, false
	}
	return o.BatchSchemas, true
}

// HasBatchSchemas returns a boolean if a field has been set.
func (o *BatchSchemasList) HasBatchSchemas() bool {
	if o != nil && !isNil(o.BatchSchemas) {
		return true
	}

	return false
}

// SetBatchSchemas gets a reference to the given []BatchSchema and assigns it to the BatchSchemas field.
func (o *BatchSchemasList) SetBatchSchemas(v []BatchSchema) {
	o.BatchSchemas = v
}

func (o BatchSchemasList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BatchSchemas) {
		toSerialize["batchSchemas"] = o.BatchSchemas
	}
	return json.Marshal(toSerialize)
}

type NullableBatchSchemasList struct {
	value *BatchSchemasList
	isSet bool
}

func (v NullableBatchSchemasList) Get() *BatchSchemasList {
	return v.value
}

func (v *NullableBatchSchemasList) Set(val *BatchSchemasList) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchSchemasList) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchSchemasList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchSchemasList(val *BatchSchemasList) *NullableBatchSchemasList {
	return &NullableBatchSchemasList{value: val, isSet: true}
}

func (v NullableBatchSchemasList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchSchemasList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


