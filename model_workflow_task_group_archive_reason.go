/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// WorkflowTaskGroupArchiveReason The reason for archiving the provided workflow task groups. Accepted reasons may differ based on tenant configuration. 
type WorkflowTaskGroupArchiveReason string

// List of WorkflowTaskGroupArchiveReason
const (
	MADE_IN_ERROR WorkflowTaskGroupArchiveReason = "Made in error"
	RETIRED WorkflowTaskGroupArchiveReason = "Retired"
	OTHER WorkflowTaskGroupArchiveReason = "Other"
)

// All allowed values of WorkflowTaskGroupArchiveReason enum
var AllowedWorkflowTaskGroupArchiveReasonEnumValues = []WorkflowTaskGroupArchiveReason{
	"Made in error",
	"Retired",
	"Other",
}

func (v *WorkflowTaskGroupArchiveReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkflowTaskGroupArchiveReason(value)
	for _, existing := range AllowedWorkflowTaskGroupArchiveReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkflowTaskGroupArchiveReason", value)
}

// NewWorkflowTaskGroupArchiveReasonFromValue returns a pointer to a valid WorkflowTaskGroupArchiveReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkflowTaskGroupArchiveReasonFromValue(v string) (*WorkflowTaskGroupArchiveReason, error) {
	ev := WorkflowTaskGroupArchiveReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkflowTaskGroupArchiveReason: valid values are %v", v, AllowedWorkflowTaskGroupArchiveReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkflowTaskGroupArchiveReason) IsValid() bool {
	for _, existing := range AllowedWorkflowTaskGroupArchiveReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkflowTaskGroupArchiveReason value
func (v WorkflowTaskGroupArchiveReason) Ptr() *WorkflowTaskGroupArchiveReason {
	return &v
}

type NullableWorkflowTaskGroupArchiveReason struct {
	value *WorkflowTaskGroupArchiveReason
	isSet bool
}

func (v NullableWorkflowTaskGroupArchiveReason) Get() *WorkflowTaskGroupArchiveReason {
	return v.value
}

func (v *NullableWorkflowTaskGroupArchiveReason) Set(val *WorkflowTaskGroupArchiveReason) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowTaskGroupArchiveReason) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowTaskGroupArchiveReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowTaskGroupArchiveReason(val *WorkflowTaskGroupArchiveReason) *NullableWorkflowTaskGroupArchiveReason {
	return &NullableWorkflowTaskGroupArchiveReason{value: val, isSet: true}
}

func (v NullableWorkflowTaskGroupArchiveReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowTaskGroupArchiveReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

