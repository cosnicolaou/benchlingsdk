/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ArchiveRecord struct for ArchiveRecord
type ArchiveRecord struct {
	Reason *string `json:"reason,omitempty"`
}

// NewArchiveRecord instantiates a new ArchiveRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchiveRecord() *ArchiveRecord {
	this := ArchiveRecord{}
	return &this
}

// NewArchiveRecordWithDefaults instantiates a new ArchiveRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchiveRecordWithDefaults() *ArchiveRecord {
	this := ArchiveRecord{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ArchiveRecord) GetReason() string {
	if o == nil || isNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchiveRecord) GetReasonOk() (*string, bool) {
	if o == nil || isNil(o.Reason) {
    return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ArchiveRecord) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ArchiveRecord) SetReason(v string) {
	o.Reason = &v
}

func (o ArchiveRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableArchiveRecord struct {
	value *ArchiveRecord
	isSet bool
}

func (v NullableArchiveRecord) Get() *ArchiveRecord {
	return v.value
}

func (v *NullableArchiveRecord) Set(val *ArchiveRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableArchiveRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableArchiveRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchiveRecord(val *ArchiveRecord) *NullableArchiveRecord {
	return &NullableArchiveRecord{value: val, isSet: true}
}

func (v NullableArchiveRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchiveRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


