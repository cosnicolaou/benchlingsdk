/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BoxesUnarchive struct for BoxesUnarchive
type BoxesUnarchive struct {
	// Array of box IDs
	BoxIds []string `json:"boxIds"`
}

// NewBoxesUnarchive instantiates a new BoxesUnarchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBoxesUnarchive(boxIds []string) *BoxesUnarchive {
	this := BoxesUnarchive{}
	this.BoxIds = boxIds
	return &this
}

// NewBoxesUnarchiveWithDefaults instantiates a new BoxesUnarchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoxesUnarchiveWithDefaults() *BoxesUnarchive {
	this := BoxesUnarchive{}
	return &this
}

// GetBoxIds returns the BoxIds field value
func (o *BoxesUnarchive) GetBoxIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.BoxIds
}

// GetBoxIdsOk returns a tuple with the BoxIds field value
// and a boolean to check if the value has been set.
func (o *BoxesUnarchive) GetBoxIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.BoxIds, true
}

// SetBoxIds sets field value
func (o *BoxesUnarchive) SetBoxIds(v []string) {
	o.BoxIds = v
}

func (o BoxesUnarchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["boxIds"] = o.BoxIds
	}
	return json.Marshal(toSerialize)
}

type NullableBoxesUnarchive struct {
	value *BoxesUnarchive
	isSet bool
}

func (v NullableBoxesUnarchive) Get() *BoxesUnarchive {
	return v.value
}

func (v *NullableBoxesUnarchive) Set(val *BoxesUnarchive) {
	v.value = val
	v.isSet = true
}

func (v NullableBoxesUnarchive) IsSet() bool {
	return v.isSet
}

func (v *NullableBoxesUnarchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBoxesUnarchive(val *BoxesUnarchive) *NullableBoxesUnarchive {
	return &NullableBoxesUnarchive{value: val, isSet: true}
}

func (v NullableBoxesUnarchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBoxesUnarchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


