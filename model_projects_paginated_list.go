/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ProjectsPaginatedList struct for ProjectsPaginatedList
type ProjectsPaginatedList struct {
	NextToken *string `json:"nextToken,omitempty"`
	Projects []Project `json:"projects,omitempty"`
}

// NewProjectsPaginatedList instantiates a new ProjectsPaginatedList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsPaginatedList() *ProjectsPaginatedList {
	this := ProjectsPaginatedList{}
	return &this
}

// NewProjectsPaginatedListWithDefaults instantiates a new ProjectsPaginatedList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsPaginatedListWithDefaults() *ProjectsPaginatedList {
	this := ProjectsPaginatedList{}
	return &this
}

// GetNextToken returns the NextToken field value if set, zero value otherwise.
func (o *ProjectsPaginatedList) GetNextToken() string {
	if o == nil || isNil(o.NextToken) {
		var ret string
		return ret
	}
	return *o.NextToken
}

// GetNextTokenOk returns a tuple with the NextToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsPaginatedList) GetNextTokenOk() (*string, bool) {
	if o == nil || isNil(o.NextToken) {
    return nil, false
	}
	return o.NextToken, true
}

// HasNextToken returns a boolean if a field has been set.
func (o *ProjectsPaginatedList) HasNextToken() bool {
	if o != nil && !isNil(o.NextToken) {
		return true
	}

	return false
}

// SetNextToken gets a reference to the given string and assigns it to the NextToken field.
func (o *ProjectsPaginatedList) SetNextToken(v string) {
	o.NextToken = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *ProjectsPaginatedList) GetProjects() []Project {
	if o == nil || isNil(o.Projects) {
		var ret []Project
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectsPaginatedList) GetProjectsOk() ([]Project, bool) {
	if o == nil || isNil(o.Projects) {
    return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *ProjectsPaginatedList) HasProjects() bool {
	if o != nil && !isNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []Project and assigns it to the Projects field.
func (o *ProjectsPaginatedList) SetProjects(v []Project) {
	o.Projects = v
}

func (o ProjectsPaginatedList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NextToken) {
		toSerialize["nextToken"] = o.NextToken
	}
	if !isNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsPaginatedList struct {
	value *ProjectsPaginatedList
	isSet bool
}

func (v NullableProjectsPaginatedList) Get() *ProjectsPaginatedList {
	return v.value
}

func (v *NullableProjectsPaginatedList) Set(val *ProjectsPaginatedList) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsPaginatedList) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsPaginatedList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsPaginatedList(val *ProjectsPaginatedList) *NullableProjectsPaginatedList {
	return &NullableProjectsPaginatedList{value: val, isSet: true}
}

func (v NullableProjectsPaginatedList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsPaginatedList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


