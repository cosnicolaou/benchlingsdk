/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// LegacyWorkflowsDeprecatedApiService LegacyWorkflowsDeprecatedApi service
type LegacyWorkflowsDeprecatedApiService service

type ApiListStageRunInputSamplesRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsDeprecatedApiService
	stageRunId string
}

func (r ApiListStageRunInputSamplesRequest) Execute() (*WorkflowSampleList, *http.Response, error) {
	return r.ApiService.ListStageRunInputSamplesExecute(r)
}

/*
ListStageRunInputSamples List stage run input samples

List stage run input samples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stageRunId ID of the stage run to list input samples for
 @return ApiListStageRunInputSamplesRequest

Deprecated
*/
func (a *LegacyWorkflowsDeprecatedApiService) ListStageRunInputSamples(ctx context.Context, stageRunId string) ApiListStageRunInputSamplesRequest {
	return ApiListStageRunInputSamplesRequest{
		ApiService: a,
		ctx: ctx,
		stageRunId: stageRunId,
	}
}

// Execute executes the request
//  @return WorkflowSampleList
// Deprecated
func (a *LegacyWorkflowsDeprecatedApiService) ListStageRunInputSamplesExecute(r ApiListStageRunInputSamplesRequest) (*WorkflowSampleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowSampleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsDeprecatedApiService.ListStageRunInputSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-stage-runs/{stage_run_id}/input-samples"
	localVarPath = strings.Replace(localVarPath, "{"+"stage_run_id"+"}", url.PathEscape(parameterToString(r.stageRunId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListStageRunOutputSamplesRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsDeprecatedApiService
	stageRunId string
}

func (r ApiListStageRunOutputSamplesRequest) Execute() (*WorkflowSampleList, *http.Response, error) {
	return r.ApiService.ListStageRunOutputSamplesExecute(r)
}

/*
ListStageRunOutputSamples List stage run output samples

List stage run output samples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stageRunId ID of the stage run to list output samples for
 @return ApiListStageRunOutputSamplesRequest

Deprecated
*/
func (a *LegacyWorkflowsDeprecatedApiService) ListStageRunOutputSamples(ctx context.Context, stageRunId string) ApiListStageRunOutputSamplesRequest {
	return ApiListStageRunOutputSamplesRequest{
		ApiService: a,
		ctx: ctx,
		stageRunId: stageRunId,
	}
}

// Execute executes the request
//  @return WorkflowSampleList
// Deprecated
func (a *LegacyWorkflowsDeprecatedApiService) ListStageRunOutputSamplesExecute(r ApiListStageRunOutputSamplesRequest) (*WorkflowSampleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowSampleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsDeprecatedApiService.ListStageRunOutputSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-stage-runs/{stage_run_id}/output-samples"
	localVarPath = strings.Replace(localVarPath, "{"+"stage_run_id"+"}", url.PathEscape(parameterToString(r.stageRunId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListStageRunRegisteredSamplesRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsDeprecatedApiService
	stageRunId string
}

func (r ApiListStageRunRegisteredSamplesRequest) Execute() (*WorkflowSampleList, *http.Response, error) {
	return r.ApiService.ListStageRunRegisteredSamplesExecute(r)
}

/*
ListStageRunRegisteredSamples List stage run registered samples

List stage run registered samples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stageRunId ID of the stage run to list registered samples for
 @return ApiListStageRunRegisteredSamplesRequest

Deprecated
*/
func (a *LegacyWorkflowsDeprecatedApiService) ListStageRunRegisteredSamples(ctx context.Context, stageRunId string) ApiListStageRunRegisteredSamplesRequest {
	return ApiListStageRunRegisteredSamplesRequest{
		ApiService: a,
		ctx: ctx,
		stageRunId: stageRunId,
	}
}

// Execute executes the request
//  @return WorkflowSampleList
// Deprecated
func (a *LegacyWorkflowsDeprecatedApiService) ListStageRunRegisteredSamplesExecute(r ApiListStageRunRegisteredSamplesRequest) (*WorkflowSampleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowSampleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsDeprecatedApiService.ListStageRunRegisteredSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-stage-runs/{stage_run_id}/registered-samples"
	localVarPath = strings.Replace(localVarPath, "{"+"stage_run_id"+"}", url.PathEscape(parameterToString(r.stageRunId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListWorkflowStageRunsRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsDeprecatedApiService
	stageId string
}

func (r ApiListWorkflowStageRunsRequest) Execute() (*WorkflowStageRunList, *http.Response, error) {
	return r.ApiService.ListWorkflowStageRunsExecute(r)
}

/*
ListWorkflowStageRuns List workflow stage runs

List workflow stage runs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stageId ID of the workflow stage to list runs for
 @return ApiListWorkflowStageRunsRequest

Deprecated
*/
func (a *LegacyWorkflowsDeprecatedApiService) ListWorkflowStageRuns(ctx context.Context, stageId string) ApiListWorkflowStageRunsRequest {
	return ApiListWorkflowStageRunsRequest{
		ApiService: a,
		ctx: ctx,
		stageId: stageId,
	}
}

// Execute executes the request
//  @return WorkflowStageRunList
// Deprecated
func (a *LegacyWorkflowsDeprecatedApiService) ListWorkflowStageRunsExecute(r ApiListWorkflowStageRunsRequest) (*WorkflowStageRunList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowStageRunList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsDeprecatedApiService.ListWorkflowStageRuns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-stages/{stage_id}/workflow-stage-runs"
	localVarPath = strings.Replace(localVarPath, "{"+"stage_id"+"}", url.PathEscape(parameterToString(r.stageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListWorkflowStagesRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsDeprecatedApiService
	workflowId string
}

func (r ApiListWorkflowStagesRequest) Execute() (*WorkflowStageList, *http.Response, error) {
	return r.ApiService.ListWorkflowStagesExecute(r)
}

/*
ListWorkflowStages List workflow stages

List workflow stages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowId ID of the workflow to list stages for
 @return ApiListWorkflowStagesRequest

Deprecated
*/
func (a *LegacyWorkflowsDeprecatedApiService) ListWorkflowStages(ctx context.Context, workflowId string) ApiListWorkflowStagesRequest {
	return ApiListWorkflowStagesRequest{
		ApiService: a,
		ctx: ctx,
		workflowId: workflowId,
	}
}

// Execute executes the request
//  @return WorkflowStageList
// Deprecated
func (a *LegacyWorkflowsDeprecatedApiService) ListWorkflowStagesExecute(r ApiListWorkflowStagesRequest) (*WorkflowStageList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowStageList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsDeprecatedApiService.ListWorkflowStages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflows/{workflow_id}/workflow-stages"
	localVarPath = strings.Replace(localVarPath, "{"+"workflow_id"+"}", url.PathEscape(parameterToString(r.workflowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListWorkflowsRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsDeprecatedApiService
}

func (r ApiListWorkflowsRequest) Execute() (*WorkflowList, *http.Response, error) {
	return r.ApiService.ListWorkflowsExecute(r)
}

/*
ListWorkflows List workflows

List workflows

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListWorkflowsRequest

Deprecated
*/
func (a *LegacyWorkflowsDeprecatedApiService) ListWorkflows(ctx context.Context) ApiListWorkflowsRequest {
	return ApiListWorkflowsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WorkflowList
// Deprecated
func (a *LegacyWorkflowsDeprecatedApiService) ListWorkflowsExecute(r ApiListWorkflowsRequest) (*WorkflowList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsDeprecatedApiService.ListWorkflows")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflows"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateWorkflowMetadataRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsDeprecatedApiService
	workflowId string
	workflowPatch *WorkflowPatch
}

func (r ApiUpdateWorkflowMetadataRequest) WorkflowPatch(workflowPatch WorkflowPatch) ApiUpdateWorkflowMetadataRequest {
	r.workflowPatch = &workflowPatch
	return r
}

func (r ApiUpdateWorkflowMetadataRequest) Execute() (*LegacyWorkflow, *http.Response, error) {
	return r.ApiService.UpdateWorkflowMetadataExecute(r)
}

/*
UpdateWorkflowMetadata Update workflow

Update workflow metadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowId ID of the workflow to update
 @return ApiUpdateWorkflowMetadataRequest

Deprecated
*/
func (a *LegacyWorkflowsDeprecatedApiService) UpdateWorkflowMetadata(ctx context.Context, workflowId string) ApiUpdateWorkflowMetadataRequest {
	return ApiUpdateWorkflowMetadataRequest{
		ApiService: a,
		ctx: ctx,
		workflowId: workflowId,
	}
}

// Execute executes the request
//  @return LegacyWorkflow
// Deprecated
func (a *LegacyWorkflowsDeprecatedApiService) UpdateWorkflowMetadataExecute(r ApiUpdateWorkflowMetadataRequest) (*LegacyWorkflow, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LegacyWorkflow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsDeprecatedApiService.UpdateWorkflowMetadata")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflows/{workflow_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"workflow_id"+"}", url.PathEscape(parameterToString(r.workflowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workflowPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
