/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"time"
)

// CheckoutRecord  *assignee field* is set if status is \"RESERVED\" or \"CHECKED_OUT\", or null if status is \"AVAILABLE\".  *comment field* is set when container was last reserved, checked out, or checked into.  *modifiedAt field* is the date and time when container was last checked out, checked in, or reserved 
type CheckoutRecord struct {
	Assignee NullableCheckoutRecordAssignee `json:"assignee,omitempty"`
	Comment *string `json:"comment,omitempty"`
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewCheckoutRecord instantiates a new CheckoutRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckoutRecord() *CheckoutRecord {
	this := CheckoutRecord{}
	return &this
}

// NewCheckoutRecordWithDefaults instantiates a new CheckoutRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckoutRecordWithDefaults() *CheckoutRecord {
	this := CheckoutRecord{}
	return &this
}

// GetAssignee returns the Assignee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CheckoutRecord) GetAssignee() CheckoutRecordAssignee {
	if o == nil || isNil(o.Assignee.Get()) {
		var ret CheckoutRecordAssignee
		return ret
	}
	return *o.Assignee.Get()
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CheckoutRecord) GetAssigneeOk() (*CheckoutRecordAssignee, bool) {
	if o == nil {
    return nil, false
	}
	return o.Assignee.Get(), o.Assignee.IsSet()
}

// HasAssignee returns a boolean if a field has been set.
func (o *CheckoutRecord) HasAssignee() bool {
	if o != nil && o.Assignee.IsSet() {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given NullableCheckoutRecordAssignee and assigns it to the Assignee field.
func (o *CheckoutRecord) SetAssignee(v CheckoutRecordAssignee) {
	o.Assignee.Set(&v)
}
// SetAssigneeNil sets the value for Assignee to be an explicit nil
func (o *CheckoutRecord) SetAssigneeNil() {
	o.Assignee.Set(nil)
}

// UnsetAssignee ensures that no value is present for Assignee, not even an explicit nil
func (o *CheckoutRecord) UnsetAssignee() {
	o.Assignee.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *CheckoutRecord) GetComment() string {
	if o == nil || isNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRecord) GetCommentOk() (*string, bool) {
	if o == nil || isNil(o.Comment) {
    return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *CheckoutRecord) HasComment() bool {
	if o != nil && !isNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *CheckoutRecord) SetComment(v string) {
	o.Comment = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *CheckoutRecord) GetModifiedAt() time.Time {
	if o == nil || isNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRecord) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.ModifiedAt) {
    return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *CheckoutRecord) HasModifiedAt() bool {
	if o != nil && !isNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *CheckoutRecord) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CheckoutRecord) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckoutRecord) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CheckoutRecord) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CheckoutRecord) SetStatus(v string) {
	o.Status = &v
}

func (o CheckoutRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Assignee.IsSet() {
		toSerialize["assignee"] = o.Assignee.Get()
	}
	if !isNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !isNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableCheckoutRecord struct {
	value *CheckoutRecord
	isSet bool
}

func (v NullableCheckoutRecord) Get() *CheckoutRecord {
	return v.value
}

func (v *NullableCheckoutRecord) Set(val *CheckoutRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutRecord(val *CheckoutRecord) *NullableCheckoutRecord {
	return &NullableCheckoutRecord{value: val, isSet: true}
}

func (v NullableCheckoutRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


