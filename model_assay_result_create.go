/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AssayResultCreate struct for AssayResultCreate
type AssayResultCreate struct {
	// Dictionary mapping field names to UserValidation Resources. 
	FieldValidation *map[string]UserValidation `json:"fieldValidation,omitempty"`
	Fields AssayResultCreateFields `json:"fields"`
	// UUID
	Id *string `json:"id,omitempty"`
	// The project that the assay result should be uploaded to. Only users with read access to the project will be able to read the assay result. Leaving this empty will result in only the creator having read access. 
	ProjectId NullableString `json:"projectId,omitempty"`
	// ID of result schema under which to upload this result
	SchemaId string `json:"schemaId"`
}

// NewAssayResultCreate instantiates a new AssayResultCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssayResultCreate(fields AssayResultCreateFields, schemaId string) *AssayResultCreate {
	this := AssayResultCreate{}
	this.Fields = fields
	this.SchemaId = schemaId
	return &this
}

// NewAssayResultCreateWithDefaults instantiates a new AssayResultCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssayResultCreateWithDefaults() *AssayResultCreate {
	this := AssayResultCreate{}
	return &this
}

// GetFieldValidation returns the FieldValidation field value if set, zero value otherwise.
func (o *AssayResultCreate) GetFieldValidation() map[string]UserValidation {
	if o == nil || isNil(o.FieldValidation) {
		var ret map[string]UserValidation
		return ret
	}
	return *o.FieldValidation
}

// GetFieldValidationOk returns a tuple with the FieldValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayResultCreate) GetFieldValidationOk() (*map[string]UserValidation, bool) {
	if o == nil || isNil(o.FieldValidation) {
    return nil, false
	}
	return o.FieldValidation, true
}

// HasFieldValidation returns a boolean if a field has been set.
func (o *AssayResultCreate) HasFieldValidation() bool {
	if o != nil && !isNil(o.FieldValidation) {
		return true
	}

	return false
}

// SetFieldValidation gets a reference to the given map[string]UserValidation and assigns it to the FieldValidation field.
func (o *AssayResultCreate) SetFieldValidation(v map[string]UserValidation) {
	o.FieldValidation = &v
}

// GetFields returns the Fields field value
func (o *AssayResultCreate) GetFields() AssayResultCreateFields {
	if o == nil {
		var ret AssayResultCreateFields
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *AssayResultCreate) GetFieldsOk() (*AssayResultCreateFields, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Fields, true
}

// SetFields sets field value
func (o *AssayResultCreate) SetFields(v AssayResultCreateFields) {
	o.Fields = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AssayResultCreate) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayResultCreate) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AssayResultCreate) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AssayResultCreate) SetId(v string) {
	o.Id = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssayResultCreate) GetProjectId() string {
	if o == nil || isNil(o.ProjectId.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssayResultCreate) GetProjectIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *AssayResultCreate) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableString and assigns it to the ProjectId field.
func (o *AssayResultCreate) SetProjectId(v string) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *AssayResultCreate) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *AssayResultCreate) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetSchemaId returns the SchemaId field value
func (o *AssayResultCreate) GetSchemaId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value
// and a boolean to check if the value has been set.
func (o *AssayResultCreate) GetSchemaIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SchemaId, true
}

// SetSchemaId sets field value
func (o *AssayResultCreate) SetSchemaId(v string) {
	o.SchemaId = v
}

func (o AssayResultCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FieldValidation) {
		toSerialize["fieldValidation"] = o.FieldValidation
	}
	if true {
		toSerialize["fields"] = o.Fields
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ProjectId.IsSet() {
		toSerialize["projectId"] = o.ProjectId.Get()
	}
	if true {
		toSerialize["schemaId"] = o.SchemaId
	}
	return json.Marshal(toSerialize)
}

type NullableAssayResultCreate struct {
	value *AssayResultCreate
	isSet bool
}

func (v NullableAssayResultCreate) Get() *AssayResultCreate {
	return v.value
}

func (v *NullableAssayResultCreate) Set(val *AssayResultCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableAssayResultCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableAssayResultCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssayResultCreate(val *AssayResultCreate) *NullableAssayResultCreate {
	return &NullableAssayResultCreate{value: val, isSet: true}
}

func (v NullableAssayResultCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssayResultCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


