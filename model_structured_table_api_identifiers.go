/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// StructuredTableApiIdentifiers struct for StructuredTableApiIdentifiers
type StructuredTableApiIdentifiers struct {
	ApiId *string `json:"apiId,omitempty"`
	Columns []StructuredTableColumnInfo `json:"columns,omitempty"`
}

// NewStructuredTableApiIdentifiers instantiates a new StructuredTableApiIdentifiers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructuredTableApiIdentifiers() *StructuredTableApiIdentifiers {
	this := StructuredTableApiIdentifiers{}
	return &this
}

// NewStructuredTableApiIdentifiersWithDefaults instantiates a new StructuredTableApiIdentifiers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructuredTableApiIdentifiersWithDefaults() *StructuredTableApiIdentifiers {
	this := StructuredTableApiIdentifiers{}
	return &this
}

// GetApiId returns the ApiId field value if set, zero value otherwise.
func (o *StructuredTableApiIdentifiers) GetApiId() string {
	if o == nil || isNil(o.ApiId) {
		var ret string
		return ret
	}
	return *o.ApiId
}

// GetApiIdOk returns a tuple with the ApiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuredTableApiIdentifiers) GetApiIdOk() (*string, bool) {
	if o == nil || isNil(o.ApiId) {
    return nil, false
	}
	return o.ApiId, true
}

// HasApiId returns a boolean if a field has been set.
func (o *StructuredTableApiIdentifiers) HasApiId() bool {
	if o != nil && !isNil(o.ApiId) {
		return true
	}

	return false
}

// SetApiId gets a reference to the given string and assigns it to the ApiId field.
func (o *StructuredTableApiIdentifiers) SetApiId(v string) {
	o.ApiId = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *StructuredTableApiIdentifiers) GetColumns() []StructuredTableColumnInfo {
	if o == nil || isNil(o.Columns) {
		var ret []StructuredTableColumnInfo
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuredTableApiIdentifiers) GetColumnsOk() ([]StructuredTableColumnInfo, bool) {
	if o == nil || isNil(o.Columns) {
    return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *StructuredTableApiIdentifiers) HasColumns() bool {
	if o != nil && !isNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []StructuredTableColumnInfo and assigns it to the Columns field.
func (o *StructuredTableApiIdentifiers) SetColumns(v []StructuredTableColumnInfo) {
	o.Columns = v
}

func (o StructuredTableApiIdentifiers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ApiId) {
		toSerialize["apiId"] = o.ApiId
	}
	if !isNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	return json.Marshal(toSerialize)
}

type NullableStructuredTableApiIdentifiers struct {
	value *StructuredTableApiIdentifiers
	isSet bool
}

func (v NullableStructuredTableApiIdentifiers) Get() *StructuredTableApiIdentifiers {
	return v.value
}

func (v *NullableStructuredTableApiIdentifiers) Set(val *StructuredTableApiIdentifiers) {
	v.value = val
	v.isSet = true
}

func (v NullableStructuredTableApiIdentifiers) IsSet() bool {
	return v.isSet
}

func (v *NullableStructuredTableApiIdentifiers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructuredTableApiIdentifiers(val *StructuredTableApiIdentifiers) *NullableStructuredTableApiIdentifiers {
	return &NullableStructuredTableApiIdentifiers{value: val, isSet: true}
}

func (v NullableStructuredTableApiIdentifiers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructuredTableApiIdentifiers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


