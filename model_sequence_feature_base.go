/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// SequenceFeatureBase struct for SequenceFeatureBase
type SequenceFeatureBase struct {
	// Hex color code used when displaying this feature in the UI.
	Color *string `json:"color,omitempty"`
	CustomFields []SequenceFeatureCustomField `json:"customFields,omitempty"`
	Name *string `json:"name,omitempty"`
	Notes *string `json:"notes,omitempty"`
}

// NewSequenceFeatureBase instantiates a new SequenceFeatureBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSequenceFeatureBase() *SequenceFeatureBase {
	this := SequenceFeatureBase{}
	return &this
}

// NewSequenceFeatureBaseWithDefaults instantiates a new SequenceFeatureBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSequenceFeatureBaseWithDefaults() *SequenceFeatureBase {
	this := SequenceFeatureBase{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *SequenceFeatureBase) GetColor() string {
	if o == nil || isNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SequenceFeatureBase) GetColorOk() (*string, bool) {
	if o == nil || isNil(o.Color) {
    return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *SequenceFeatureBase) HasColor() bool {
	if o != nil && !isNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *SequenceFeatureBase) SetColor(v string) {
	o.Color = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *SequenceFeatureBase) GetCustomFields() []SequenceFeatureCustomField {
	if o == nil || isNil(o.CustomFields) {
		var ret []SequenceFeatureCustomField
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SequenceFeatureBase) GetCustomFieldsOk() ([]SequenceFeatureCustomField, bool) {
	if o == nil || isNil(o.CustomFields) {
    return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *SequenceFeatureBase) HasCustomFields() bool {
	if o != nil && !isNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given []SequenceFeatureCustomField and assigns it to the CustomFields field.
func (o *SequenceFeatureBase) SetCustomFields(v []SequenceFeatureCustomField) {
	o.CustomFields = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SequenceFeatureBase) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SequenceFeatureBase) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SequenceFeatureBase) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SequenceFeatureBase) SetName(v string) {
	o.Name = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *SequenceFeatureBase) GetNotes() string {
	if o == nil || isNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SequenceFeatureBase) GetNotesOk() (*string, bool) {
	if o == nil || isNil(o.Notes) {
    return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *SequenceFeatureBase) HasNotes() bool {
	if o != nil && !isNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *SequenceFeatureBase) SetNotes(v string) {
	o.Notes = &v
}

func (o SequenceFeatureBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !isNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	return json.Marshal(toSerialize)
}

type NullableSequenceFeatureBase struct {
	value *SequenceFeatureBase
	isSet bool
}

func (v NullableSequenceFeatureBase) Get() *SequenceFeatureBase {
	return v.value
}

func (v *NullableSequenceFeatureBase) Set(val *SequenceFeatureBase) {
	v.value = val
	v.isSet = true
}

func (v NullableSequenceFeatureBase) IsSet() bool {
	return v.isSet
}

func (v *NullableSequenceFeatureBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSequenceFeatureBase(val *SequenceFeatureBase) *NullableSequenceFeatureBase {
	return &NullableSequenceFeatureBase{value: val, isSet: true}
}

func (v NullableSequenceFeatureBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSequenceFeatureBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


