/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntryTemplateDay struct for EntryTemplateDay
type EntryTemplateDay struct {
	// 1 indexed day signifier.
	Day *int32 `json:"day,omitempty"`
	Notes []EntryTemplateDayNotesInner `json:"notes,omitempty"`
}

// NewEntryTemplateDay instantiates a new EntryTemplateDay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryTemplateDay() *EntryTemplateDay {
	this := EntryTemplateDay{}
	return &this
}

// NewEntryTemplateDayWithDefaults instantiates a new EntryTemplateDay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryTemplateDayWithDefaults() *EntryTemplateDay {
	this := EntryTemplateDay{}
	return &this
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *EntryTemplateDay) GetDay() int32 {
	if o == nil || isNil(o.Day) {
		var ret int32
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryTemplateDay) GetDayOk() (*int32, bool) {
	if o == nil || isNil(o.Day) {
    return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *EntryTemplateDay) HasDay() bool {
	if o != nil && !isNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given int32 and assigns it to the Day field.
func (o *EntryTemplateDay) SetDay(v int32) {
	o.Day = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *EntryTemplateDay) GetNotes() []EntryTemplateDayNotesInner {
	if o == nil || isNil(o.Notes) {
		var ret []EntryTemplateDayNotesInner
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryTemplateDay) GetNotesOk() ([]EntryTemplateDayNotesInner, bool) {
	if o == nil || isNil(o.Notes) {
    return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *EntryTemplateDay) HasNotes() bool {
	if o != nil && !isNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []EntryTemplateDayNotesInner and assigns it to the Notes field.
func (o *EntryTemplateDay) SetNotes(v []EntryTemplateDayNotesInner) {
	o.Notes = v
}

func (o EntryTemplateDay) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Day) {
		toSerialize["day"] = o.Day
	}
	if !isNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	return json.Marshal(toSerialize)
}

type NullableEntryTemplateDay struct {
	value *EntryTemplateDay
	isSet bool
}

func (v NullableEntryTemplateDay) Get() *EntryTemplateDay {
	return v.value
}

func (v *NullableEntryTemplateDay) Set(val *EntryTemplateDay) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryTemplateDay) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryTemplateDay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryTemplateDay(val *EntryTemplateDay) *NullableEntryTemplateDay {
	return &NullableEntryTemplateDay{value: val, isSet: true}
}

func (v NullableEntryTemplateDay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryTemplateDay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


