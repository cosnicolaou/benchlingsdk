/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// AppConfigItemBulkUpdate - struct for AppConfigItemBulkUpdate
type AppConfigItemBulkUpdate struct {
	AppConfigItemBooleanBulkUpdate *AppConfigItemBooleanBulkUpdate
	AppConfigItemDateBulkUpdate *AppConfigItemDateBulkUpdate
	AppConfigItemDatetimeBulkUpdate *AppConfigItemDatetimeBulkUpdate
	AppConfigItemFloatBulkUpdate *AppConfigItemFloatBulkUpdate
	AppConfigItemGenericBulkUpdate *AppConfigItemGenericBulkUpdate
	AppConfigItemIntegerBulkUpdate *AppConfigItemIntegerBulkUpdate
	AppConfigItemJsonBulkUpdate *AppConfigItemJsonBulkUpdate
}

// AppConfigItemBooleanBulkUpdateAsAppConfigItemBulkUpdate is a convenience function that returns AppConfigItemBooleanBulkUpdate wrapped in AppConfigItemBulkUpdate
func AppConfigItemBooleanBulkUpdateAsAppConfigItemBulkUpdate(v *AppConfigItemBooleanBulkUpdate) AppConfigItemBulkUpdate {
	return AppConfigItemBulkUpdate{
		AppConfigItemBooleanBulkUpdate: v,
	}
}

// AppConfigItemDateBulkUpdateAsAppConfigItemBulkUpdate is a convenience function that returns AppConfigItemDateBulkUpdate wrapped in AppConfigItemBulkUpdate
func AppConfigItemDateBulkUpdateAsAppConfigItemBulkUpdate(v *AppConfigItemDateBulkUpdate) AppConfigItemBulkUpdate {
	return AppConfigItemBulkUpdate{
		AppConfigItemDateBulkUpdate: v,
	}
}

// AppConfigItemDatetimeBulkUpdateAsAppConfigItemBulkUpdate is a convenience function that returns AppConfigItemDatetimeBulkUpdate wrapped in AppConfigItemBulkUpdate
func AppConfigItemDatetimeBulkUpdateAsAppConfigItemBulkUpdate(v *AppConfigItemDatetimeBulkUpdate) AppConfigItemBulkUpdate {
	return AppConfigItemBulkUpdate{
		AppConfigItemDatetimeBulkUpdate: v,
	}
}

// AppConfigItemFloatBulkUpdateAsAppConfigItemBulkUpdate is a convenience function that returns AppConfigItemFloatBulkUpdate wrapped in AppConfigItemBulkUpdate
func AppConfigItemFloatBulkUpdateAsAppConfigItemBulkUpdate(v *AppConfigItemFloatBulkUpdate) AppConfigItemBulkUpdate {
	return AppConfigItemBulkUpdate{
		AppConfigItemFloatBulkUpdate: v,
	}
}

// AppConfigItemGenericBulkUpdateAsAppConfigItemBulkUpdate is a convenience function that returns AppConfigItemGenericBulkUpdate wrapped in AppConfigItemBulkUpdate
func AppConfigItemGenericBulkUpdateAsAppConfigItemBulkUpdate(v *AppConfigItemGenericBulkUpdate) AppConfigItemBulkUpdate {
	return AppConfigItemBulkUpdate{
		AppConfigItemGenericBulkUpdate: v,
	}
}

// AppConfigItemIntegerBulkUpdateAsAppConfigItemBulkUpdate is a convenience function that returns AppConfigItemIntegerBulkUpdate wrapped in AppConfigItemBulkUpdate
func AppConfigItemIntegerBulkUpdateAsAppConfigItemBulkUpdate(v *AppConfigItemIntegerBulkUpdate) AppConfigItemBulkUpdate {
	return AppConfigItemBulkUpdate{
		AppConfigItemIntegerBulkUpdate: v,
	}
}

// AppConfigItemJsonBulkUpdateAsAppConfigItemBulkUpdate is a convenience function that returns AppConfigItemJsonBulkUpdate wrapped in AppConfigItemBulkUpdate
func AppConfigItemJsonBulkUpdateAsAppConfigItemBulkUpdate(v *AppConfigItemJsonBulkUpdate) AppConfigItemBulkUpdate {
	return AppConfigItemBulkUpdate{
		AppConfigItemJsonBulkUpdate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AppConfigItemBulkUpdate) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppConfigItemBooleanBulkUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemBooleanBulkUpdate)
	if err == nil {
		jsonAppConfigItemBooleanBulkUpdate, _ := json.Marshal(dst.AppConfigItemBooleanBulkUpdate)
		if string(jsonAppConfigItemBooleanBulkUpdate) == "{}" { // empty struct
			dst.AppConfigItemBooleanBulkUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemBooleanBulkUpdate = nil
	}

	// try to unmarshal data into AppConfigItemDateBulkUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemDateBulkUpdate)
	if err == nil {
		jsonAppConfigItemDateBulkUpdate, _ := json.Marshal(dst.AppConfigItemDateBulkUpdate)
		if string(jsonAppConfigItemDateBulkUpdate) == "{}" { // empty struct
			dst.AppConfigItemDateBulkUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemDateBulkUpdate = nil
	}

	// try to unmarshal data into AppConfigItemDatetimeBulkUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemDatetimeBulkUpdate)
	if err == nil {
		jsonAppConfigItemDatetimeBulkUpdate, _ := json.Marshal(dst.AppConfigItemDatetimeBulkUpdate)
		if string(jsonAppConfigItemDatetimeBulkUpdate) == "{}" { // empty struct
			dst.AppConfigItemDatetimeBulkUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemDatetimeBulkUpdate = nil
	}

	// try to unmarshal data into AppConfigItemFloatBulkUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemFloatBulkUpdate)
	if err == nil {
		jsonAppConfigItemFloatBulkUpdate, _ := json.Marshal(dst.AppConfigItemFloatBulkUpdate)
		if string(jsonAppConfigItemFloatBulkUpdate) == "{}" { // empty struct
			dst.AppConfigItemFloatBulkUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemFloatBulkUpdate = nil
	}

	// try to unmarshal data into AppConfigItemGenericBulkUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemGenericBulkUpdate)
	if err == nil {
		jsonAppConfigItemGenericBulkUpdate, _ := json.Marshal(dst.AppConfigItemGenericBulkUpdate)
		if string(jsonAppConfigItemGenericBulkUpdate) == "{}" { // empty struct
			dst.AppConfigItemGenericBulkUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemGenericBulkUpdate = nil
	}

	// try to unmarshal data into AppConfigItemIntegerBulkUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemIntegerBulkUpdate)
	if err == nil {
		jsonAppConfigItemIntegerBulkUpdate, _ := json.Marshal(dst.AppConfigItemIntegerBulkUpdate)
		if string(jsonAppConfigItemIntegerBulkUpdate) == "{}" { // empty struct
			dst.AppConfigItemIntegerBulkUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemIntegerBulkUpdate = nil
	}

	// try to unmarshal data into AppConfigItemJsonBulkUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemJsonBulkUpdate)
	if err == nil {
		jsonAppConfigItemJsonBulkUpdate, _ := json.Marshal(dst.AppConfigItemJsonBulkUpdate)
		if string(jsonAppConfigItemJsonBulkUpdate) == "{}" { // empty struct
			dst.AppConfigItemJsonBulkUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemJsonBulkUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AppConfigItemBooleanBulkUpdate = nil
		dst.AppConfigItemDateBulkUpdate = nil
		dst.AppConfigItemDatetimeBulkUpdate = nil
		dst.AppConfigItemFloatBulkUpdate = nil
		dst.AppConfigItemGenericBulkUpdate = nil
		dst.AppConfigItemIntegerBulkUpdate = nil
		dst.AppConfigItemJsonBulkUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AppConfigItemBulkUpdate)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AppConfigItemBulkUpdate)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AppConfigItemBulkUpdate) MarshalJSON() ([]byte, error) {
	if src.AppConfigItemBooleanBulkUpdate != nil {
		return json.Marshal(&src.AppConfigItemBooleanBulkUpdate)
	}

	if src.AppConfigItemDateBulkUpdate != nil {
		return json.Marshal(&src.AppConfigItemDateBulkUpdate)
	}

	if src.AppConfigItemDatetimeBulkUpdate != nil {
		return json.Marshal(&src.AppConfigItemDatetimeBulkUpdate)
	}

	if src.AppConfigItemFloatBulkUpdate != nil {
		return json.Marshal(&src.AppConfigItemFloatBulkUpdate)
	}

	if src.AppConfigItemGenericBulkUpdate != nil {
		return json.Marshal(&src.AppConfigItemGenericBulkUpdate)
	}

	if src.AppConfigItemIntegerBulkUpdate != nil {
		return json.Marshal(&src.AppConfigItemIntegerBulkUpdate)
	}

	if src.AppConfigItemJsonBulkUpdate != nil {
		return json.Marshal(&src.AppConfigItemJsonBulkUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AppConfigItemBulkUpdate) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AppConfigItemBooleanBulkUpdate != nil {
		return obj.AppConfigItemBooleanBulkUpdate
	}

	if obj.AppConfigItemDateBulkUpdate != nil {
		return obj.AppConfigItemDateBulkUpdate
	}

	if obj.AppConfigItemDatetimeBulkUpdate != nil {
		return obj.AppConfigItemDatetimeBulkUpdate
	}

	if obj.AppConfigItemFloatBulkUpdate != nil {
		return obj.AppConfigItemFloatBulkUpdate
	}

	if obj.AppConfigItemGenericBulkUpdate != nil {
		return obj.AppConfigItemGenericBulkUpdate
	}

	if obj.AppConfigItemIntegerBulkUpdate != nil {
		return obj.AppConfigItemIntegerBulkUpdate
	}

	if obj.AppConfigItemJsonBulkUpdate != nil {
		return obj.AppConfigItemJsonBulkUpdate
	}

	// all schemas are nil
	return nil
}

type NullableAppConfigItemBulkUpdate struct {
	value *AppConfigItemBulkUpdate
	isSet bool
}

func (v NullableAppConfigItemBulkUpdate) Get() *AppConfigItemBulkUpdate {
	return v.value
}

func (v *NullableAppConfigItemBulkUpdate) Set(val *AppConfigItemBulkUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAppConfigItemBulkUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAppConfigItemBulkUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppConfigItemBulkUpdate(val *AppConfigItemBulkUpdate) *NullableAppConfigItemBulkUpdate {
	return &NullableAppConfigItemBulkUpdate{value: val, isSet: true}
}

func (v NullableAppConfigItemBulkUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppConfigItemBulkUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


