/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntriesUnarchive struct for EntriesUnarchive
type EntriesUnarchive struct {
	// Array of entry IDs
	EntryIds []string `json:"entryIds"`
}

// NewEntriesUnarchive instantiates a new EntriesUnarchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntriesUnarchive(entryIds []string) *EntriesUnarchive {
	this := EntriesUnarchive{}
	this.EntryIds = entryIds
	return &this
}

// NewEntriesUnarchiveWithDefaults instantiates a new EntriesUnarchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntriesUnarchiveWithDefaults() *EntriesUnarchive {
	this := EntriesUnarchive{}
	return &this
}

// GetEntryIds returns the EntryIds field value
func (o *EntriesUnarchive) GetEntryIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EntryIds
}

// GetEntryIdsOk returns a tuple with the EntryIds field value
// and a boolean to check if the value has been set.
func (o *EntriesUnarchive) GetEntryIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.EntryIds, true
}

// SetEntryIds sets field value
func (o *EntriesUnarchive) SetEntryIds(v []string) {
	o.EntryIds = v
}

func (o EntriesUnarchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entryIds"] = o.EntryIds
	}
	return json.Marshal(toSerialize)
}

type NullableEntriesUnarchive struct {
	value *EntriesUnarchive
	isSet bool
}

func (v NullableEntriesUnarchive) Get() *EntriesUnarchive {
	return v.value
}

func (v *NullableEntriesUnarchive) Set(val *EntriesUnarchive) {
	v.value = val
	v.isSet = true
}

func (v NullableEntriesUnarchive) IsSet() bool {
	return v.isSet
}

func (v *NullableEntriesUnarchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntriesUnarchive(val *EntriesUnarchive) *NullableEntriesUnarchive {
	return &NullableEntriesUnarchive{value: val, isSet: true}
}

func (v NullableEntriesUnarchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntriesUnarchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


