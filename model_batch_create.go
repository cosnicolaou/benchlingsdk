/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BatchCreate struct for BatchCreate
type BatchCreate struct {
	DefaultConcentration *DefaultConcentrationSummary `json:"defaultConcentration,omitempty"`
	// API identifier for the entity that the batch will be added to.
	EntityId *string `json:"entityId,omitempty"`
	Fields *map[string]Field `json:"fields,omitempty"`
}

// NewBatchCreate instantiates a new BatchCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchCreate() *BatchCreate {
	this := BatchCreate{}
	return &this
}

// NewBatchCreateWithDefaults instantiates a new BatchCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchCreateWithDefaults() *BatchCreate {
	this := BatchCreate{}
	return &this
}

// GetDefaultConcentration returns the DefaultConcentration field value if set, zero value otherwise.
func (o *BatchCreate) GetDefaultConcentration() DefaultConcentrationSummary {
	if o == nil || isNil(o.DefaultConcentration) {
		var ret DefaultConcentrationSummary
		return ret
	}
	return *o.DefaultConcentration
}

// GetDefaultConcentrationOk returns a tuple with the DefaultConcentration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchCreate) GetDefaultConcentrationOk() (*DefaultConcentrationSummary, bool) {
	if o == nil || isNil(o.DefaultConcentration) {
    return nil, false
	}
	return o.DefaultConcentration, true
}

// HasDefaultConcentration returns a boolean if a field has been set.
func (o *BatchCreate) HasDefaultConcentration() bool {
	if o != nil && !isNil(o.DefaultConcentration) {
		return true
	}

	return false
}

// SetDefaultConcentration gets a reference to the given DefaultConcentrationSummary and assigns it to the DefaultConcentration field.
func (o *BatchCreate) SetDefaultConcentration(v DefaultConcentrationSummary) {
	o.DefaultConcentration = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *BatchCreate) GetEntityId() string {
	if o == nil || isNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchCreate) GetEntityIdOk() (*string, bool) {
	if o == nil || isNil(o.EntityId) {
    return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *BatchCreate) HasEntityId() bool {
	if o != nil && !isNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *BatchCreate) SetEntityId(v string) {
	o.EntityId = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *BatchCreate) GetFields() map[string]Field {
	if o == nil || isNil(o.Fields) {
		var ret map[string]Field
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchCreate) GetFieldsOk() (*map[string]Field, bool) {
	if o == nil || isNil(o.Fields) {
    return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *BatchCreate) HasFields() bool {
	if o != nil && !isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]Field and assigns it to the Fields field.
func (o *BatchCreate) SetFields(v map[string]Field) {
	o.Fields = &v
}

func (o BatchCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DefaultConcentration) {
		toSerialize["defaultConcentration"] = o.DefaultConcentration
	}
	if !isNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !isNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}

type NullableBatchCreate struct {
	value *BatchCreate
	isSet bool
}

func (v NullableBatchCreate) Get() *BatchCreate {
	return v.value
}

func (v *NullableBatchCreate) Set(val *BatchCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchCreate(val *BatchCreate) *NullableBatchCreate {
	return &NullableBatchCreate{value: val, isSet: true}
}

func (v NullableBatchCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


