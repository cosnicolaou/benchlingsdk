/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// NucleotideAlignmentBaseFilesInner - struct for NucleotideAlignmentBaseFilesInner
type NucleotideAlignmentBaseFilesInner struct {
	DnaAlignmentBaseFilesInnerOneOf *DnaAlignmentBaseFilesInnerOneOf
	NucleotideAlignmentFile *NucleotideAlignmentFile
}

// DnaAlignmentBaseFilesInnerOneOfAsNucleotideAlignmentBaseFilesInner is a convenience function that returns DnaAlignmentBaseFilesInnerOneOf wrapped in NucleotideAlignmentBaseFilesInner
func DnaAlignmentBaseFilesInnerOneOfAsNucleotideAlignmentBaseFilesInner(v *DnaAlignmentBaseFilesInnerOneOf) NucleotideAlignmentBaseFilesInner {
	return NucleotideAlignmentBaseFilesInner{
		DnaAlignmentBaseFilesInnerOneOf: v,
	}
}

// NucleotideAlignmentFileAsNucleotideAlignmentBaseFilesInner is a convenience function that returns NucleotideAlignmentFile wrapped in NucleotideAlignmentBaseFilesInner
func NucleotideAlignmentFileAsNucleotideAlignmentBaseFilesInner(v *NucleotideAlignmentFile) NucleotideAlignmentBaseFilesInner {
	return NucleotideAlignmentBaseFilesInner{
		NucleotideAlignmentFile: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *NucleotideAlignmentBaseFilesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DnaAlignmentBaseFilesInnerOneOf
	err = newStrictDecoder(data).Decode(&dst.DnaAlignmentBaseFilesInnerOneOf)
	if err == nil {
		jsonDnaAlignmentBaseFilesInnerOneOf, _ := json.Marshal(dst.DnaAlignmentBaseFilesInnerOneOf)
		if string(jsonDnaAlignmentBaseFilesInnerOneOf) == "{}" { // empty struct
			dst.DnaAlignmentBaseFilesInnerOneOf = nil
		} else {
			match++
		}
	} else {
		dst.DnaAlignmentBaseFilesInnerOneOf = nil
	}

	// try to unmarshal data into NucleotideAlignmentFile
	err = newStrictDecoder(data).Decode(&dst.NucleotideAlignmentFile)
	if err == nil {
		jsonNucleotideAlignmentFile, _ := json.Marshal(dst.NucleotideAlignmentFile)
		if string(jsonNucleotideAlignmentFile) == "{}" { // empty struct
			dst.NucleotideAlignmentFile = nil
		} else {
			match++
		}
	} else {
		dst.NucleotideAlignmentFile = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DnaAlignmentBaseFilesInnerOneOf = nil
		dst.NucleotideAlignmentFile = nil

		return fmt.Errorf("data matches more than one schema in oneOf(NucleotideAlignmentBaseFilesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(NucleotideAlignmentBaseFilesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NucleotideAlignmentBaseFilesInner) MarshalJSON() ([]byte, error) {
	if src.DnaAlignmentBaseFilesInnerOneOf != nil {
		return json.Marshal(&src.DnaAlignmentBaseFilesInnerOneOf)
	}

	if src.NucleotideAlignmentFile != nil {
		return json.Marshal(&src.NucleotideAlignmentFile)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NucleotideAlignmentBaseFilesInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DnaAlignmentBaseFilesInnerOneOf != nil {
		return obj.DnaAlignmentBaseFilesInnerOneOf
	}

	if obj.NucleotideAlignmentFile != nil {
		return obj.NucleotideAlignmentFile
	}

	// all schemas are nil
	return nil
}

type NullableNucleotideAlignmentBaseFilesInner struct {
	value *NucleotideAlignmentBaseFilesInner
	isSet bool
}

func (v NullableNucleotideAlignmentBaseFilesInner) Get() *NucleotideAlignmentBaseFilesInner {
	return v.value
}

func (v *NullableNucleotideAlignmentBaseFilesInner) Set(val *NucleotideAlignmentBaseFilesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableNucleotideAlignmentBaseFilesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableNucleotideAlignmentBaseFilesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNucleotideAlignmentBaseFilesInner(val *NucleotideAlignmentBaseFilesInner) *NullableNucleotideAlignmentBaseFilesInner {
	return &NullableNucleotideAlignmentBaseFilesInner{value: val, isSet: true}
}

func (v NullableNucleotideAlignmentBaseFilesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNucleotideAlignmentBaseFilesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


