/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BenchlingAppsArchivalChange IDs of all items that were archived or unarchived, grouped by resource type. This includes the IDs of apps that were archived / unarchived. 
type BenchlingAppsArchivalChange struct {
	AppIds []string `json:"appIds,omitempty"`
}

// NewBenchlingAppsArchivalChange instantiates a new BenchlingAppsArchivalChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBenchlingAppsArchivalChange() *BenchlingAppsArchivalChange {
	this := BenchlingAppsArchivalChange{}
	return &this
}

// NewBenchlingAppsArchivalChangeWithDefaults instantiates a new BenchlingAppsArchivalChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBenchlingAppsArchivalChangeWithDefaults() *BenchlingAppsArchivalChange {
	this := BenchlingAppsArchivalChange{}
	return &this
}

// GetAppIds returns the AppIds field value if set, zero value otherwise.
func (o *BenchlingAppsArchivalChange) GetAppIds() []string {
	if o == nil || isNil(o.AppIds) {
		var ret []string
		return ret
	}
	return o.AppIds
}

// GetAppIdsOk returns a tuple with the AppIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchlingAppsArchivalChange) GetAppIdsOk() ([]string, bool) {
	if o == nil || isNil(o.AppIds) {
    return nil, false
	}
	return o.AppIds, true
}

// HasAppIds returns a boolean if a field has been set.
func (o *BenchlingAppsArchivalChange) HasAppIds() bool {
	if o != nil && !isNil(o.AppIds) {
		return true
	}

	return false
}

// SetAppIds gets a reference to the given []string and assigns it to the AppIds field.
func (o *BenchlingAppsArchivalChange) SetAppIds(v []string) {
	o.AppIds = v
}

func (o BenchlingAppsArchivalChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AppIds) {
		toSerialize["appIds"] = o.AppIds
	}
	return json.Marshal(toSerialize)
}

type NullableBenchlingAppsArchivalChange struct {
	value *BenchlingAppsArchivalChange
	isSet bool
}

func (v NullableBenchlingAppsArchivalChange) Get() *BenchlingAppsArchivalChange {
	return v.value
}

func (v *NullableBenchlingAppsArchivalChange) Set(val *BenchlingAppsArchivalChange) {
	v.value = val
	v.isSet = true
}

func (v NullableBenchlingAppsArchivalChange) IsSet() bool {
	return v.isSet
}

func (v *NullableBenchlingAppsArchivalChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenchlingAppsArchivalChange(val *BenchlingAppsArchivalChange) *NullableBenchlingAppsArchivalChange {
	return &NullableBenchlingAppsArchivalChange{value: val, isSet: true}
}

func (v NullableBenchlingAppsArchivalChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenchlingAppsArchivalChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


