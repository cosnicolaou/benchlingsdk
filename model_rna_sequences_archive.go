/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// RnaSequencesArchive The request body for archiving RNA sequences. 
type RnaSequencesArchive struct {
	Reason EntityArchiveReason `json:"reason"`
	RnaSequenceIds []string `json:"rnaSequenceIds"`
}

// NewRnaSequencesArchive instantiates a new RnaSequencesArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRnaSequencesArchive(reason EntityArchiveReason, rnaSequenceIds []string) *RnaSequencesArchive {
	this := RnaSequencesArchive{}
	this.Reason = reason
	this.RnaSequenceIds = rnaSequenceIds
	return &this
}

// NewRnaSequencesArchiveWithDefaults instantiates a new RnaSequencesArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRnaSequencesArchiveWithDefaults() *RnaSequencesArchive {
	this := RnaSequencesArchive{}
	return &this
}

// GetReason returns the Reason field value
func (o *RnaSequencesArchive) GetReason() EntityArchiveReason {
	if o == nil {
		var ret EntityArchiveReason
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *RnaSequencesArchive) GetReasonOk() (*EntityArchiveReason, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *RnaSequencesArchive) SetReason(v EntityArchiveReason) {
	o.Reason = v
}

// GetRnaSequenceIds returns the RnaSequenceIds field value
func (o *RnaSequencesArchive) GetRnaSequenceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RnaSequenceIds
}

// GetRnaSequenceIdsOk returns a tuple with the RnaSequenceIds field value
// and a boolean to check if the value has been set.
func (o *RnaSequencesArchive) GetRnaSequenceIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.RnaSequenceIds, true
}

// SetRnaSequenceIds sets field value
func (o *RnaSequencesArchive) SetRnaSequenceIds(v []string) {
	o.RnaSequenceIds = v
}

func (o RnaSequencesArchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["rnaSequenceIds"] = o.RnaSequenceIds
	}
	return json.Marshal(toSerialize)
}

type NullableRnaSequencesArchive struct {
	value *RnaSequencesArchive
	isSet bool
}

func (v NullableRnaSequencesArchive) Get() *RnaSequencesArchive {
	return v.value
}

func (v *NullableRnaSequencesArchive) Set(val *RnaSequencesArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableRnaSequencesArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableRnaSequencesArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRnaSequencesArchive(val *RnaSequencesArchive) *NullableRnaSequencesArchive {
	return &NullableRnaSequencesArchive{value: val, isSet: true}
}

func (v NullableRnaSequencesArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRnaSequencesArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


