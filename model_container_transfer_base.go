/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ContainerTransferBase struct for ContainerTransferBase
type ContainerTransferBase struct {
	// ID of the batch that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
	SourceBatchId *string `json:"sourceBatchId,omitempty"`
	// ID of the container that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
	SourceContainerId *string `json:"sourceContainerId,omitempty"`
	// ID of the entity that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
	SourceEntityId *string `json:"sourceEntityId,omitempty"`
	TransferQuantity *ContainerTransferBaseTransferQuantity `json:"transferQuantity,omitempty"`
	TransferVolume *ContainerTransferBaseTransferVolume `json:"transferVolume,omitempty"`
}

// NewContainerTransferBase instantiates a new ContainerTransferBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerTransferBase() *ContainerTransferBase {
	this := ContainerTransferBase{}
	return &this
}

// NewContainerTransferBaseWithDefaults instantiates a new ContainerTransferBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerTransferBaseWithDefaults() *ContainerTransferBase {
	this := ContainerTransferBase{}
	return &this
}

// GetSourceBatchId returns the SourceBatchId field value if set, zero value otherwise.
func (o *ContainerTransferBase) GetSourceBatchId() string {
	if o == nil || isNil(o.SourceBatchId) {
		var ret string
		return ret
	}
	return *o.SourceBatchId
}

// GetSourceBatchIdOk returns a tuple with the SourceBatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerTransferBase) GetSourceBatchIdOk() (*string, bool) {
	if o == nil || isNil(o.SourceBatchId) {
    return nil, false
	}
	return o.SourceBatchId, true
}

// HasSourceBatchId returns a boolean if a field has been set.
func (o *ContainerTransferBase) HasSourceBatchId() bool {
	if o != nil && !isNil(o.SourceBatchId) {
		return true
	}

	return false
}

// SetSourceBatchId gets a reference to the given string and assigns it to the SourceBatchId field.
func (o *ContainerTransferBase) SetSourceBatchId(v string) {
	o.SourceBatchId = &v
}

// GetSourceContainerId returns the SourceContainerId field value if set, zero value otherwise.
func (o *ContainerTransferBase) GetSourceContainerId() string {
	if o == nil || isNil(o.SourceContainerId) {
		var ret string
		return ret
	}
	return *o.SourceContainerId
}

// GetSourceContainerIdOk returns a tuple with the SourceContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerTransferBase) GetSourceContainerIdOk() (*string, bool) {
	if o == nil || isNil(o.SourceContainerId) {
    return nil, false
	}
	return o.SourceContainerId, true
}

// HasSourceContainerId returns a boolean if a field has been set.
func (o *ContainerTransferBase) HasSourceContainerId() bool {
	if o != nil && !isNil(o.SourceContainerId) {
		return true
	}

	return false
}

// SetSourceContainerId gets a reference to the given string and assigns it to the SourceContainerId field.
func (o *ContainerTransferBase) SetSourceContainerId(v string) {
	o.SourceContainerId = &v
}

// GetSourceEntityId returns the SourceEntityId field value if set, zero value otherwise.
func (o *ContainerTransferBase) GetSourceEntityId() string {
	if o == nil || isNil(o.SourceEntityId) {
		var ret string
		return ret
	}
	return *o.SourceEntityId
}

// GetSourceEntityIdOk returns a tuple with the SourceEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerTransferBase) GetSourceEntityIdOk() (*string, bool) {
	if o == nil || isNil(o.SourceEntityId) {
    return nil, false
	}
	return o.SourceEntityId, true
}

// HasSourceEntityId returns a boolean if a field has been set.
func (o *ContainerTransferBase) HasSourceEntityId() bool {
	if o != nil && !isNil(o.SourceEntityId) {
		return true
	}

	return false
}

// SetSourceEntityId gets a reference to the given string and assigns it to the SourceEntityId field.
func (o *ContainerTransferBase) SetSourceEntityId(v string) {
	o.SourceEntityId = &v
}

// GetTransferQuantity returns the TransferQuantity field value if set, zero value otherwise.
func (o *ContainerTransferBase) GetTransferQuantity() ContainerTransferBaseTransferQuantity {
	if o == nil || isNil(o.TransferQuantity) {
		var ret ContainerTransferBaseTransferQuantity
		return ret
	}
	return *o.TransferQuantity
}

// GetTransferQuantityOk returns a tuple with the TransferQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerTransferBase) GetTransferQuantityOk() (*ContainerTransferBaseTransferQuantity, bool) {
	if o == nil || isNil(o.TransferQuantity) {
    return nil, false
	}
	return o.TransferQuantity, true
}

// HasTransferQuantity returns a boolean if a field has been set.
func (o *ContainerTransferBase) HasTransferQuantity() bool {
	if o != nil && !isNil(o.TransferQuantity) {
		return true
	}

	return false
}

// SetTransferQuantity gets a reference to the given ContainerTransferBaseTransferQuantity and assigns it to the TransferQuantity field.
func (o *ContainerTransferBase) SetTransferQuantity(v ContainerTransferBaseTransferQuantity) {
	o.TransferQuantity = &v
}

// GetTransferVolume returns the TransferVolume field value if set, zero value otherwise.
func (o *ContainerTransferBase) GetTransferVolume() ContainerTransferBaseTransferVolume {
	if o == nil || isNil(o.TransferVolume) {
		var ret ContainerTransferBaseTransferVolume
		return ret
	}
	return *o.TransferVolume
}

// GetTransferVolumeOk returns a tuple with the TransferVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerTransferBase) GetTransferVolumeOk() (*ContainerTransferBaseTransferVolume, bool) {
	if o == nil || isNil(o.TransferVolume) {
    return nil, false
	}
	return o.TransferVolume, true
}

// HasTransferVolume returns a boolean if a field has been set.
func (o *ContainerTransferBase) HasTransferVolume() bool {
	if o != nil && !isNil(o.TransferVolume) {
		return true
	}

	return false
}

// SetTransferVolume gets a reference to the given ContainerTransferBaseTransferVolume and assigns it to the TransferVolume field.
func (o *ContainerTransferBase) SetTransferVolume(v ContainerTransferBaseTransferVolume) {
	o.TransferVolume = &v
}

func (o ContainerTransferBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SourceBatchId) {
		toSerialize["sourceBatchId"] = o.SourceBatchId
	}
	if !isNil(o.SourceContainerId) {
		toSerialize["sourceContainerId"] = o.SourceContainerId
	}
	if !isNil(o.SourceEntityId) {
		toSerialize["sourceEntityId"] = o.SourceEntityId
	}
	if !isNil(o.TransferQuantity) {
		toSerialize["transferQuantity"] = o.TransferQuantity
	}
	if !isNil(o.TransferVolume) {
		toSerialize["transferVolume"] = o.TransferVolume
	}
	return json.Marshal(toSerialize)
}

type NullableContainerTransferBase struct {
	value *ContainerTransferBase
	isSet bool
}

func (v NullableContainerTransferBase) Get() *ContainerTransferBase {
	return v.value
}

func (v *NullableContainerTransferBase) Set(val *ContainerTransferBase) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerTransferBase) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerTransferBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerTransferBase(val *ContainerTransferBase) *NullableContainerTransferBase {
	return &NullableContainerTransferBase{value: val, isSet: true}
}

func (v NullableContainerTransferBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerTransferBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


