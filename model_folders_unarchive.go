/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// FoldersUnarchive struct for FoldersUnarchive
type FoldersUnarchive struct {
	// A list of folder IDs to unarchive.
	FolderIds []string `json:"folderIds"`
}

// NewFoldersUnarchive instantiates a new FoldersUnarchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFoldersUnarchive(folderIds []string) *FoldersUnarchive {
	this := FoldersUnarchive{}
	this.FolderIds = folderIds
	return &this
}

// NewFoldersUnarchiveWithDefaults instantiates a new FoldersUnarchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFoldersUnarchiveWithDefaults() *FoldersUnarchive {
	this := FoldersUnarchive{}
	return &this
}

// GetFolderIds returns the FolderIds field value
func (o *FoldersUnarchive) GetFolderIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FolderIds
}

// GetFolderIdsOk returns a tuple with the FolderIds field value
// and a boolean to check if the value has been set.
func (o *FoldersUnarchive) GetFolderIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FolderIds, true
}

// SetFolderIds sets field value
func (o *FoldersUnarchive) SetFolderIds(v []string) {
	o.FolderIds = v
}

func (o FoldersUnarchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["folderIds"] = o.FolderIds
	}
	return json.Marshal(toSerialize)
}

type NullableFoldersUnarchive struct {
	value *FoldersUnarchive
	isSet bool
}

func (v NullableFoldersUnarchive) Get() *FoldersUnarchive {
	return v.value
}

func (v *NullableFoldersUnarchive) Set(val *FoldersUnarchive) {
	v.value = val
	v.isSet = true
}

func (v NullableFoldersUnarchive) IsSet() bool {
	return v.isSet
}

func (v *NullableFoldersUnarchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFoldersUnarchive(val *FoldersUnarchive) *NullableFoldersUnarchive {
	return &NullableFoldersUnarchive{value: val, isSet: true}
}

func (v NullableFoldersUnarchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFoldersUnarchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


