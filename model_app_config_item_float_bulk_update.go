/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AppConfigItemFloatBulkUpdate struct for AppConfigItemFloatBulkUpdate
type AppConfigItemFloatBulkUpdate struct {
	Type string `json:"type"`
	Value float32 `json:"value"`
	Id string `json:"id"`
}

// NewAppConfigItemFloatBulkUpdate instantiates a new AppConfigItemFloatBulkUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppConfigItemFloatBulkUpdate(type_ string, value float32, id string) *AppConfigItemFloatBulkUpdate {
	this := AppConfigItemFloatBulkUpdate{}
	this.Type = type_
	this.Value = value
	this.Id = id
	return &this
}

// NewAppConfigItemFloatBulkUpdateWithDefaults instantiates a new AppConfigItemFloatBulkUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppConfigItemFloatBulkUpdateWithDefaults() *AppConfigItemFloatBulkUpdate {
	this := AppConfigItemFloatBulkUpdate{}
	return &this
}

// GetType returns the Type field value
func (o *AppConfigItemFloatBulkUpdate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AppConfigItemFloatBulkUpdate) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AppConfigItemFloatBulkUpdate) SetType(v string) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *AppConfigItemFloatBulkUpdate) GetValue() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *AppConfigItemFloatBulkUpdate) GetValueOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *AppConfigItemFloatBulkUpdate) SetValue(v float32) {
	o.Value = v
}

// GetId returns the Id field value
func (o *AppConfigItemFloatBulkUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppConfigItemFloatBulkUpdate) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppConfigItemFloatBulkUpdate) SetId(v string) {
	o.Id = v
}

func (o AppConfigItemFloatBulkUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableAppConfigItemFloatBulkUpdate struct {
	value *AppConfigItemFloatBulkUpdate
	isSet bool
}

func (v NullableAppConfigItemFloatBulkUpdate) Get() *AppConfigItemFloatBulkUpdate {
	return v.value
}

func (v *NullableAppConfigItemFloatBulkUpdate) Set(val *AppConfigItemFloatBulkUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAppConfigItemFloatBulkUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAppConfigItemFloatBulkUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppConfigItemFloatBulkUpdate(val *AppConfigItemFloatBulkUpdate) *NullableAppConfigItemFloatBulkUpdate {
	return &NullableAppConfigItemFloatBulkUpdate{value: val, isSet: true}
}

func (v NullableAppConfigItemFloatBulkUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppConfigItemFloatBulkUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


