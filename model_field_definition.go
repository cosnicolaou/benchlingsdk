/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// FieldDefinition struct for FieldDefinition
type FieldDefinition struct {
	ArchiveRecord NullableAaSequenceArchiveRecord `json:"archiveRecord,omitempty"`
	Id *string `json:"id,omitempty"`
	IsMulti *bool `json:"isMulti,omitempty"`
	IsRequired *bool `json:"isRequired,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *FieldType `json:"type,omitempty"`
}

// NewFieldDefinition instantiates a new FieldDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldDefinition() *FieldDefinition {
	this := FieldDefinition{}
	return &this
}

// NewFieldDefinitionWithDefaults instantiates a new FieldDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldDefinitionWithDefaults() *FieldDefinition {
	this := FieldDefinition{}
	return &this
}

// GetArchiveRecord returns the ArchiveRecord field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FieldDefinition) GetArchiveRecord() AaSequenceArchiveRecord {
	if o == nil || isNil(o.ArchiveRecord.Get()) {
		var ret AaSequenceArchiveRecord
		return ret
	}
	return *o.ArchiveRecord.Get()
}

// GetArchiveRecordOk returns a tuple with the ArchiveRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FieldDefinition) GetArchiveRecordOk() (*AaSequenceArchiveRecord, bool) {
	if o == nil {
    return nil, false
	}
	return o.ArchiveRecord.Get(), o.ArchiveRecord.IsSet()
}

// HasArchiveRecord returns a boolean if a field has been set.
func (o *FieldDefinition) HasArchiveRecord() bool {
	if o != nil && o.ArchiveRecord.IsSet() {
		return true
	}

	return false
}

// SetArchiveRecord gets a reference to the given NullableAaSequenceArchiveRecord and assigns it to the ArchiveRecord field.
func (o *FieldDefinition) SetArchiveRecord(v AaSequenceArchiveRecord) {
	o.ArchiveRecord.Set(&v)
}
// SetArchiveRecordNil sets the value for ArchiveRecord to be an explicit nil
func (o *FieldDefinition) SetArchiveRecordNil() {
	o.ArchiveRecord.Set(nil)
}

// UnsetArchiveRecord ensures that no value is present for ArchiveRecord, not even an explicit nil
func (o *FieldDefinition) UnsetArchiveRecord() {
	o.ArchiveRecord.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FieldDefinition) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDefinition) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FieldDefinition) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FieldDefinition) SetId(v string) {
	o.Id = &v
}

// GetIsMulti returns the IsMulti field value if set, zero value otherwise.
func (o *FieldDefinition) GetIsMulti() bool {
	if o == nil || isNil(o.IsMulti) {
		var ret bool
		return ret
	}
	return *o.IsMulti
}

// GetIsMultiOk returns a tuple with the IsMulti field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDefinition) GetIsMultiOk() (*bool, bool) {
	if o == nil || isNil(o.IsMulti) {
    return nil, false
	}
	return o.IsMulti, true
}

// HasIsMulti returns a boolean if a field has been set.
func (o *FieldDefinition) HasIsMulti() bool {
	if o != nil && !isNil(o.IsMulti) {
		return true
	}

	return false
}

// SetIsMulti gets a reference to the given bool and assigns it to the IsMulti field.
func (o *FieldDefinition) SetIsMulti(v bool) {
	o.IsMulti = &v
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *FieldDefinition) GetIsRequired() bool {
	if o == nil || isNil(o.IsRequired) {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDefinition) GetIsRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.IsRequired) {
    return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *FieldDefinition) HasIsRequired() bool {
	if o != nil && !isNil(o.IsRequired) {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *FieldDefinition) SetIsRequired(v bool) {
	o.IsRequired = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FieldDefinition) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDefinition) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FieldDefinition) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FieldDefinition) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FieldDefinition) GetType() FieldType {
	if o == nil || isNil(o.Type) {
		var ret FieldType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldDefinition) GetTypeOk() (*FieldType, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FieldDefinition) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given FieldType and assigns it to the Type field.
func (o *FieldDefinition) SetType(v FieldType) {
	o.Type = &v
}

func (o FieldDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveRecord.IsSet() {
		toSerialize["archiveRecord"] = o.ArchiveRecord.Get()
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.IsMulti) {
		toSerialize["isMulti"] = o.IsMulti
	}
	if !isNil(o.IsRequired) {
		toSerialize["isRequired"] = o.IsRequired
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableFieldDefinition struct {
	value *FieldDefinition
	isSet bool
}

func (v NullableFieldDefinition) Get() *FieldDefinition {
	return v.value
}

func (v *NullableFieldDefinition) Set(val *FieldDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldDefinition(val *FieldDefinition) *NullableFieldDefinition {
	return &NullableFieldDefinition{value: val, isSet: true}
}

func (v NullableFieldDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


