/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// RNAOligosApiService RNAOligosApi service
type RNAOligosApiService service

type ApiArchiveRNAOligosRequest struct {
	ctx context.Context
	ApiService *RNAOligosApiService
	rnaOligosArchive *RnaOligosArchive
}

func (r ApiArchiveRNAOligosRequest) RnaOligosArchive(rnaOligosArchive RnaOligosArchive) ApiArchiveRNAOligosRequest {
	r.rnaOligosArchive = &rnaOligosArchive
	return r
}

func (r ApiArchiveRNAOligosRequest) Execute() (*RnaOligosArchivalChange, *http.Response, error) {
	return r.ApiService.ArchiveRNAOligosExecute(r)
}

/*
ArchiveRNAOligos Archive RNA Oligos

Archive RNA Oligos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiArchiveRNAOligosRequest
*/
func (a *RNAOligosApiService) ArchiveRNAOligos(ctx context.Context) ApiArchiveRNAOligosRequest {
	return ApiArchiveRNAOligosRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RnaOligosArchivalChange
func (a *RNAOligosApiService) ArchiveRNAOligosExecute(r ApiArchiveRNAOligosRequest) (*RnaOligosArchivalChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaOligosArchivalChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNAOligosApiService.ArchiveRNAOligos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-oligos:archive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaOligosArchive
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkCreateRNAOligosRequest struct {
	ctx context.Context
	ApiService *RNAOligosApiService
	rnaOligosBulkCreateRequest *RnaOligosBulkCreateRequest
}

func (r ApiBulkCreateRNAOligosRequest) RnaOligosBulkCreateRequest(rnaOligosBulkCreateRequest RnaOligosBulkCreateRequest) ApiBulkCreateRNAOligosRequest {
	r.rnaOligosBulkCreateRequest = &rnaOligosBulkCreateRequest
	return r
}

func (r ApiBulkCreateRNAOligosRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.BulkCreateRNAOligosExecute(r)
}

/*
BulkCreateRNAOligos Bulk Create RNA Oligos

Bulk Create RNA Oligos. Limit of 1000 RNA Oligos per request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkCreateRNAOligosRequest
*/
func (a *RNAOligosApiService) BulkCreateRNAOligos(ctx context.Context) ApiBulkCreateRNAOligosRequest {
	return ApiBulkCreateRNAOligosRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *RNAOligosApiService) BulkCreateRNAOligosExecute(r ApiBulkCreateRNAOligosRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNAOligosApiService.BulkCreateRNAOligos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-oligos:bulk-create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaOligosBulkCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkUpdateRNAOligosRequest struct {
	ctx context.Context
	ApiService *RNAOligosApiService
	rnaOligosBulkUpdateRequest *RnaOligosBulkUpdateRequest
}

func (r ApiBulkUpdateRNAOligosRequest) RnaOligosBulkUpdateRequest(rnaOligosBulkUpdateRequest RnaOligosBulkUpdateRequest) ApiBulkUpdateRNAOligosRequest {
	r.rnaOligosBulkUpdateRequest = &rnaOligosBulkUpdateRequest
	return r
}

func (r ApiBulkUpdateRNAOligosRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.BulkUpdateRNAOligosExecute(r)
}

/*
BulkUpdateRNAOligos Bulk Update RNA Oligos

Bulk Update RNA Oligos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkUpdateRNAOligosRequest
*/
func (a *RNAOligosApiService) BulkUpdateRNAOligos(ctx context.Context) ApiBulkUpdateRNAOligosRequest {
	return ApiBulkUpdateRNAOligosRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *RNAOligosApiService) BulkUpdateRNAOligosExecute(r ApiBulkUpdateRNAOligosRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNAOligosApiService.BulkUpdateRNAOligos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-oligos:bulk-update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaOligosBulkUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRNAOligoRequest struct {
	ctx context.Context
	ApiService *RNAOligosApiService
	rnaOligoCreate *RnaOligoCreate
}

func (r ApiCreateRNAOligoRequest) RnaOligoCreate(rnaOligoCreate RnaOligoCreate) ApiCreateRNAOligoRequest {
	r.rnaOligoCreate = &rnaOligoCreate
	return r
}

func (r ApiCreateRNAOligoRequest) Execute() (*RnaOligo, *http.Response, error) {
	return r.ApiService.CreateRNAOligoExecute(r)
}

/*
CreateRNAOligo Create an RNA Oligo

Create an RNA Oligo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRNAOligoRequest
*/
func (a *RNAOligosApiService) CreateRNAOligo(ctx context.Context) ApiCreateRNAOligoRequest {
	return ApiCreateRNAOligoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RnaOligo
func (a *RNAOligosApiService) CreateRNAOligoExecute(r ApiCreateRNAOligoRequest) (*RnaOligo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaOligo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNAOligosApiService.CreateRNAOligo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-oligos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaOligoCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRNAOligoRequest struct {
	ctx context.Context
	ApiService *RNAOligosApiService
	oligoId string
}

func (r ApiGetRNAOligoRequest) Execute() (*RnaOligo, *http.Response, error) {
	return r.ApiService.GetRNAOligoExecute(r)
}

/*
GetRNAOligo Get an RNA Oligo

Get an RNA Oligo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param oligoId
 @return ApiGetRNAOligoRequest
*/
func (a *RNAOligosApiService) GetRNAOligo(ctx context.Context, oligoId string) ApiGetRNAOligoRequest {
	return ApiGetRNAOligoRequest{
		ApiService: a,
		ctx: ctx,
		oligoId: oligoId,
	}
}

// Execute executes the request
//  @return RnaOligo
func (a *RNAOligosApiService) GetRNAOligoExecute(r ApiGetRNAOligoRequest) (*RnaOligo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaOligo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNAOligosApiService.GetRNAOligo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-oligos/{oligo_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"oligo_id"+"}", url.PathEscape(parameterToString(r.oligoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRNAOligosRequest struct {
	ctx context.Context
	ApiService *RNAOligosApiService
	pageSize *int32
	nextToken *string
	sort *string
	modifiedAt *string
	name *string
	nameIncludes *string
	bases *string
	folderId *string
	mentionedIn *string
	projectId *string
	registryId *string
	schemaId *string
	schemaFields *map[string]interface{}
	archiveReason *string
	mentions *string
	ids *string
	entityRegistryIdsAnyOf *string
	namesAnyOf *string
	namesAnyOfCaseSensitive *string
	creatorIds *string
	authorIdsAnyOf *string
}

// Number of results to return. Defaults to 50, maximum of 100. 
func (r ApiListRNAOligosRequest) PageSize(pageSize int32) ApiListRNAOligosRequest {
	r.pageSize = &pageSize
	return r
}

// Token for pagination
func (r ApiListRNAOligosRequest) NextToken(nextToken string) ApiListRNAOligosRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiListRNAOligosRequest) Sort(sort string) ApiListRNAOligosRequest {
	r.sort = &sort
	return r
}

// Datetime, in RFC 3339 format. Supports the &gt; and &lt; operators. Time zone defaults to UTC. Restricts results to those modified in the specified range. e.g. &gt; 2017-04-30. 
func (r ApiListRNAOligosRequest) ModifiedAt(modifiedAt string) ApiListRNAOligosRequest {
	r.modifiedAt = &modifiedAt
	return r
}

// Name of an RNA Oligo. Restricts results to those with the specified name, alias, or entity registry ID.
func (r ApiListRNAOligosRequest) Name(name string) ApiListRNAOligosRequest {
	r.name = &name
	return r
}

// Name substring of an RNA Oligo. Restricts results to those with names, aliases, or entity registry IDs that include the provided substring.
func (r ApiListRNAOligosRequest) NameIncludes(nameIncludes string) ApiListRNAOligosRequest {
	r.nameIncludes = &nameIncludes
	return r
}

// Full bases of the RNA Oligo. Restricts results to those with the specified bases, case-insensitive, allowing for circular or reverse complement matches. Does not allow partial matching or loose matching via degenerate bases. 
func (r ApiListRNAOligosRequest) Bases(bases string) ApiListRNAOligosRequest {
	r.bases = &bases
	return r
}

// ID of a folder. Restricts results to those in the folder.
func (r ApiListRNAOligosRequest) FolderId(folderId string) ApiListRNAOligosRequest {
	r.folderId = &folderId
	return r
}

// Comma-separated list of entry IDs. Restricts results to RNA Oligos mentioned in those entries. 
func (r ApiListRNAOligosRequest) MentionedIn(mentionedIn string) ApiListRNAOligosRequest {
	r.mentionedIn = &mentionedIn
	return r
}

// ID of a project. Restricts results to those in the project.
func (r ApiListRNAOligosRequest) ProjectId(projectId string) ApiListRNAOligosRequest {
	r.projectId = &projectId
	return r
}

// ID of a registry. Restricts results to those registered in this registry. Specifying \&quot;null\&quot; returns unregistered items. 
func (r ApiListRNAOligosRequest) RegistryId(registryId string) ApiListRNAOligosRequest {
	r.registryId = &registryId
	return r
}

// ID of a schema. Restricts results to those of the specified schema. 
func (r ApiListRNAOligosRequest) SchemaId(schemaId string) ApiListRNAOligosRequest {
	r.schemaId = &schemaId
	return r
}

// Schema field value. For Integer, Float, and Date type fields, supports the &gt;&#x3D; and &lt;&#x3D; operators. If present, the schemaId param must also be present. Restricts results to those with a field of whose value matches the filter. 
func (r ApiListRNAOligosRequest) SchemaFields(schemaFields map[string]interface{}) ApiListRNAOligosRequest {
	r.schemaFields = &schemaFields
	return r
}

// Archive reason. Restricts items to those with the specified archive reason. Use \&quot;NOT_ARCHIVED\&quot; to filter for unarchived RNA Oligos. Use \&quot;ANY_ARCHIVED\&quot; to filter for archived RNA Oligos regardless of reason. Use \&quot;ANY_ARCHIVED_OR_NOT_ARCHIVED\&quot; to return items for both archived and unarchived. 
func (r ApiListRNAOligosRequest) ArchiveReason(archiveReason string) ApiListRNAOligosRequest {
	r.archiveReason = &archiveReason
	return r
}

// Comma-separated list of item IDs. Restricts results to those that mention the given items in the description. 
func (r ApiListRNAOligosRequest) Mentions(mentions string) ApiListRNAOligosRequest {
	r.mentions = &mentions
	return r
}

// Comma-separated list of ids. Matches all of the provided IDs, or returns a 400 error that includes a list of which IDs are invalid. 
func (r ApiListRNAOligosRequest) Ids(ids string) ApiListRNAOligosRequest {
	r.ids = &ids
	return r
}

// Comma-separated list of entity registry IDs. Restricts results to those that match any of the specified registry IDs. 
func (r ApiListRNAOligosRequest) EntityRegistryIdsAnyOf(entityRegistryIdsAnyOf string) ApiListRNAOligosRequest {
	r.entityRegistryIdsAnyOf = &entityRegistryIdsAnyOf
	return r
}

// Comma-separated list of names. Restricts results to those that match any of the specified names, aliases, or entity registry IDs, case insensitive.  Warning - this filter can be non-performant due to case insensitivity. 
func (r ApiListRNAOligosRequest) NamesAnyOf(namesAnyOf string) ApiListRNAOligosRequest {
	r.namesAnyOf = &namesAnyOf
	return r
}

// Comma-separated list of names. Restricts results to those that match any of the specified names, aliases, or entity registry IDs, case sensitive. 
func (r ApiListRNAOligosRequest) NamesAnyOfCaseSensitive(namesAnyOfCaseSensitive string) ApiListRNAOligosRequest {
	r.namesAnyOfCaseSensitive = &namesAnyOfCaseSensitive
	return r
}

// Comma separated list of users IDs
func (r ApiListRNAOligosRequest) CreatorIds(creatorIds string) ApiListRNAOligosRequest {
	r.creatorIds = &creatorIds
	return r
}

// Comma separated list of user or app IDs
func (r ApiListRNAOligosRequest) AuthorIdsAnyOf(authorIdsAnyOf string) ApiListRNAOligosRequest {
	r.authorIdsAnyOf = &authorIdsAnyOf
	return r
}

func (r ApiListRNAOligosRequest) Execute() (*RnaOligosPaginatedList, *http.Response, error) {
	return r.ApiService.ListRNAOligosExecute(r)
}

/*
ListRNAOligos List RNA Oligos

List RNA Oligos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRNAOligosRequest
*/
func (a *RNAOligosApiService) ListRNAOligos(ctx context.Context) ApiListRNAOligosRequest {
	return ApiListRNAOligosRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RnaOligosPaginatedList
func (a *RNAOligosApiService) ListRNAOligosExecute(r ApiListRNAOligosRequest) (*RnaOligosPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaOligosPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNAOligosApiService.ListRNAOligos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-oligos"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("nextToken", parameterToString(*r.nextToken, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.modifiedAt != nil {
		localVarQueryParams.Add("modifiedAt", parameterToString(*r.modifiedAt, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.nameIncludes != nil {
		localVarQueryParams.Add("nameIncludes", parameterToString(*r.nameIncludes, ""))
	}
	if r.bases != nil {
		localVarQueryParams.Add("bases", parameterToString(*r.bases, ""))
	}
	if r.folderId != nil {
		localVarQueryParams.Add("folderId", parameterToString(*r.folderId, ""))
	}
	if r.mentionedIn != nil {
		localVarQueryParams.Add("mentionedIn", parameterToString(*r.mentionedIn, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.registryId != nil {
		localVarQueryParams.Add("registryId", parameterToString(*r.registryId, ""))
	}
	if r.schemaId != nil {
		localVarQueryParams.Add("schemaId", parameterToString(*r.schemaId, ""))
	}
	if r.schemaFields != nil {
		localVarQueryParams.Add("schemaFields", parameterToString(*r.schemaFields, ""))
	}
	if r.archiveReason != nil {
		localVarQueryParams.Add("archiveReason", parameterToString(*r.archiveReason, ""))
	}
	if r.mentions != nil {
		localVarQueryParams.Add("mentions", parameterToString(*r.mentions, ""))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, ""))
	}
	if r.entityRegistryIdsAnyOf != nil {
		localVarQueryParams.Add("entityRegistryIds.anyOf", parameterToString(*r.entityRegistryIdsAnyOf, ""))
	}
	if r.namesAnyOf != nil {
		localVarQueryParams.Add("names.anyOf", parameterToString(*r.namesAnyOf, ""))
	}
	if r.namesAnyOfCaseSensitive != nil {
		localVarQueryParams.Add("names.anyOf.caseSensitive", parameterToString(*r.namesAnyOfCaseSensitive, ""))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, ""))
	}
	if r.authorIdsAnyOf != nil {
		localVarQueryParams.Add("authorIds.anyOf", parameterToString(*r.authorIdsAnyOf, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnarchiveRNAOligosRequest struct {
	ctx context.Context
	ApiService *RNAOligosApiService
	rnaOligosUnarchive *RnaOligosUnarchive
}

func (r ApiUnarchiveRNAOligosRequest) RnaOligosUnarchive(rnaOligosUnarchive RnaOligosUnarchive) ApiUnarchiveRNAOligosRequest {
	r.rnaOligosUnarchive = &rnaOligosUnarchive
	return r
}

func (r ApiUnarchiveRNAOligosRequest) Execute() (*RnaOligosArchivalChange, *http.Response, error) {
	return r.ApiService.UnarchiveRNAOligosExecute(r)
}

/*
UnarchiveRNAOligos Unarchive RNA Oligos

Unarchive RNA Oligos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUnarchiveRNAOligosRequest
*/
func (a *RNAOligosApiService) UnarchiveRNAOligos(ctx context.Context) ApiUnarchiveRNAOligosRequest {
	return ApiUnarchiveRNAOligosRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RnaOligosArchivalChange
func (a *RNAOligosApiService) UnarchiveRNAOligosExecute(r ApiUnarchiveRNAOligosRequest) (*RnaOligosArchivalChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaOligosArchivalChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNAOligosApiService.UnarchiveRNAOligos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-oligos:unarchive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaOligosUnarchive
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRNAOligoRequest struct {
	ctx context.Context
	ApiService *RNAOligosApiService
	oligoId string
	rnaOligoUpdate *RnaOligoUpdate
}

func (r ApiUpdateRNAOligoRequest) RnaOligoUpdate(rnaOligoUpdate RnaOligoUpdate) ApiUpdateRNAOligoRequest {
	r.rnaOligoUpdate = &rnaOligoUpdate
	return r
}

func (r ApiUpdateRNAOligoRequest) Execute() (*RnaOligo, *http.Response, error) {
	return r.ApiService.UpdateRNAOligoExecute(r)
}

/*
UpdateRNAOligo Update an RNA Oligo

Update an RNA Oligo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param oligoId
 @return ApiUpdateRNAOligoRequest
*/
func (a *RNAOligosApiService) UpdateRNAOligo(ctx context.Context, oligoId string) ApiUpdateRNAOligoRequest {
	return ApiUpdateRNAOligoRequest{
		ApiService: a,
		ctx: ctx,
		oligoId: oligoId,
	}
}

// Execute executes the request
//  @return RnaOligo
func (a *RNAOligosApiService) UpdateRNAOligoExecute(r ApiUpdateRNAOligoRequest) (*RnaOligo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaOligo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNAOligosApiService.UpdateRNAOligo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-oligos/{oligo_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"oligo_id"+"}", url.PathEscape(parameterToString(r.oligoId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaOligoUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
