/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// DnaOligosArchivalChange IDs of all items that were archived or unarchived, grouped by resource type. This includes the IDs of DNA Oligos along with any IDs of batches that were archived / unarchived. 
type DnaOligosArchivalChange struct {
	BatchIds []string `json:"batchIds,omitempty"`
	DnaOligoIds []string `json:"dnaOligoIds,omitempty"`
}

// NewDnaOligosArchivalChange instantiates a new DnaOligosArchivalChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnaOligosArchivalChange() *DnaOligosArchivalChange {
	this := DnaOligosArchivalChange{}
	return &this
}

// NewDnaOligosArchivalChangeWithDefaults instantiates a new DnaOligosArchivalChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnaOligosArchivalChangeWithDefaults() *DnaOligosArchivalChange {
	this := DnaOligosArchivalChange{}
	return &this
}

// GetBatchIds returns the BatchIds field value if set, zero value otherwise.
func (o *DnaOligosArchivalChange) GetBatchIds() []string {
	if o == nil || isNil(o.BatchIds) {
		var ret []string
		return ret
	}
	return o.BatchIds
}

// GetBatchIdsOk returns a tuple with the BatchIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnaOligosArchivalChange) GetBatchIdsOk() ([]string, bool) {
	if o == nil || isNil(o.BatchIds) {
    return nil, false
	}
	return o.BatchIds, true
}

// HasBatchIds returns a boolean if a field has been set.
func (o *DnaOligosArchivalChange) HasBatchIds() bool {
	if o != nil && !isNil(o.BatchIds) {
		return true
	}

	return false
}

// SetBatchIds gets a reference to the given []string and assigns it to the BatchIds field.
func (o *DnaOligosArchivalChange) SetBatchIds(v []string) {
	o.BatchIds = v
}

// GetDnaOligoIds returns the DnaOligoIds field value if set, zero value otherwise.
func (o *DnaOligosArchivalChange) GetDnaOligoIds() []string {
	if o == nil || isNil(o.DnaOligoIds) {
		var ret []string
		return ret
	}
	return o.DnaOligoIds
}

// GetDnaOligoIdsOk returns a tuple with the DnaOligoIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnaOligosArchivalChange) GetDnaOligoIdsOk() ([]string, bool) {
	if o == nil || isNil(o.DnaOligoIds) {
    return nil, false
	}
	return o.DnaOligoIds, true
}

// HasDnaOligoIds returns a boolean if a field has been set.
func (o *DnaOligosArchivalChange) HasDnaOligoIds() bool {
	if o != nil && !isNil(o.DnaOligoIds) {
		return true
	}

	return false
}

// SetDnaOligoIds gets a reference to the given []string and assigns it to the DnaOligoIds field.
func (o *DnaOligosArchivalChange) SetDnaOligoIds(v []string) {
	o.DnaOligoIds = v
}

func (o DnaOligosArchivalChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BatchIds) {
		toSerialize["batchIds"] = o.BatchIds
	}
	if !isNil(o.DnaOligoIds) {
		toSerialize["dnaOligoIds"] = o.DnaOligoIds
	}
	return json.Marshal(toSerialize)
}

type NullableDnaOligosArchivalChange struct {
	value *DnaOligosArchivalChange
	isSet bool
}

func (v NullableDnaOligosArchivalChange) Get() *DnaOligosArchivalChange {
	return v.value
}

func (v *NullableDnaOligosArchivalChange) Set(val *DnaOligosArchivalChange) {
	v.value = val
	v.isSet = true
}

func (v NullableDnaOligosArchivalChange) IsSet() bool {
	return v.isSet
}

func (v *NullableDnaOligosArchivalChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnaOligosArchivalChange(val *DnaOligosArchivalChange) *NullableDnaOligosArchivalChange {
	return &NullableDnaOligosArchivalChange{value: val, isSet: true}
}

func (v NullableDnaOligosArchivalChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnaOligosArchivalChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


