/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// FieldValue - For single link fields, use the id of the item you want to link (eg. \"seq_jdf8BV24\"). For multi-link fields, use an array of ids of the items you want to link (eg. [\"seq_jdf8BV24\"]) 
type FieldValue struct {
	ArrayOfString *[]string
	Bool *bool
	Float32 *float32
	MapmapOfStringinterface{} *map[string]interface{}
	String *string
}

// []stringAsFieldValue is a convenience function that returns []string wrapped in FieldValue
func ArrayOfStringAsFieldValue(v *[]string) FieldValue {
	return FieldValue{
		ArrayOfString: v,
	}
}

// boolAsFieldValue is a convenience function that returns bool wrapped in FieldValue
func BoolAsFieldValue(v *bool) FieldValue {
	return FieldValue{
		Bool: v,
	}
}

// float32AsFieldValue is a convenience function that returns float32 wrapped in FieldValue
func Float32AsFieldValue(v *float32) FieldValue {
	return FieldValue{
		Float32: v,
	}
}

// map[string]interface{}AsFieldValue is a convenience function that returns map[string]interface{} wrapped in FieldValue
func MapmapOfStringinterface{}AsFieldValue(v *map[string]interface{}) FieldValue {
	return FieldValue{
		MapmapOfStringinterface{}: v,
	}
}

// stringAsFieldValue is a convenience function that returns string wrapped in FieldValue
func StringAsFieldValue(v *string) FieldValue {
	return FieldValue{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *FieldValue) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into ArrayOfString
	err = newStrictDecoder(data).Decode(&dst.ArrayOfString)
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			match++
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal data into Bool
	err = newStrictDecoder(data).Decode(&dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			match++
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into MapmapOfStringinterface{}
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringinterface{})
	if err == nil {
		jsonMapmapOfStringinterface{}, _ := json.Marshal(dst.MapmapOfStringinterface{})
		if string(jsonMapmapOfStringinterface{}) == "{}" { // empty struct
			dst.MapmapOfStringinterface{} = nil
		} else {
			match++
		}
	} else {
		dst.MapmapOfStringinterface{} = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfString = nil
		dst.Bool = nil
		dst.Float32 = nil
		dst.MapmapOfStringinterface{} = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(FieldValue)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(FieldValue)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FieldValue) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.MapmapOfStringinterface{} != nil {
		return json.Marshal(&src.MapmapOfStringinterface{})
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FieldValue) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfString != nil {
		return obj.ArrayOfString
	}

	if obj.Bool != nil {
		return obj.Bool
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.MapmapOfStringinterface{} != nil {
		return obj.MapmapOfStringinterface{}
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableFieldValue struct {
	value *FieldValue
	isSet bool
}

func (v NullableFieldValue) Get() *FieldValue {
	return v.value
}

func (v *NullableFieldValue) Set(val *FieldValue) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldValue) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldValue(val *FieldValue) *NullableFieldValue {
	return &NullableFieldValue{value: val, isSet: true}
}

func (v NullableFieldValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


