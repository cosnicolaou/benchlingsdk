/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// LegacyWorkflowsApiService LegacyWorkflowsApi service
type LegacyWorkflowsApiService service

type ApiListLegacyWorkflowStageRunInputSamplesRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsApiService
	stageRunId string
}

func (r ApiListLegacyWorkflowStageRunInputSamplesRequest) Execute() (*LegacyWorkflowSampleList, *http.Response, error) {
	return r.ApiService.ListLegacyWorkflowStageRunInputSamplesExecute(r)
}

/*
ListLegacyWorkflowStageRunInputSamples List legacy workflow stage run input samples

List legacy workflow stage run input samples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stageRunId ID of the legacy workflow stage run to list input samples for
 @return ApiListLegacyWorkflowStageRunInputSamplesRequest
*/
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowStageRunInputSamples(ctx context.Context, stageRunId string) ApiListLegacyWorkflowStageRunInputSamplesRequest {
	return ApiListLegacyWorkflowStageRunInputSamplesRequest{
		ApiService: a,
		ctx: ctx,
		stageRunId: stageRunId,
	}
}

// Execute executes the request
//  @return LegacyWorkflowSampleList
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowStageRunInputSamplesExecute(r ApiListLegacyWorkflowStageRunInputSamplesRequest) (*LegacyWorkflowSampleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LegacyWorkflowSampleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsApiService.ListLegacyWorkflowStageRunInputSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/legacy-workflow-stage-runs/{stage_run_id}/input-samples"
	localVarPath = strings.Replace(localVarPath, "{"+"stage_run_id"+"}", url.PathEscape(parameterToString(r.stageRunId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLegacyWorkflowStageRunOutputSamplesRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsApiService
	stageRunId string
}

func (r ApiListLegacyWorkflowStageRunOutputSamplesRequest) Execute() (*LegacyWorkflowSampleList, *http.Response, error) {
	return r.ApiService.ListLegacyWorkflowStageRunOutputSamplesExecute(r)
}

/*
ListLegacyWorkflowStageRunOutputSamples List legacy workflow stage run output samples

List legacy workflow stage run output samples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stageRunId ID of the legacy workflow stage run to list output samples for
 @return ApiListLegacyWorkflowStageRunOutputSamplesRequest
*/
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowStageRunOutputSamples(ctx context.Context, stageRunId string) ApiListLegacyWorkflowStageRunOutputSamplesRequest {
	return ApiListLegacyWorkflowStageRunOutputSamplesRequest{
		ApiService: a,
		ctx: ctx,
		stageRunId: stageRunId,
	}
}

// Execute executes the request
//  @return LegacyWorkflowSampleList
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowStageRunOutputSamplesExecute(r ApiListLegacyWorkflowStageRunOutputSamplesRequest) (*LegacyWorkflowSampleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LegacyWorkflowSampleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsApiService.ListLegacyWorkflowStageRunOutputSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/legacy-workflow-stage-runs/{stage_run_id}/output-samples"
	localVarPath = strings.Replace(localVarPath, "{"+"stage_run_id"+"}", url.PathEscape(parameterToString(r.stageRunId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLegacyWorkflowStageRunRegisteredSamplesRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsApiService
	stageRunId string
}

func (r ApiListLegacyWorkflowStageRunRegisteredSamplesRequest) Execute() (*LegacyWorkflowSampleList, *http.Response, error) {
	return r.ApiService.ListLegacyWorkflowStageRunRegisteredSamplesExecute(r)
}

/*
ListLegacyWorkflowStageRunRegisteredSamples List legacy workflow stage run registered samples

List legacy workflow stage run registered samples

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stageRunId ID of the legacy workflow stage run to list registered samples for
 @return ApiListLegacyWorkflowStageRunRegisteredSamplesRequest
*/
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowStageRunRegisteredSamples(ctx context.Context, stageRunId string) ApiListLegacyWorkflowStageRunRegisteredSamplesRequest {
	return ApiListLegacyWorkflowStageRunRegisteredSamplesRequest{
		ApiService: a,
		ctx: ctx,
		stageRunId: stageRunId,
	}
}

// Execute executes the request
//  @return LegacyWorkflowSampleList
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowStageRunRegisteredSamplesExecute(r ApiListLegacyWorkflowStageRunRegisteredSamplesRequest) (*LegacyWorkflowSampleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LegacyWorkflowSampleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsApiService.ListLegacyWorkflowStageRunRegisteredSamples")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/legacy-workflow-stage-runs/{stage_run_id}/registered-samples"
	localVarPath = strings.Replace(localVarPath, "{"+"stage_run_id"+"}", url.PathEscape(parameterToString(r.stageRunId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLegacyWorkflowStageRunsRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsApiService
	stageId string
}

func (r ApiListLegacyWorkflowStageRunsRequest) Execute() (*LegacyWorkflowStageRunList, *http.Response, error) {
	return r.ApiService.ListLegacyWorkflowStageRunsExecute(r)
}

/*
ListLegacyWorkflowStageRuns List legacy workflow stage runs

List legacy workflow stage runs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param stageId ID of the legacy workflow stage to list runs for
 @return ApiListLegacyWorkflowStageRunsRequest
*/
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowStageRuns(ctx context.Context, stageId string) ApiListLegacyWorkflowStageRunsRequest {
	return ApiListLegacyWorkflowStageRunsRequest{
		ApiService: a,
		ctx: ctx,
		stageId: stageId,
	}
}

// Execute executes the request
//  @return LegacyWorkflowStageRunList
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowStageRunsExecute(r ApiListLegacyWorkflowStageRunsRequest) (*LegacyWorkflowStageRunList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LegacyWorkflowStageRunList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsApiService.ListLegacyWorkflowStageRuns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/legacy-workflow-stages/{stage_id}/workflow-stage-runs"
	localVarPath = strings.Replace(localVarPath, "{"+"stage_id"+"}", url.PathEscape(parameterToString(r.stageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLegacyWorkflowStagesRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsApiService
	legacyWorkflowId string
}

func (r ApiListLegacyWorkflowStagesRequest) Execute() (*LegacyWorkflowStageList, *http.Response, error) {
	return r.ApiService.ListLegacyWorkflowStagesExecute(r)
}

/*
ListLegacyWorkflowStages List legacy workflow stages

List legacy workflow stages

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param legacyWorkflowId ID of the legacy workflow to list stages for
 @return ApiListLegacyWorkflowStagesRequest
*/
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowStages(ctx context.Context, legacyWorkflowId string) ApiListLegacyWorkflowStagesRequest {
	return ApiListLegacyWorkflowStagesRequest{
		ApiService: a,
		ctx: ctx,
		legacyWorkflowId: legacyWorkflowId,
	}
}

// Execute executes the request
//  @return LegacyWorkflowStageList
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowStagesExecute(r ApiListLegacyWorkflowStagesRequest) (*LegacyWorkflowStageList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LegacyWorkflowStageList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsApiService.ListLegacyWorkflowStages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/legacy-workflows/{legacy_workflow_id}/workflow-stages"
	localVarPath = strings.Replace(localVarPath, "{"+"legacy_workflow_id"+"}", url.PathEscape(parameterToString(r.legacyWorkflowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListLegacyWorkflowsRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsApiService
}

func (r ApiListLegacyWorkflowsRequest) Execute() (*LegacyWorkflowList, *http.Response, error) {
	return r.ApiService.ListLegacyWorkflowsExecute(r)
}

/*
ListLegacyWorkflows List legacy workflows

List legacy workflows

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListLegacyWorkflowsRequest
*/
func (a *LegacyWorkflowsApiService) ListLegacyWorkflows(ctx context.Context) ApiListLegacyWorkflowsRequest {
	return ApiListLegacyWorkflowsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LegacyWorkflowList
func (a *LegacyWorkflowsApiService) ListLegacyWorkflowsExecute(r ApiListLegacyWorkflowsRequest) (*LegacyWorkflowList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LegacyWorkflowList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsApiService.ListLegacyWorkflows")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/legacy-workflows"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLegacyWorkflowMetadataRequest struct {
	ctx context.Context
	ApiService *LegacyWorkflowsApiService
	legacyWorkflowId string
	legacyWorkflowPatch *LegacyWorkflowPatch
}

func (r ApiUpdateLegacyWorkflowMetadataRequest) LegacyWorkflowPatch(legacyWorkflowPatch LegacyWorkflowPatch) ApiUpdateLegacyWorkflowMetadataRequest {
	r.legacyWorkflowPatch = &legacyWorkflowPatch
	return r
}

func (r ApiUpdateLegacyWorkflowMetadataRequest) Execute() (*LegacyWorkflow, *http.Response, error) {
	return r.ApiService.UpdateLegacyWorkflowMetadataExecute(r)
}

/*
UpdateLegacyWorkflowMetadata Update legacy workflow

Update workflow metadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param legacyWorkflowId ID of the legacy workflow to update
 @return ApiUpdateLegacyWorkflowMetadataRequest
*/
func (a *LegacyWorkflowsApiService) UpdateLegacyWorkflowMetadata(ctx context.Context, legacyWorkflowId string) ApiUpdateLegacyWorkflowMetadataRequest {
	return ApiUpdateLegacyWorkflowMetadataRequest{
		ApiService: a,
		ctx: ctx,
		legacyWorkflowId: legacyWorkflowId,
	}
}

// Execute executes the request
//  @return LegacyWorkflow
func (a *LegacyWorkflowsApiService) UpdateLegacyWorkflowMetadataExecute(r ApiUpdateLegacyWorkflowMetadataRequest) (*LegacyWorkflow, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LegacyWorkflow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacyWorkflowsApiService.UpdateLegacyWorkflowMetadata")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/legacy-workflows/{legacy_workflow_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"legacy_workflow_id"+"}", url.PathEscape(parameterToString(r.legacyWorkflowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.legacyWorkflowPatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
