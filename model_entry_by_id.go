/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntryById struct for EntryById
type EntryById struct {
	Entry *Entry `json:"entry,omitempty"`
}

// NewEntryById instantiates a new EntryById object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryById() *EntryById {
	this := EntryById{}
	return &this
}

// NewEntryByIdWithDefaults instantiates a new EntryById object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryByIdWithDefaults() *EntryById {
	this := EntryById{}
	return &this
}

// GetEntry returns the Entry field value if set, zero value otherwise.
func (o *EntryById) GetEntry() Entry {
	if o == nil || isNil(o.Entry) {
		var ret Entry
		return ret
	}
	return *o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryById) GetEntryOk() (*Entry, bool) {
	if o == nil || isNil(o.Entry) {
    return nil, false
	}
	return o.Entry, true
}

// HasEntry returns a boolean if a field has been set.
func (o *EntryById) HasEntry() bool {
	if o != nil && !isNil(o.Entry) {
		return true
	}

	return false
}

// SetEntry gets a reference to the given Entry and assigns it to the Entry field.
func (o *EntryById) SetEntry(v Entry) {
	o.Entry = &v
}

func (o EntryById) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Entry) {
		toSerialize["entry"] = o.Entry
	}
	return json.Marshal(toSerialize)
}

type NullableEntryById struct {
	value *EntryById
	isSet bool
}

func (v NullableEntryById) Get() *EntryById {
	return v.value
}

func (v *NullableEntryById) Set(val *EntryById) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryById) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryById) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryById(val *EntryById) *NullableEntryById {
	return &NullableEntryById{value: val, isSet: true}
}

func (v NullableEntryById) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryById) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


