/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// FeatureCreateAllOf struct for FeatureCreateAllOf
type FeatureCreateAllOf struct {
	// The match type of the feature. Used to determine how auto-annotate matches are made.
	MatchType *string `json:"matchType,omitempty"`
}

// NewFeatureCreateAllOf instantiates a new FeatureCreateAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeatureCreateAllOf() *FeatureCreateAllOf {
	this := FeatureCreateAllOf{}
	return &this
}

// NewFeatureCreateAllOfWithDefaults instantiates a new FeatureCreateAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeatureCreateAllOfWithDefaults() *FeatureCreateAllOf {
	this := FeatureCreateAllOf{}
	return &this
}

// GetMatchType returns the MatchType field value if set, zero value otherwise.
func (o *FeatureCreateAllOf) GetMatchType() string {
	if o == nil || isNil(o.MatchType) {
		var ret string
		return ret
	}
	return *o.MatchType
}

// GetMatchTypeOk returns a tuple with the MatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeatureCreateAllOf) GetMatchTypeOk() (*string, bool) {
	if o == nil || isNil(o.MatchType) {
    return nil, false
	}
	return o.MatchType, true
}

// HasMatchType returns a boolean if a field has been set.
func (o *FeatureCreateAllOf) HasMatchType() bool {
	if o != nil && !isNil(o.MatchType) {
		return true
	}

	return false
}

// SetMatchType gets a reference to the given string and assigns it to the MatchType field.
func (o *FeatureCreateAllOf) SetMatchType(v string) {
	o.MatchType = &v
}

func (o FeatureCreateAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MatchType) {
		toSerialize["matchType"] = o.MatchType
	}
	return json.Marshal(toSerialize)
}

type NullableFeatureCreateAllOf struct {
	value *FeatureCreateAllOf
	isSet bool
}

func (v NullableFeatureCreateAllOf) Get() *FeatureCreateAllOf {
	return v.value
}

func (v *NullableFeatureCreateAllOf) Set(val *FeatureCreateAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureCreateAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureCreateAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureCreateAllOf(val *FeatureCreateAllOf) *NullableFeatureCreateAllOf {
	return &NullableFeatureCreateAllOf{value: val, isSet: true}
}

func (v NullableFeatureCreateAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureCreateAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


