/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// DropdownOptionsArchive struct for DropdownOptionsArchive
type DropdownOptionsArchive struct {
	// Array of dropdown option IDs
	DropdownOptionIds []string `json:"dropdownOptionIds,omitempty"`
	// Reason that dropdown options are being archived. 
	Reason *string `json:"reason,omitempty"`
}

// NewDropdownOptionsArchive instantiates a new DropdownOptionsArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDropdownOptionsArchive() *DropdownOptionsArchive {
	this := DropdownOptionsArchive{}
	return &this
}

// NewDropdownOptionsArchiveWithDefaults instantiates a new DropdownOptionsArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDropdownOptionsArchiveWithDefaults() *DropdownOptionsArchive {
	this := DropdownOptionsArchive{}
	return &this
}

// GetDropdownOptionIds returns the DropdownOptionIds field value if set, zero value otherwise.
func (o *DropdownOptionsArchive) GetDropdownOptionIds() []string {
	if o == nil || isNil(o.DropdownOptionIds) {
		var ret []string
		return ret
	}
	return o.DropdownOptionIds
}

// GetDropdownOptionIdsOk returns a tuple with the DropdownOptionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DropdownOptionsArchive) GetDropdownOptionIdsOk() ([]string, bool) {
	if o == nil || isNil(o.DropdownOptionIds) {
    return nil, false
	}
	return o.DropdownOptionIds, true
}

// HasDropdownOptionIds returns a boolean if a field has been set.
func (o *DropdownOptionsArchive) HasDropdownOptionIds() bool {
	if o != nil && !isNil(o.DropdownOptionIds) {
		return true
	}

	return false
}

// SetDropdownOptionIds gets a reference to the given []string and assigns it to the DropdownOptionIds field.
func (o *DropdownOptionsArchive) SetDropdownOptionIds(v []string) {
	o.DropdownOptionIds = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *DropdownOptionsArchive) GetReason() string {
	if o == nil || isNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DropdownOptionsArchive) GetReasonOk() (*string, bool) {
	if o == nil || isNil(o.Reason) {
    return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *DropdownOptionsArchive) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *DropdownOptionsArchive) SetReason(v string) {
	o.Reason = &v
}

func (o DropdownOptionsArchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DropdownOptionIds) {
		toSerialize["dropdownOptionIds"] = o.DropdownOptionIds
	}
	if !isNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableDropdownOptionsArchive struct {
	value *DropdownOptionsArchive
	isSet bool
}

func (v NullableDropdownOptionsArchive) Get() *DropdownOptionsArchive {
	return v.value
}

func (v *NullableDropdownOptionsArchive) Set(val *DropdownOptionsArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableDropdownOptionsArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableDropdownOptionsArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDropdownOptionsArchive(val *DropdownOptionsArchive) *NullableDropdownOptionsArchive {
	return &NullableDropdownOptionsArchive{value: val, isSet: true}
}

func (v NullableDropdownOptionsArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDropdownOptionsArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


