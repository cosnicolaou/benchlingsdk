/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BenchlingAppsArchive struct for BenchlingAppsArchive
type BenchlingAppsArchive struct {
	// Array of app IDs
	AppIds []string `json:"appIds"`
	// Reason that apps are being archived. Actual reason enum varies by tenant.
	Reason string `json:"reason"`
}

// NewBenchlingAppsArchive instantiates a new BenchlingAppsArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBenchlingAppsArchive(appIds []string, reason string) *BenchlingAppsArchive {
	this := BenchlingAppsArchive{}
	this.AppIds = appIds
	this.Reason = reason
	return &this
}

// NewBenchlingAppsArchiveWithDefaults instantiates a new BenchlingAppsArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBenchlingAppsArchiveWithDefaults() *BenchlingAppsArchive {
	this := BenchlingAppsArchive{}
	return &this
}

// GetAppIds returns the AppIds field value
func (o *BenchlingAppsArchive) GetAppIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AppIds
}

// GetAppIdsOk returns a tuple with the AppIds field value
// and a boolean to check if the value has been set.
func (o *BenchlingAppsArchive) GetAppIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.AppIds, true
}

// SetAppIds sets field value
func (o *BenchlingAppsArchive) SetAppIds(v []string) {
	o.AppIds = v
}

// GetReason returns the Reason field value
func (o *BenchlingAppsArchive) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *BenchlingAppsArchive) GetReasonOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *BenchlingAppsArchive) SetReason(v string) {
	o.Reason = v
}

func (o BenchlingAppsArchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["appIds"] = o.AppIds
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableBenchlingAppsArchive struct {
	value *BenchlingAppsArchive
	isSet bool
}

func (v NullableBenchlingAppsArchive) Get() *BenchlingAppsArchive {
	return v.value
}

func (v *NullableBenchlingAppsArchive) Set(val *BenchlingAppsArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableBenchlingAppsArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableBenchlingAppsArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenchlingAppsArchive(val *BenchlingAppsArchive) *NullableBenchlingAppsArchive {
	return &NullableBenchlingAppsArchive{value: val, isSet: true}
}

func (v NullableBenchlingAppsArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenchlingAppsArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


