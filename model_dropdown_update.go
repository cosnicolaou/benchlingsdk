/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// DropdownUpdate struct for DropdownUpdate
type DropdownUpdate struct {
	// Options to set for the dropdown
	Options []DropdownOptionUpdate `json:"options"`
}

// NewDropdownUpdate instantiates a new DropdownUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDropdownUpdate(options []DropdownOptionUpdate) *DropdownUpdate {
	this := DropdownUpdate{}
	this.Options = options
	return &this
}

// NewDropdownUpdateWithDefaults instantiates a new DropdownUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDropdownUpdateWithDefaults() *DropdownUpdate {
	this := DropdownUpdate{}
	return &this
}

// GetOptions returns the Options field value
func (o *DropdownUpdate) GetOptions() []DropdownOptionUpdate {
	if o == nil {
		var ret []DropdownOptionUpdate
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *DropdownUpdate) GetOptionsOk() ([]DropdownOptionUpdate, bool) {
	if o == nil {
    return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *DropdownUpdate) SetOptions(v []DropdownOptionUpdate) {
	o.Options = v
}

func (o DropdownUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableDropdownUpdate struct {
	value *DropdownUpdate
	isSet bool
}

func (v NullableDropdownUpdate) Get() *DropdownUpdate {
	return v.value
}

func (v *NullableDropdownUpdate) Set(val *DropdownUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableDropdownUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableDropdownUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDropdownUpdate(val *DropdownUpdate) *NullableDropdownUpdate {
	return &NullableDropdownUpdate{value: val, isSet: true}
}

func (v NullableDropdownUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDropdownUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


