/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// RNASequencesApiService RNASequencesApi service
type RNASequencesApiService service

type ApiArchiveRNASequencesRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	rnaSequencesArchive *RnaSequencesArchive
}

func (r ApiArchiveRNASequencesRequest) RnaSequencesArchive(rnaSequencesArchive RnaSequencesArchive) ApiArchiveRNASequencesRequest {
	r.rnaSequencesArchive = &rnaSequencesArchive
	return r
}

func (r ApiArchiveRNASequencesRequest) Execute() (*RnaSequencesArchivalChange, *http.Response, error) {
	return r.ApiService.ArchiveRNASequencesExecute(r)
}

/*
ArchiveRNASequences Archive RNA Sequences

Archive RNA Sequences. RNA sequences that are already registered will not be removed from the registry.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiArchiveRNASequencesRequest
*/
func (a *RNASequencesApiService) ArchiveRNASequences(ctx context.Context) ApiArchiveRNASequencesRequest {
	return ApiArchiveRNASequencesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RnaSequencesArchivalChange
func (a *RNASequencesApiService) ArchiveRNASequencesExecute(r ApiArchiveRNASequencesRequest) (*RnaSequencesArchivalChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaSequencesArchivalChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.ArchiveRNASequences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences:archive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaSequencesArchive
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAutoAnnotateRnaSequencesRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	autoAnnotateRnaSequences *AutoAnnotateRnaSequences
}

func (r ApiAutoAnnotateRnaSequencesRequest) AutoAnnotateRnaSequences(autoAnnotateRnaSequences AutoAnnotateRnaSequences) ApiAutoAnnotateRnaSequencesRequest {
	r.autoAnnotateRnaSequences = &autoAnnotateRnaSequences
	return r
}

func (r ApiAutoAnnotateRnaSequencesRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.AutoAnnotateRnaSequencesExecute(r)
}

/*
AutoAnnotateRnaSequences Auto-annotate RNA sequences with matching features from specified Feature Libraries

Auto-annotate RNA sequences with matching features from specified Feature Libraries. U/T bases are treated as interchangeable in both features and sequences.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAutoAnnotateRnaSequencesRequest
*/
func (a *RNASequencesApiService) AutoAnnotateRnaSequences(ctx context.Context) ApiAutoAnnotateRnaSequencesRequest {
	return ApiAutoAnnotateRnaSequencesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *RNASequencesApiService) AutoAnnotateRnaSequencesExecute(r ApiAutoAnnotateRnaSequencesRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.AutoAnnotateRnaSequences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences:auto-annotate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autoAnnotateRnaSequences
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAutofillRNASequencePartsRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	autofillRnaSequences *AutofillRnaSequences
}

func (r ApiAutofillRNASequencePartsRequest) AutofillRnaSequences(autofillRnaSequences AutofillRnaSequences) ApiAutofillRNASequencePartsRequest {
	r.autofillRnaSequences = &autofillRnaSequences
	return r
}

func (r ApiAutofillRNASequencePartsRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.AutofillRNASequencePartsExecute(r)
}

/*
AutofillRNASequenceParts Autofill RNA sequence parts

Autofill parts from matching RNA Sequences with linked schemas.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAutofillRNASequencePartsRequest
*/
func (a *RNASequencesApiService) AutofillRNASequenceParts(ctx context.Context) ApiAutofillRNASequencePartsRequest {
	return ApiAutofillRNASequencePartsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *RNASequencesApiService) AutofillRNASequencePartsExecute(r ApiAutofillRNASequencePartsRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.AutofillRNASequenceParts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences:autofill-parts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autofillRnaSequences
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAutofillRNASequenceTranslationsRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	autofillRnaSequences *AutofillRnaSequences
}

func (r ApiAutofillRNASequenceTranslationsRequest) AutofillRnaSequences(autofillRnaSequences AutofillRnaSequences) ApiAutofillRNASequenceTranslationsRequest {
	r.autofillRnaSequences = &autofillRnaSequences
	return r
}

func (r ApiAutofillRNASequenceTranslationsRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.AutofillRNASequenceTranslationsExecute(r)
}

/*
AutofillRNASequenceTranslations Autofill RNA sequence translations from Amino Acid sequences with matching schemas

Autofill RNA sequence translations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAutofillRNASequenceTranslationsRequest
*/
func (a *RNASequencesApiService) AutofillRNASequenceTranslations(ctx context.Context) ApiAutofillRNASequenceTranslationsRequest {
	return ApiAutofillRNASequenceTranslationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *RNASequencesApiService) AutofillRNASequenceTranslationsExecute(r ApiAutofillRNASequenceTranslationsRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.AutofillRNASequenceTranslations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences:autofill-translations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.autofillRnaSequences
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkCreateRNASequencesRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	rnaSequencesBulkCreateRequest *RnaSequencesBulkCreateRequest
}

func (r ApiBulkCreateRNASequencesRequest) RnaSequencesBulkCreateRequest(rnaSequencesBulkCreateRequest RnaSequencesBulkCreateRequest) ApiBulkCreateRNASequencesRequest {
	r.rnaSequencesBulkCreateRequest = &rnaSequencesBulkCreateRequest
	return r
}

func (r ApiBulkCreateRNASequencesRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.BulkCreateRNASequencesExecute(r)
}

/*
BulkCreateRNASequences Bulk Create RNA sequences

Bulk Create RNA sequences. Limit of 1000 RNA Sequences per request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkCreateRNASequencesRequest
*/
func (a *RNASequencesApiService) BulkCreateRNASequences(ctx context.Context) ApiBulkCreateRNASequencesRequest {
	return ApiBulkCreateRNASequencesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *RNASequencesApiService) BulkCreateRNASequencesExecute(r ApiBulkCreateRNASequencesRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.BulkCreateRNASequences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences:bulk-create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaSequencesBulkCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkGetRNASequencesRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	rnaSequenceIds *string
}

// Comma-separated list of IDs of RNA sequences to get. 
func (r ApiBulkGetRNASequencesRequest) RnaSequenceIds(rnaSequenceIds string) ApiBulkGetRNASequencesRequest {
	r.rnaSequenceIds = &rnaSequenceIds
	return r
}

func (r ApiBulkGetRNASequencesRequest) Execute() (*RnaSequencesBulkGet, *http.Response, error) {
	return r.ApiService.BulkGetRNASequencesExecute(r)
}

/*
BulkGetRNASequences Bulk get RNA sequences by ID

Bulk get RNA sequences by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkGetRNASequencesRequest
*/
func (a *RNASequencesApiService) BulkGetRNASequences(ctx context.Context) ApiBulkGetRNASequencesRequest {
	return ApiBulkGetRNASequencesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RnaSequencesBulkGet
func (a *RNASequencesApiService) BulkGetRNASequencesExecute(r ApiBulkGetRNASequencesRequest) (*RnaSequencesBulkGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaSequencesBulkGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.BulkGetRNASequences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences:bulk-get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rnaSequenceIds == nil {
		return localVarReturnValue, nil, reportError("rnaSequenceIds is required and must be specified")
	}

	localVarQueryParams.Add("rnaSequenceIds", parameterToString(*r.rnaSequenceIds, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkUpdateRNASequencesRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	rnaSequencesBulkUpdateRequest *RnaSequencesBulkUpdateRequest
}

func (r ApiBulkUpdateRNASequencesRequest) RnaSequencesBulkUpdateRequest(rnaSequencesBulkUpdateRequest RnaSequencesBulkUpdateRequest) ApiBulkUpdateRNASequencesRequest {
	r.rnaSequencesBulkUpdateRequest = &rnaSequencesBulkUpdateRequest
	return r
}

func (r ApiBulkUpdateRNASequencesRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.BulkUpdateRNASequencesExecute(r)
}

/*
BulkUpdateRNASequences Bulk Update RNA sequences

Bulk Update RNA sequences

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkUpdateRNASequencesRequest
*/
func (a *RNASequencesApiService) BulkUpdateRNASequences(ctx context.Context) ApiBulkUpdateRNASequencesRequest {
	return ApiBulkUpdateRNASequencesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *RNASequencesApiService) BulkUpdateRNASequencesExecute(r ApiBulkUpdateRNASequencesRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.BulkUpdateRNASequences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences:bulk-update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaSequencesBulkUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateRNASequenceRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	rnaSequenceCreate *RnaSequenceCreate
}

func (r ApiCreateRNASequenceRequest) RnaSequenceCreate(rnaSequenceCreate RnaSequenceCreate) ApiCreateRNASequenceRequest {
	r.rnaSequenceCreate = &rnaSequenceCreate
	return r
}

func (r ApiCreateRNASequenceRequest) Execute() (*RnaSequence, *http.Response, error) {
	return r.ApiService.CreateRNASequenceExecute(r)
}

/*
CreateRNASequence Create an RNA sequence

Create an RNA sequence

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateRNASequenceRequest
*/
func (a *RNASequencesApiService) CreateRNASequence(ctx context.Context) ApiCreateRNASequenceRequest {
	return ApiCreateRNASequenceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RnaSequence
func (a *RNASequencesApiService) CreateRNASequenceExecute(r ApiCreateRNASequenceRequest) (*RnaSequence, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaSequence
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.CreateRNASequence")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaSequenceCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRNASequenceRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	rnaSequenceId string
}

func (r ApiGetRNASequenceRequest) Execute() (*RnaSequence, *http.Response, error) {
	return r.ApiService.GetRNASequenceExecute(r)
}

/*
GetRNASequence Get an RNA sequence

Get an RNA sequence

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rnaSequenceId
 @return ApiGetRNASequenceRequest
*/
func (a *RNASequencesApiService) GetRNASequence(ctx context.Context, rnaSequenceId string) ApiGetRNASequenceRequest {
	return ApiGetRNASequenceRequest{
		ApiService: a,
		ctx: ctx,
		rnaSequenceId: rnaSequenceId,
	}
}

// Execute executes the request
//  @return RnaSequence
func (a *RNASequencesApiService) GetRNASequenceExecute(r ApiGetRNASequenceRequest) (*RnaSequence, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaSequence
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.GetRNASequence")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences/{rna_sequence_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rna_sequence_id"+"}", url.PathEscape(parameterToString(r.rnaSequenceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRNASequencesRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	pageSize *int32
	nextToken *string
	sort *string
	modifiedAt *string
	name *string
	nameIncludes *string
	bases *string
	folderId *string
	mentionedIn *string
	projectId *string
	registryId *string
	schemaId *string
	schemaFields *map[string]interface{}
	archiveReason *string
	mentions *string
	ids *string
	entityRegistryIdsAnyOf *string
	namesAnyOf *string
	namesAnyOfCaseSensitive *string
	creatorIds *string
	authorIdsAnyOf *string
}

// Number of results to return. Defaults to 50, maximum of 100. 
func (r ApiListRNASequencesRequest) PageSize(pageSize int32) ApiListRNASequencesRequest {
	r.pageSize = &pageSize
	return r
}

// Token for pagination
func (r ApiListRNASequencesRequest) NextToken(nextToken string) ApiListRNASequencesRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiListRNASequencesRequest) Sort(sort string) ApiListRNASequencesRequest {
	r.sort = &sort
	return r
}

// Datetime, in RFC 3339 format. Supports the &gt; and &lt; operators. Time zone defaults to UTC. Restricts results to those modified in the specified range. e.g. &gt; 2017-04-30. 
func (r ApiListRNASequencesRequest) ModifiedAt(modifiedAt string) ApiListRNASequencesRequest {
	r.modifiedAt = &modifiedAt
	return r
}

// Name of an RNA Sequence. Restricts results to those with the specified name, alias, or entity registry ID.
func (r ApiListRNASequencesRequest) Name(name string) ApiListRNASequencesRequest {
	r.name = &name
	return r
}

// Name substring of an RNA Sequence. Restricts results to those with names, aliases, or entity registry IDs that include the provided substring.
func (r ApiListRNASequencesRequest) NameIncludes(nameIncludes string) ApiListRNASequencesRequest {
	r.nameIncludes = &nameIncludes
	return r
}

// Full bases of the RNA sequence. Restricts results to those with the specified bases, case-insensitive, allowing for circular or reverse complement matches. Does not allow partial matching or loose matching via degenerate bases.
func (r ApiListRNASequencesRequest) Bases(bases string) ApiListRNASequencesRequest {
	r.bases = &bases
	return r
}

// ID of a folder. Restricts results to those in the folder.
func (r ApiListRNASequencesRequest) FolderId(folderId string) ApiListRNASequencesRequest {
	r.folderId = &folderId
	return r
}

// Comma-separated list of entry IDs. Restricts results to RNA sequences mentioned in those entries. 
func (r ApiListRNASequencesRequest) MentionedIn(mentionedIn string) ApiListRNASequencesRequest {
	r.mentionedIn = &mentionedIn
	return r
}

// ID of a project. Restricts results to those in the project.
func (r ApiListRNASequencesRequest) ProjectId(projectId string) ApiListRNASequencesRequest {
	r.projectId = &projectId
	return r
}

// ID of a registry. Restricts results to those registered in this registry. Specifying \&quot;null\&quot; returns unregistered items. 
func (r ApiListRNASequencesRequest) RegistryId(registryId string) ApiListRNASequencesRequest {
	r.registryId = &registryId
	return r
}

// ID of a schema. Restricts results to those of the specified schema. 
func (r ApiListRNASequencesRequest) SchemaId(schemaId string) ApiListRNASequencesRequest {
	r.schemaId = &schemaId
	return r
}

// Schema field value. For Integer, Float, and Date type fields, supports the &gt;&#x3D; and &lt;&#x3D; operators. If present, the schemaId param must also be present. Restricts results to those with a field of whose value matches the filter. 
func (r ApiListRNASequencesRequest) SchemaFields(schemaFields map[string]interface{}) ApiListRNASequencesRequest {
	r.schemaFields = &schemaFields
	return r
}

// Archive reason. Restricts items to those with the specified archive reason. Use \&quot;NOT_ARCHIVED\&quot; to filter for unarchived RNA sequences. Use \&quot;ANY_ARCHIVED\&quot; to filter for archived RNA sequences regardless of reason. Use \&quot;ANY_ARCHIVED_OR_NOT_ARCHIVED\&quot; to return items for both archived and unarchived. 
func (r ApiListRNASequencesRequest) ArchiveReason(archiveReason string) ApiListRNASequencesRequest {
	r.archiveReason = &archiveReason
	return r
}

// Comma-separated list of item IDs. Restricts results to those that mention the given items in the description. 
func (r ApiListRNASequencesRequest) Mentions(mentions string) ApiListRNASequencesRequest {
	r.mentions = &mentions
	return r
}

// Comma-separated list of ids. Matches all of the provided IDs, or returns a 400 error that includes a list of which IDs are invalid. 
func (r ApiListRNASequencesRequest) Ids(ids string) ApiListRNASequencesRequest {
	r.ids = &ids
	return r
}

// Comma-separated list of entity registry IDs. Restricts results to those that match any of the specified registry IDs. 
func (r ApiListRNASequencesRequest) EntityRegistryIdsAnyOf(entityRegistryIdsAnyOf string) ApiListRNASequencesRequest {
	r.entityRegistryIdsAnyOf = &entityRegistryIdsAnyOf
	return r
}

// Comma-separated list of names. Restricts results to those that match any of the specified names, aliases, or entity registry IDs, case insensitive.  Warning - this filter can be non-performant due to case insensitivity. 
func (r ApiListRNASequencesRequest) NamesAnyOf(namesAnyOf string) ApiListRNASequencesRequest {
	r.namesAnyOf = &namesAnyOf
	return r
}

// Comma-separated list of names. Restricts results to those that match any of the specified names, aliases, or entity registry IDs, case sensitive. 
func (r ApiListRNASequencesRequest) NamesAnyOfCaseSensitive(namesAnyOfCaseSensitive string) ApiListRNASequencesRequest {
	r.namesAnyOfCaseSensitive = &namesAnyOfCaseSensitive
	return r
}

// Comma separated list of users IDs
func (r ApiListRNASequencesRequest) CreatorIds(creatorIds string) ApiListRNASequencesRequest {
	r.creatorIds = &creatorIds
	return r
}

// Comma separated list of user or app IDs
func (r ApiListRNASequencesRequest) AuthorIdsAnyOf(authorIdsAnyOf string) ApiListRNASequencesRequest {
	r.authorIdsAnyOf = &authorIdsAnyOf
	return r
}

func (r ApiListRNASequencesRequest) Execute() (*RnaSequencesPaginatedList, *http.Response, error) {
	return r.ApiService.ListRNASequencesExecute(r)
}

/*
ListRNASequences List RNA sequences

List RNA sequences

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListRNASequencesRequest
*/
func (a *RNASequencesApiService) ListRNASequences(ctx context.Context) ApiListRNASequencesRequest {
	return ApiListRNASequencesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RnaSequencesPaginatedList
func (a *RNASequencesApiService) ListRNASequencesExecute(r ApiListRNASequencesRequest) (*RnaSequencesPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaSequencesPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.ListRNASequences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("nextToken", parameterToString(*r.nextToken, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.modifiedAt != nil {
		localVarQueryParams.Add("modifiedAt", parameterToString(*r.modifiedAt, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.nameIncludes != nil {
		localVarQueryParams.Add("nameIncludes", parameterToString(*r.nameIncludes, ""))
	}
	if r.bases != nil {
		localVarQueryParams.Add("bases", parameterToString(*r.bases, ""))
	}
	if r.folderId != nil {
		localVarQueryParams.Add("folderId", parameterToString(*r.folderId, ""))
	}
	if r.mentionedIn != nil {
		localVarQueryParams.Add("mentionedIn", parameterToString(*r.mentionedIn, ""))
	}
	if r.projectId != nil {
		localVarQueryParams.Add("projectId", parameterToString(*r.projectId, ""))
	}
	if r.registryId != nil {
		localVarQueryParams.Add("registryId", parameterToString(*r.registryId, ""))
	}
	if r.schemaId != nil {
		localVarQueryParams.Add("schemaId", parameterToString(*r.schemaId, ""))
	}
	if r.schemaFields != nil {
		localVarQueryParams.Add("schemaFields", parameterToString(*r.schemaFields, ""))
	}
	if r.archiveReason != nil {
		localVarQueryParams.Add("archiveReason", parameterToString(*r.archiveReason, ""))
	}
	if r.mentions != nil {
		localVarQueryParams.Add("mentions", parameterToString(*r.mentions, ""))
	}
	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, ""))
	}
	if r.entityRegistryIdsAnyOf != nil {
		localVarQueryParams.Add("entityRegistryIds.anyOf", parameterToString(*r.entityRegistryIdsAnyOf, ""))
	}
	if r.namesAnyOf != nil {
		localVarQueryParams.Add("names.anyOf", parameterToString(*r.namesAnyOf, ""))
	}
	if r.namesAnyOfCaseSensitive != nil {
		localVarQueryParams.Add("names.anyOf.caseSensitive", parameterToString(*r.namesAnyOfCaseSensitive, ""))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, ""))
	}
	if r.authorIdsAnyOf != nil {
		localVarQueryParams.Add("authorIds.anyOf", parameterToString(*r.authorIdsAnyOf, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnarchiveRNASequencesRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	rnaSequencesUnarchive *RnaSequencesUnarchive
}

func (r ApiUnarchiveRNASequencesRequest) RnaSequencesUnarchive(rnaSequencesUnarchive RnaSequencesUnarchive) ApiUnarchiveRNASequencesRequest {
	r.rnaSequencesUnarchive = &rnaSequencesUnarchive
	return r
}

func (r ApiUnarchiveRNASequencesRequest) Execute() (*RnaSequencesArchivalChange, *http.Response, error) {
	return r.ApiService.UnarchiveRNASequencesExecute(r)
}

/*
UnarchiveRNASequences Unarchive RNA sequences

Unarchive RNA sequences

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUnarchiveRNASequencesRequest
*/
func (a *RNASequencesApiService) UnarchiveRNASequences(ctx context.Context) ApiUnarchiveRNASequencesRequest {
	return ApiUnarchiveRNASequencesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RnaSequencesArchivalChange
func (a *RNASequencesApiService) UnarchiveRNASequencesExecute(r ApiUnarchiveRNASequencesRequest) (*RnaSequencesArchivalChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaSequencesArchivalChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.UnarchiveRNASequences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences:unarchive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaSequencesUnarchive
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateRNASequenceRequest struct {
	ctx context.Context
	ApiService *RNASequencesApiService
	rnaSequenceId string
	rnaSequenceUpdate *RnaSequenceUpdate
}

func (r ApiUpdateRNASequenceRequest) RnaSequenceUpdate(rnaSequenceUpdate RnaSequenceUpdate) ApiUpdateRNASequenceRequest {
	r.rnaSequenceUpdate = &rnaSequenceUpdate
	return r
}

func (r ApiUpdateRNASequenceRequest) Execute() (*RnaSequence, *http.Response, error) {
	return r.ApiService.UpdateRNASequenceExecute(r)
}

/*
UpdateRNASequence Update an RNA sequence

Update an RNA sequence

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param rnaSequenceId
 @return ApiUpdateRNASequenceRequest
*/
func (a *RNASequencesApiService) UpdateRNASequence(ctx context.Context, rnaSequenceId string) ApiUpdateRNASequenceRequest {
	return ApiUpdateRNASequenceRequest{
		ApiService: a,
		ctx: ctx,
		rnaSequenceId: rnaSequenceId,
	}
}

// Execute executes the request
//  @return RnaSequence
func (a *RNASequencesApiService) UpdateRNASequenceExecute(r ApiUpdateRNASequenceRequest) (*RnaSequence, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RnaSequence
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RNASequencesApiService.UpdateRNASequence")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/rna-sequences/{rna_sequence_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"rna_sequence_id"+"}", url.PathEscape(parameterToString(r.rnaSequenceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rnaSequenceUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
