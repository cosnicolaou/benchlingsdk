/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// FoldersArchive struct for FoldersArchive
type FoldersArchive struct {
	// A list of folder IDs to archive.
	FolderIds []string `json:"folderIds"`
	// The reason for archiving the provided folders. Accepted reasons may differ based on tenant configuration. 
	Reason string `json:"reason"`
}

// NewFoldersArchive instantiates a new FoldersArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFoldersArchive(folderIds []string, reason string) *FoldersArchive {
	this := FoldersArchive{}
	this.FolderIds = folderIds
	this.Reason = reason
	return &this
}

// NewFoldersArchiveWithDefaults instantiates a new FoldersArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFoldersArchiveWithDefaults() *FoldersArchive {
	this := FoldersArchive{}
	return &this
}

// GetFolderIds returns the FolderIds field value
func (o *FoldersArchive) GetFolderIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FolderIds
}

// GetFolderIdsOk returns a tuple with the FolderIds field value
// and a boolean to check if the value has been set.
func (o *FoldersArchive) GetFolderIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.FolderIds, true
}

// SetFolderIds sets field value
func (o *FoldersArchive) SetFolderIds(v []string) {
	o.FolderIds = v
}

// GetReason returns the Reason field value
func (o *FoldersArchive) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *FoldersArchive) GetReasonOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *FoldersArchive) SetReason(v string) {
	o.Reason = v
}

func (o FoldersArchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["folderIds"] = o.FolderIds
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableFoldersArchive struct {
	value *FoldersArchive
	isSet bool
}

func (v NullableFoldersArchive) Get() *FoldersArchive {
	return v.value
}

func (v *NullableFoldersArchive) Set(val *FoldersArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableFoldersArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableFoldersArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFoldersArchive(val *FoldersArchive) *NullableFoldersArchive {
	return &NullableFoldersArchive{value: val, isSet: true}
}

func (v NullableFoldersArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFoldersArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


