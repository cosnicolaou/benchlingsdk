/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntryUpdatedReviewRecordEventAllOf struct for EntryUpdatedReviewRecordEventAllOf
type EntryUpdatedReviewRecordEventAllOf struct {
	Entry *Entry `json:"entry,omitempty"`
	EventType *string `json:"eventType,omitempty"`
}

// NewEntryUpdatedReviewRecordEventAllOf instantiates a new EntryUpdatedReviewRecordEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryUpdatedReviewRecordEventAllOf() *EntryUpdatedReviewRecordEventAllOf {
	this := EntryUpdatedReviewRecordEventAllOf{}
	return &this
}

// NewEntryUpdatedReviewRecordEventAllOfWithDefaults instantiates a new EntryUpdatedReviewRecordEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryUpdatedReviewRecordEventAllOfWithDefaults() *EntryUpdatedReviewRecordEventAllOf {
	this := EntryUpdatedReviewRecordEventAllOf{}
	return &this
}

// GetEntry returns the Entry field value if set, zero value otherwise.
func (o *EntryUpdatedReviewRecordEventAllOf) GetEntry() Entry {
	if o == nil || isNil(o.Entry) {
		var ret Entry
		return ret
	}
	return *o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryUpdatedReviewRecordEventAllOf) GetEntryOk() (*Entry, bool) {
	if o == nil || isNil(o.Entry) {
    return nil, false
	}
	return o.Entry, true
}

// HasEntry returns a boolean if a field has been set.
func (o *EntryUpdatedReviewRecordEventAllOf) HasEntry() bool {
	if o != nil && !isNil(o.Entry) {
		return true
	}

	return false
}

// SetEntry gets a reference to the given Entry and assigns it to the Entry field.
func (o *EntryUpdatedReviewRecordEventAllOf) SetEntry(v Entry) {
	o.Entry = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EntryUpdatedReviewRecordEventAllOf) GetEventType() string {
	if o == nil || isNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryUpdatedReviewRecordEventAllOf) GetEventTypeOk() (*string, bool) {
	if o == nil || isNil(o.EventType) {
    return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EntryUpdatedReviewRecordEventAllOf) HasEventType() bool {
	if o != nil && !isNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *EntryUpdatedReviewRecordEventAllOf) SetEventType(v string) {
	o.EventType = &v
}

func (o EntryUpdatedReviewRecordEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Entry) {
		toSerialize["entry"] = o.Entry
	}
	if !isNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	return json.Marshal(toSerialize)
}

type NullableEntryUpdatedReviewRecordEventAllOf struct {
	value *EntryUpdatedReviewRecordEventAllOf
	isSet bool
}

func (v NullableEntryUpdatedReviewRecordEventAllOf) Get() *EntryUpdatedReviewRecordEventAllOf {
	return v.value
}

func (v *NullableEntryUpdatedReviewRecordEventAllOf) Set(val *EntryUpdatedReviewRecordEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryUpdatedReviewRecordEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryUpdatedReviewRecordEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryUpdatedReviewRecordEventAllOf(val *EntryUpdatedReviewRecordEventAllOf) *NullableEntryUpdatedReviewRecordEventAllOf {
	return &NullableEntryUpdatedReviewRecordEventAllOf{value: val, isSet: true}
}

func (v NullableEntryUpdatedReviewRecordEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryUpdatedReviewRecordEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


