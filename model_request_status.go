/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// RequestStatus the model 'RequestStatus'
type RequestStatus string

// List of RequestStatus
const (
	REQUESTED RequestStatus = "REQUESTED"
	SCHEDULED RequestStatus = "SCHEDULED"
	IN_PROGRESS RequestStatus = "IN_PROGRESS"
	COMPLETED RequestStatus = "COMPLETED"
	CANCELLED RequestStatus = "CANCELLED"
)

// All allowed values of RequestStatus enum
var AllowedRequestStatusEnumValues = []RequestStatus{
	"REQUESTED",
	"SCHEDULED",
	"IN_PROGRESS",
	"COMPLETED",
	"CANCELLED",
}

func (v *RequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RequestStatus(value)
	for _, existing := range AllowedRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RequestStatus", value)
}

// NewRequestStatusFromValue returns a pointer to a valid RequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRequestStatusFromValue(v string) (*RequestStatus, error) {
	ev := RequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RequestStatus: valid values are %v", v, AllowedRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RequestStatus) IsValid() bool {
	for _, existing := range AllowedRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RequestStatus value
func (v RequestStatus) Ptr() *RequestStatus {
	return &v
}

type NullableRequestStatus struct {
	value *RequestStatus
	isSet bool
}

func (v NullableRequestStatus) Get() *RequestStatus {
	return v.value
}

func (v *NullableRequestStatus) Set(val *RequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestStatus(val *RequestStatus) *NullableRequestStatus {
	return &NullableRequestStatus{value: val, isSet: true}
}

func (v NullableRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

