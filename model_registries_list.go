/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// RegistriesList struct for RegistriesList
type RegistriesList struct {
	Registries []Registry `json:"registries,omitempty"`
}

// NewRegistriesList instantiates a new RegistriesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistriesList() *RegistriesList {
	this := RegistriesList{}
	return &this
}

// NewRegistriesListWithDefaults instantiates a new RegistriesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistriesListWithDefaults() *RegistriesList {
	this := RegistriesList{}
	return &this
}

// GetRegistries returns the Registries field value if set, zero value otherwise.
func (o *RegistriesList) GetRegistries() []Registry {
	if o == nil || isNil(o.Registries) {
		var ret []Registry
		return ret
	}
	return o.Registries
}

// GetRegistriesOk returns a tuple with the Registries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistriesList) GetRegistriesOk() ([]Registry, bool) {
	if o == nil || isNil(o.Registries) {
    return nil, false
	}
	return o.Registries, true
}

// HasRegistries returns a boolean if a field has been set.
func (o *RegistriesList) HasRegistries() bool {
	if o != nil && !isNil(o.Registries) {
		return true
	}

	return false
}

// SetRegistries gets a reference to the given []Registry and assigns it to the Registries field.
func (o *RegistriesList) SetRegistries(v []Registry) {
	o.Registries = v
}

func (o RegistriesList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Registries) {
		toSerialize["registries"] = o.Registries
	}
	return json.Marshal(toSerialize)
}

type NullableRegistriesList struct {
	value *RegistriesList
	isSet bool
}

func (v NullableRegistriesList) Get() *RegistriesList {
	return v.value
}

func (v *NullableRegistriesList) Set(val *RegistriesList) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistriesList) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistriesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistriesList(val *RegistriesList) *NullableRegistriesList {
	return &NullableRegistriesList{value: val, isSet: true}
}

func (v NullableRegistriesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistriesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


