/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AssayRunsBulkGet struct for AssayRunsBulkGet
type AssayRunsBulkGet struct {
	AssayRuns []AssayRun `json:"assayRuns,omitempty"`
}

// NewAssayRunsBulkGet instantiates a new AssayRunsBulkGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssayRunsBulkGet() *AssayRunsBulkGet {
	this := AssayRunsBulkGet{}
	return &this
}

// NewAssayRunsBulkGetWithDefaults instantiates a new AssayRunsBulkGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssayRunsBulkGetWithDefaults() *AssayRunsBulkGet {
	this := AssayRunsBulkGet{}
	return &this
}

// GetAssayRuns returns the AssayRuns field value if set, zero value otherwise.
func (o *AssayRunsBulkGet) GetAssayRuns() []AssayRun {
	if o == nil || isNil(o.AssayRuns) {
		var ret []AssayRun
		return ret
	}
	return o.AssayRuns
}

// GetAssayRunsOk returns a tuple with the AssayRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunsBulkGet) GetAssayRunsOk() ([]AssayRun, bool) {
	if o == nil || isNil(o.AssayRuns) {
    return nil, false
	}
	return o.AssayRuns, true
}

// HasAssayRuns returns a boolean if a field has been set.
func (o *AssayRunsBulkGet) HasAssayRuns() bool {
	if o != nil && !isNil(o.AssayRuns) {
		return true
	}

	return false
}

// SetAssayRuns gets a reference to the given []AssayRun and assigns it to the AssayRuns field.
func (o *AssayRunsBulkGet) SetAssayRuns(v []AssayRun) {
	o.AssayRuns = v
}

func (o AssayRunsBulkGet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AssayRuns) {
		toSerialize["assayRuns"] = o.AssayRuns
	}
	return json.Marshal(toSerialize)
}

type NullableAssayRunsBulkGet struct {
	value *AssayRunsBulkGet
	isSet bool
}

func (v NullableAssayRunsBulkGet) Get() *AssayRunsBulkGet {
	return v.value
}

func (v *NullableAssayRunsBulkGet) Set(val *AssayRunsBulkGet) {
	v.value = val
	v.isSet = true
}

func (v NullableAssayRunsBulkGet) IsSet() bool {
	return v.isSet
}

func (v *NullableAssayRunsBulkGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssayRunsBulkGet(val *AssayRunsBulkGet) *NullableAssayRunsBulkGet {
	return &NullableAssayRunsBulkGet{value: val, isSet: true}
}

func (v NullableAssayRunsBulkGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssayRunsBulkGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


