/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// CheckboxNotePart One \"line\" of a checklist
type CheckboxNotePart struct {
	// All notes have an indentation level - the default is 0 for no indent. For lists, indentation gives notes hierarchy - a bulleted list with children is modeled as one note part with indentation 1 followed by note parts with indentation 2, for example.
	Indentation *int32 `json:"indentation,omitempty"`
	Type *string `json:"type,omitempty"`
	// Indicates whether the checkbox is checked or not. 
	Checked *bool `json:"checked,omitempty"`
	// Array of links referenced in text via an @-mention, hyperlink, or the drag-n-dropped preview attached to the note. 
	Links []EntryLink `json:"links,omitempty"`
	// The textual contents of the note.
	Text *string `json:"text,omitempty"`
}

// NewCheckboxNotePart instantiates a new CheckboxNotePart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckboxNotePart() *CheckboxNotePart {
	this := CheckboxNotePart{}
	var indentation int32 = 0
	this.Indentation = &indentation
	return &this
}

// NewCheckboxNotePartWithDefaults instantiates a new CheckboxNotePart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckboxNotePartWithDefaults() *CheckboxNotePart {
	this := CheckboxNotePart{}
	var indentation int32 = 0
	this.Indentation = &indentation
	return &this
}

// GetIndentation returns the Indentation field value if set, zero value otherwise.
func (o *CheckboxNotePart) GetIndentation() int32 {
	if o == nil || isNil(o.Indentation) {
		var ret int32
		return ret
	}
	return *o.Indentation
}

// GetIndentationOk returns a tuple with the Indentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckboxNotePart) GetIndentationOk() (*int32, bool) {
	if o == nil || isNil(o.Indentation) {
    return nil, false
	}
	return o.Indentation, true
}

// HasIndentation returns a boolean if a field has been set.
func (o *CheckboxNotePart) HasIndentation() bool {
	if o != nil && !isNil(o.Indentation) {
		return true
	}

	return false
}

// SetIndentation gets a reference to the given int32 and assigns it to the Indentation field.
func (o *CheckboxNotePart) SetIndentation(v int32) {
	o.Indentation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CheckboxNotePart) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckboxNotePart) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CheckboxNotePart) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CheckboxNotePart) SetType(v string) {
	o.Type = &v
}

// GetChecked returns the Checked field value if set, zero value otherwise.
func (o *CheckboxNotePart) GetChecked() bool {
	if o == nil || isNil(o.Checked) {
		var ret bool
		return ret
	}
	return *o.Checked
}

// GetCheckedOk returns a tuple with the Checked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckboxNotePart) GetCheckedOk() (*bool, bool) {
	if o == nil || isNil(o.Checked) {
    return nil, false
	}
	return o.Checked, true
}

// HasChecked returns a boolean if a field has been set.
func (o *CheckboxNotePart) HasChecked() bool {
	if o != nil && !isNil(o.Checked) {
		return true
	}

	return false
}

// SetChecked gets a reference to the given bool and assigns it to the Checked field.
func (o *CheckboxNotePart) SetChecked(v bool) {
	o.Checked = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CheckboxNotePart) GetLinks() []EntryLink {
	if o == nil || isNil(o.Links) {
		var ret []EntryLink
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckboxNotePart) GetLinksOk() ([]EntryLink, bool) {
	if o == nil || isNil(o.Links) {
    return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CheckboxNotePart) HasLinks() bool {
	if o != nil && !isNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []EntryLink and assigns it to the Links field.
func (o *CheckboxNotePart) SetLinks(v []EntryLink) {
	o.Links = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *CheckboxNotePart) GetText() string {
	if o == nil || isNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckboxNotePart) GetTextOk() (*string, bool) {
	if o == nil || isNil(o.Text) {
    return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *CheckboxNotePart) HasText() bool {
	if o != nil && !isNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *CheckboxNotePart) SetText(v string) {
	o.Text = &v
}

func (o CheckboxNotePart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Indentation) {
		toSerialize["indentation"] = o.Indentation
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Checked) {
		toSerialize["checked"] = o.Checked
	}
	if !isNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !isNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableCheckboxNotePart struct {
	value *CheckboxNotePart
	isSet bool
}

func (v NullableCheckboxNotePart) Get() *CheckboxNotePart {
	return v.value
}

func (v *NullableCheckboxNotePart) Set(val *CheckboxNotePart) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckboxNotePart) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckboxNotePart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckboxNotePart(val *CheckboxNotePart) *NullableCheckboxNotePart {
	return &NullableCheckboxNotePart{value: val, isSet: true}
}

func (v NullableCheckboxNotePart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckboxNotePart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


