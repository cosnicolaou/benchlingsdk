/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// PrintersList struct for PrintersList
type PrintersList struct {
	LabelPrinters []Printer `json:"labelPrinters,omitempty"`
}

// NewPrintersList instantiates a new PrintersList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrintersList() *PrintersList {
	this := PrintersList{}
	return &this
}

// NewPrintersListWithDefaults instantiates a new PrintersList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrintersListWithDefaults() *PrintersList {
	this := PrintersList{}
	return &this
}

// GetLabelPrinters returns the LabelPrinters field value if set, zero value otherwise.
func (o *PrintersList) GetLabelPrinters() []Printer {
	if o == nil || isNil(o.LabelPrinters) {
		var ret []Printer
		return ret
	}
	return o.LabelPrinters
}

// GetLabelPrintersOk returns a tuple with the LabelPrinters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrintersList) GetLabelPrintersOk() ([]Printer, bool) {
	if o == nil || isNil(o.LabelPrinters) {
    return nil, false
	}
	return o.LabelPrinters, true
}

// HasLabelPrinters returns a boolean if a field has been set.
func (o *PrintersList) HasLabelPrinters() bool {
	if o != nil && !isNil(o.LabelPrinters) {
		return true
	}

	return false
}

// SetLabelPrinters gets a reference to the given []Printer and assigns it to the LabelPrinters field.
func (o *PrintersList) SetLabelPrinters(v []Printer) {
	o.LabelPrinters = v
}

func (o PrintersList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.LabelPrinters) {
		toSerialize["labelPrinters"] = o.LabelPrinters
	}
	return json.Marshal(toSerialize)
}

type NullablePrintersList struct {
	value *PrintersList
	isSet bool
}

func (v NullablePrintersList) Get() *PrintersList {
	return v.value
}

func (v *NullablePrintersList) Set(val *PrintersList) {
	v.value = val
	v.isSet = true
}

func (v NullablePrintersList) IsSet() bool {
	return v.isSet
}

func (v *NullablePrintersList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrintersList(val *PrintersList) *NullablePrintersList {
	return &NullablePrintersList{value: val, isSet: true}
}

func (v NullablePrintersList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrintersList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


