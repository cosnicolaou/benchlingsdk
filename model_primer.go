/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// Primer struct for Primer
type Primer struct {
	Bases *string `json:"bases,omitempty"`
	BindPosition *int32 `json:"bindPosition,omitempty"`
	Color *string `json:"color,omitempty"`
	End *int32 `json:"end,omitempty"`
	Name *string `json:"name,omitempty"`
	OligoId *string `json:"oligoId,omitempty"`
	OverhangLength *int32 `json:"overhangLength,omitempty"`
	Start *int32 `json:"start,omitempty"`
	Strand *int32 `json:"strand,omitempty"`
}

// NewPrimer instantiates a new Primer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrimer() *Primer {
	this := Primer{}
	return &this
}

// NewPrimerWithDefaults instantiates a new Primer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrimerWithDefaults() *Primer {
	this := Primer{}
	return &this
}

// GetBases returns the Bases field value if set, zero value otherwise.
func (o *Primer) GetBases() string {
	if o == nil || isNil(o.Bases) {
		var ret string
		return ret
	}
	return *o.Bases
}

// GetBasesOk returns a tuple with the Bases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Primer) GetBasesOk() (*string, bool) {
	if o == nil || isNil(o.Bases) {
    return nil, false
	}
	return o.Bases, true
}

// HasBases returns a boolean if a field has been set.
func (o *Primer) HasBases() bool {
	if o != nil && !isNil(o.Bases) {
		return true
	}

	return false
}

// SetBases gets a reference to the given string and assigns it to the Bases field.
func (o *Primer) SetBases(v string) {
	o.Bases = &v
}

// GetBindPosition returns the BindPosition field value if set, zero value otherwise.
func (o *Primer) GetBindPosition() int32 {
	if o == nil || isNil(o.BindPosition) {
		var ret int32
		return ret
	}
	return *o.BindPosition
}

// GetBindPositionOk returns a tuple with the BindPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Primer) GetBindPositionOk() (*int32, bool) {
	if o == nil || isNil(o.BindPosition) {
    return nil, false
	}
	return o.BindPosition, true
}

// HasBindPosition returns a boolean if a field has been set.
func (o *Primer) HasBindPosition() bool {
	if o != nil && !isNil(o.BindPosition) {
		return true
	}

	return false
}

// SetBindPosition gets a reference to the given int32 and assigns it to the BindPosition field.
func (o *Primer) SetBindPosition(v int32) {
	o.BindPosition = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *Primer) GetColor() string {
	if o == nil || isNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Primer) GetColorOk() (*string, bool) {
	if o == nil || isNil(o.Color) {
    return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Primer) HasColor() bool {
	if o != nil && !isNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *Primer) SetColor(v string) {
	o.Color = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Primer) GetEnd() int32 {
	if o == nil || isNil(o.End) {
		var ret int32
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Primer) GetEndOk() (*int32, bool) {
	if o == nil || isNil(o.End) {
    return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Primer) HasEnd() bool {
	if o != nil && !isNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given int32 and assigns it to the End field.
func (o *Primer) SetEnd(v int32) {
	o.End = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Primer) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Primer) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Primer) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Primer) SetName(v string) {
	o.Name = &v
}

// GetOligoId returns the OligoId field value if set, zero value otherwise.
func (o *Primer) GetOligoId() string {
	if o == nil || isNil(o.OligoId) {
		var ret string
		return ret
	}
	return *o.OligoId
}

// GetOligoIdOk returns a tuple with the OligoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Primer) GetOligoIdOk() (*string, bool) {
	if o == nil || isNil(o.OligoId) {
    return nil, false
	}
	return o.OligoId, true
}

// HasOligoId returns a boolean if a field has been set.
func (o *Primer) HasOligoId() bool {
	if o != nil && !isNil(o.OligoId) {
		return true
	}

	return false
}

// SetOligoId gets a reference to the given string and assigns it to the OligoId field.
func (o *Primer) SetOligoId(v string) {
	o.OligoId = &v
}

// GetOverhangLength returns the OverhangLength field value if set, zero value otherwise.
func (o *Primer) GetOverhangLength() int32 {
	if o == nil || isNil(o.OverhangLength) {
		var ret int32
		return ret
	}
	return *o.OverhangLength
}

// GetOverhangLengthOk returns a tuple with the OverhangLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Primer) GetOverhangLengthOk() (*int32, bool) {
	if o == nil || isNil(o.OverhangLength) {
    return nil, false
	}
	return o.OverhangLength, true
}

// HasOverhangLength returns a boolean if a field has been set.
func (o *Primer) HasOverhangLength() bool {
	if o != nil && !isNil(o.OverhangLength) {
		return true
	}

	return false
}

// SetOverhangLength gets a reference to the given int32 and assigns it to the OverhangLength field.
func (o *Primer) SetOverhangLength(v int32) {
	o.OverhangLength = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Primer) GetStart() int32 {
	if o == nil || isNil(o.Start) {
		var ret int32
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Primer) GetStartOk() (*int32, bool) {
	if o == nil || isNil(o.Start) {
    return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Primer) HasStart() bool {
	if o != nil && !isNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given int32 and assigns it to the Start field.
func (o *Primer) SetStart(v int32) {
	o.Start = &v
}

// GetStrand returns the Strand field value if set, zero value otherwise.
func (o *Primer) GetStrand() int32 {
	if o == nil || isNil(o.Strand) {
		var ret int32
		return ret
	}
	return *o.Strand
}

// GetStrandOk returns a tuple with the Strand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Primer) GetStrandOk() (*int32, bool) {
	if o == nil || isNil(o.Strand) {
    return nil, false
	}
	return o.Strand, true
}

// HasStrand returns a boolean if a field has been set.
func (o *Primer) HasStrand() bool {
	if o != nil && !isNil(o.Strand) {
		return true
	}

	return false
}

// SetStrand gets a reference to the given int32 and assigns it to the Strand field.
func (o *Primer) SetStrand(v int32) {
	o.Strand = &v
}

func (o Primer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Bases) {
		toSerialize["bases"] = o.Bases
	}
	if !isNil(o.BindPosition) {
		toSerialize["bindPosition"] = o.BindPosition
	}
	if !isNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !isNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.OligoId) {
		toSerialize["oligoId"] = o.OligoId
	}
	if !isNil(o.OverhangLength) {
		toSerialize["overhangLength"] = o.OverhangLength
	}
	if !isNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !isNil(o.Strand) {
		toSerialize["strand"] = o.Strand
	}
	return json.Marshal(toSerialize)
}

type NullablePrimer struct {
	value *Primer
	isSet bool
}

func (v NullablePrimer) Get() *Primer {
	return v.value
}

func (v *NullablePrimer) Set(val *Primer) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimer) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimer(val *Primer) *NullablePrimer {
	return &NullablePrimer{value: val, isSet: true}
}

func (v NullablePrimer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


