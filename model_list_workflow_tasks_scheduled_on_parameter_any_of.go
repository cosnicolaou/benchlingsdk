/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// ListWorkflowTasksScheduledOnParameterAnyOf the model 'ListWorkflowTasksScheduledOnParameterAnyOf'
type ListWorkflowTasksScheduledOnParameterAnyOf string

// List of listWorkflowTasks_scheduledOn_parameter_anyOf
const (
	NULL ListWorkflowTasksScheduledOnParameterAnyOf = "null"
)

// All allowed values of ListWorkflowTasksScheduledOnParameterAnyOf enum
var AllowedListWorkflowTasksScheduledOnParameterAnyOfEnumValues = []ListWorkflowTasksScheduledOnParameterAnyOf{
	"null",
}

func (v *ListWorkflowTasksScheduledOnParameterAnyOf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListWorkflowTasksScheduledOnParameterAnyOf(value)
	for _, existing := range AllowedListWorkflowTasksScheduledOnParameterAnyOfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListWorkflowTasksScheduledOnParameterAnyOf", value)
}

// NewListWorkflowTasksScheduledOnParameterAnyOfFromValue returns a pointer to a valid ListWorkflowTasksScheduledOnParameterAnyOf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListWorkflowTasksScheduledOnParameterAnyOfFromValue(v string) (*ListWorkflowTasksScheduledOnParameterAnyOf, error) {
	ev := ListWorkflowTasksScheduledOnParameterAnyOf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListWorkflowTasksScheduledOnParameterAnyOf: valid values are %v", v, AllowedListWorkflowTasksScheduledOnParameterAnyOfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListWorkflowTasksScheduledOnParameterAnyOf) IsValid() bool {
	for _, existing := range AllowedListWorkflowTasksScheduledOnParameterAnyOfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to listWorkflowTasks_scheduledOn_parameter_anyOf value
func (v ListWorkflowTasksScheduledOnParameterAnyOf) Ptr() *ListWorkflowTasksScheduledOnParameterAnyOf {
	return &v
}

type NullableListWorkflowTasksScheduledOnParameterAnyOf struct {
	value *ListWorkflowTasksScheduledOnParameterAnyOf
	isSet bool
}

func (v NullableListWorkflowTasksScheduledOnParameterAnyOf) Get() *ListWorkflowTasksScheduledOnParameterAnyOf {
	return v.value
}

func (v *NullableListWorkflowTasksScheduledOnParameterAnyOf) Set(val *ListWorkflowTasksScheduledOnParameterAnyOf) {
	v.value = val
	v.isSet = true
}

func (v NullableListWorkflowTasksScheduledOnParameterAnyOf) IsSet() bool {
	return v.isSet
}

func (v *NullableListWorkflowTasksScheduledOnParameterAnyOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListWorkflowTasksScheduledOnParameterAnyOf(val *ListWorkflowTasksScheduledOnParameterAnyOf) *NullableListWorkflowTasksScheduledOnParameterAnyOf {
	return &NullableListWorkflowTasksScheduledOnParameterAnyOf{value: val, isSet: true}
}

func (v NullableListWorkflowTasksScheduledOnParameterAnyOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListWorkflowTasksScheduledOnParameterAnyOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

