/*
Benchling API

Testing RequestsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_RequestsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test RequestsApiService BulkCreateRequestTasks", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestId string

        resp, httpRes, err := apiClient.RequestsApi.BulkCreateRequestTasks(context.Background(), requestId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RequestsApiService BulkGetRequests", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.RequestsApi.BulkGetRequests(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RequestsApiService BulkUpdateRequestTasks", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestId string

        resp, httpRes, err := apiClient.RequestsApi.BulkUpdateRequestTasks(context.Background(), requestId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RequestsApiService CreateRequest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.RequestsApi.CreateRequest(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RequestsApiService ExecuteRequestsSampleGroups", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestId string

        resp, httpRes, err := apiClient.RequestsApi.ExecuteRequestsSampleGroups(context.Background(), requestId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RequestsApiService GetRequest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestId string

        resp, httpRes, err := apiClient.RequestsApi.GetRequest(context.Background(), requestId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RequestsApiService GetRequestFulfillment", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestFulfillmentId string

        resp, httpRes, err := apiClient.RequestsApi.GetRequestFulfillment(context.Background(), requestFulfillmentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RequestsApiService GetRequestResponse", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestId string

        resp, httpRes, err := apiClient.RequestsApi.GetRequestResponse(context.Background(), requestId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RequestsApiService ListRequestFulfillments", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.RequestsApi.ListRequestFulfillments(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RequestsApiService ListRequests", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.RequestsApi.ListRequests(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test RequestsApiService PatchRequest", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var requestId string

        resp, httpRes, err := apiClient.RequestsApi.PatchRequest(context.Background(), requestId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
