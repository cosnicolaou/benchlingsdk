/*
Benchling API

Testing WorkflowTasksApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_WorkflowTasksApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test WorkflowTasksApiService ArchiveWorkflowTasks", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowTasksApi.ArchiveWorkflowTasks(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowTasksApiService BulkCopyWorkflowTasks", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowTasksApi.BulkCopyWorkflowTasks(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowTasksApiService BulkCreateWorkflowTasks", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowTasksApi.BulkCreateWorkflowTasks(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowTasksApiService BulkUpdateWorkflowTasks", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowTasksApi.BulkUpdateWorkflowTasks(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowTasksApiService CopyWorkflowTask", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var workflowTaskId string

        resp, httpRes, err := apiClient.WorkflowTasksApi.CopyWorkflowTask(context.Background(), workflowTaskId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowTasksApiService CreateWorkflowTask", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowTasksApi.CreateWorkflowTask(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowTasksApiService GetWorkflowTask", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var workflowTaskId string

        resp, httpRes, err := apiClient.WorkflowTasksApi.GetWorkflowTask(context.Background(), workflowTaskId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowTasksApiService ListWorkflowTasks", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowTasksApi.ListWorkflowTasks(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowTasksApiService UnarchiveWorkflowTasks", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowTasksApi.UnarchiveWorkflowTasks(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowTasksApiService UpdateWorkflowTask", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var workflowTaskId string

        resp, httpRes, err := apiClient.WorkflowTasksApi.UpdateWorkflowTask(context.Background(), workflowTaskId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
