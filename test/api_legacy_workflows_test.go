/*
Benchling API

Testing LegacyWorkflowsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_LegacyWorkflowsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test LegacyWorkflowsApiService ListLegacyWorkflowStageRunInputSamples", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var stageRunId string

        resp, httpRes, err := apiClient.LegacyWorkflowsApi.ListLegacyWorkflowStageRunInputSamples(context.Background(), stageRunId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsApiService ListLegacyWorkflowStageRunOutputSamples", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var stageRunId string

        resp, httpRes, err := apiClient.LegacyWorkflowsApi.ListLegacyWorkflowStageRunOutputSamples(context.Background(), stageRunId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsApiService ListLegacyWorkflowStageRunRegisteredSamples", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var stageRunId string

        resp, httpRes, err := apiClient.LegacyWorkflowsApi.ListLegacyWorkflowStageRunRegisteredSamples(context.Background(), stageRunId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsApiService ListLegacyWorkflowStageRuns", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var stageId string

        resp, httpRes, err := apiClient.LegacyWorkflowsApi.ListLegacyWorkflowStageRuns(context.Background(), stageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsApiService ListLegacyWorkflowStages", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var legacyWorkflowId string

        resp, httpRes, err := apiClient.LegacyWorkflowsApi.ListLegacyWorkflowStages(context.Background(), legacyWorkflowId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsApiService ListLegacyWorkflows", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LegacyWorkflowsApi.ListLegacyWorkflows(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsApiService UpdateLegacyWorkflowMetadata", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var legacyWorkflowId string

        resp, httpRes, err := apiClient.LegacyWorkflowsApi.UpdateLegacyWorkflowMetadata(context.Background(), legacyWorkflowId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
