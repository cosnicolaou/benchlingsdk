/*
Benchling API

Testing LabAutomationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_LabAutomationApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test LabAutomationApiService ArchiveAutomationOutputProcessors", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LabAutomationApi.ArchiveAutomationOutputProcessors(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService CreateAutomationOutputProcessor", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LabAutomationApi.CreateAutomationOutputProcessor(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService GenerateInputWithAutomationInputGenerator", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var inputGeneratorId string

        resp, httpRes, err := apiClient.LabAutomationApi.GenerateInputWithAutomationInputGenerator(context.Background(), inputGeneratorId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService GetAutomationInputGenerator", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var inputGeneratorId string

        resp, httpRes, err := apiClient.LabAutomationApi.GetAutomationInputGenerator(context.Background(), inputGeneratorId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService GetAutomationOutputProcessor", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var outputProcessorId string

        resp, httpRes, err := apiClient.LabAutomationApi.GetAutomationOutputProcessor(context.Background(), outputProcessorId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService GetLabAutomationTransform", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transformId string

        resp, httpRes, err := apiClient.LabAutomationApi.GetLabAutomationTransform(context.Background(), transformId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService ListAutomationOutputProcessors", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LabAutomationApi.ListAutomationOutputProcessors(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService ProcessOutputWithAutomationOutputProcessor", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var outputProcessorId string

        resp, httpRes, err := apiClient.LabAutomationApi.ProcessOutputWithAutomationOutputProcessor(context.Background(), outputProcessorId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService UnarchiveAutomationOutputProcessors", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LabAutomationApi.UnarchiveAutomationOutputProcessors(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService UpdateAutomationInputGenerator", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var inputGeneratorId string

        resp, httpRes, err := apiClient.LabAutomationApi.UpdateAutomationInputGenerator(context.Background(), inputGeneratorId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService UpdateAutomationOutputProcessor", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var outputProcessorId string

        resp, httpRes, err := apiClient.LabAutomationApi.UpdateAutomationOutputProcessor(context.Background(), outputProcessorId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LabAutomationApiService UpdateLabAutomationTransform", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var transformId string

        resp, httpRes, err := apiClient.LabAutomationApi.UpdateLabAutomationTransform(context.Background(), transformId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
