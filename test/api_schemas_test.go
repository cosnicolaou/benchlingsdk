/*
Benchling API

Testing SchemasApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_SchemasApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test SchemasApiService GetBatchSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetBatchSchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetBoxSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetBoxSchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetContainerSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetContainerSchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetEntitySchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetEntitySchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetEntrySchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetEntrySchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetLocationSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetLocationSchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetPlateSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetPlateSchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetRequestSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetRequestSchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetRequestTaskSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetRequestTaskSchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetResultSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetResultSchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetRunSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetRunSchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService GetWorkflowTaskSchema", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var schemaId string

        resp, httpRes, err := apiClient.SchemasApi.GetWorkflowTaskSchema(context.Background(), schemaId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListAssayResultSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListAssayResultSchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListAssayRunSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListAssayRunSchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListBatchSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListBatchSchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListBoxSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListBoxSchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListContainerSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListContainerSchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListEntitySchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListEntitySchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListEntrySchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListEntrySchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListLocationSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListLocationSchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListPlateSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListPlateSchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListRequestSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListRequestSchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListRequestTaskSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListRequestTaskSchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test SchemasApiService ListWorkflowTaskSchemas", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.SchemasApi.ListWorkflowTaskSchemas(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
