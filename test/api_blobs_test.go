/*
Benchling API

Testing BlobsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_BlobsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test BlobsApiService AbortMultipartBlob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var blobId string

        resp, httpRes, err := apiClient.BlobsApi.AbortMultipartBlob(context.Background(), blobId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BlobsApiService BulkGetBlobs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.BlobsApi.BulkGetBlobs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BlobsApiService CompleteMultipartBlob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var blobId string

        resp, httpRes, err := apiClient.BlobsApi.CompleteMultipartBlob(context.Background(), blobId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BlobsApiService CreateBlob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.BlobsApi.CreateBlob(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BlobsApiService CreateBlobPart", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var blobId string

        resp, httpRes, err := apiClient.BlobsApi.CreateBlobPart(context.Background(), blobId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BlobsApiService CreateMultipartBlob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.BlobsApi.CreateMultipartBlob(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BlobsApiService GetBlob", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var blobId string

        resp, httpRes, err := apiClient.BlobsApi.GetBlob(context.Background(), blobId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test BlobsApiService GetBlobUrl", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var blobId string

        resp, httpRes, err := apiClient.BlobsApi.GetBlobUrl(context.Background(), blobId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
