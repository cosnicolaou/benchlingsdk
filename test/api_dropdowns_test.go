/*
Benchling API

Testing DropdownsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_DropdownsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DropdownsApiService ArchiveDropdownOptions", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var dropdownId string

        resp, httpRes, err := apiClient.DropdownsApi.ArchiveDropdownOptions(context.Background(), dropdownId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DropdownsApiService CreateDropdown", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DropdownsApi.CreateDropdown(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DropdownsApiService GetDropdown", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var dropdownId string

        resp, httpRes, err := apiClient.DropdownsApi.GetDropdown(context.Background(), dropdownId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DropdownsApiService ListDropdowns", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DropdownsApi.ListDropdowns(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DropdownsApiService UnarchiveDropdownOptions", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var dropdownId string

        resp, httpRes, err := apiClient.DropdownsApi.UnarchiveDropdownOptions(context.Background(), dropdownId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DropdownsApiService UpdateDropdown", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var dropdownId string

        resp, httpRes, err := apiClient.DropdownsApi.UpdateDropdown(context.Background(), dropdownId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
