/*
Benchling API

Testing LegacyWorkflowsDeprecatedApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_LegacyWorkflowsDeprecatedApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test LegacyWorkflowsDeprecatedApiService ListStageRunInputSamples", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var stageRunId string

        resp, httpRes, err := apiClient.LegacyWorkflowsDeprecatedApi.ListStageRunInputSamples(context.Background(), stageRunId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsDeprecatedApiService ListStageRunOutputSamples", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var stageRunId string

        resp, httpRes, err := apiClient.LegacyWorkflowsDeprecatedApi.ListStageRunOutputSamples(context.Background(), stageRunId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsDeprecatedApiService ListStageRunRegisteredSamples", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var stageRunId string

        resp, httpRes, err := apiClient.LegacyWorkflowsDeprecatedApi.ListStageRunRegisteredSamples(context.Background(), stageRunId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsDeprecatedApiService ListWorkflowStageRuns", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var stageId string

        resp, httpRes, err := apiClient.LegacyWorkflowsDeprecatedApi.ListWorkflowStageRuns(context.Background(), stageId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsDeprecatedApiService ListWorkflowStages", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var workflowId string

        resp, httpRes, err := apiClient.LegacyWorkflowsDeprecatedApi.ListWorkflowStages(context.Background(), workflowId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsDeprecatedApiService ListWorkflows", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LegacyWorkflowsDeprecatedApi.ListWorkflows(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LegacyWorkflowsDeprecatedApiService UpdateWorkflowMetadata", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var workflowId string

        resp, httpRes, err := apiClient.LegacyWorkflowsDeprecatedApi.UpdateWorkflowMetadata(context.Background(), workflowId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
