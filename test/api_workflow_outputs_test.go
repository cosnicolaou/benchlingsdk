/*
Benchling API

Testing WorkflowOutputsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_WorkflowOutputsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test WorkflowOutputsApiService ArchiveWorkflowOutputs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowOutputsApi.ArchiveWorkflowOutputs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowOutputsApiService BulkCreateWorkflowOutputs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowOutputsApi.BulkCreateWorkflowOutputs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowOutputsApiService BulkUpdateWorkflowOutputs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowOutputsApi.BulkUpdateWorkflowOutputs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowOutputsApiService CreateWorkflowOutput", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowOutputsApi.CreateWorkflowOutput(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowOutputsApiService GetWorkflowOutput", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var workflowOutputId string

        resp, httpRes, err := apiClient.WorkflowOutputsApi.GetWorkflowOutput(context.Background(), workflowOutputId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowOutputsApiService ListWorkflowOutputs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowOutputsApi.ListWorkflowOutputs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowOutputsApiService UnarchiveWorkflowOutputs", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.WorkflowOutputsApi.UnarchiveWorkflowOutputs(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test WorkflowOutputsApiService UpdateWorkflowOutput", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var workflowOutputId string

        resp, httpRes, err := apiClient.WorkflowOutputsApi.UpdateWorkflowOutput(context.Background(), workflowOutputId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
