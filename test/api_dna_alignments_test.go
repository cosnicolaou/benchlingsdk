/*
Benchling API

Testing DNAAlignmentsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_DNAAlignmentsApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test DNAAlignmentsApiService CreateDnaConsensusAlignment", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DNAAlignmentsApi.CreateDnaConsensusAlignment(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DNAAlignmentsApiService CreateDnaTemplateAlignment", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DNAAlignmentsApi.CreateDnaTemplateAlignment(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DNAAlignmentsApiService DeleteDNAAlignment", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var dnaAlignmentId string

        resp, httpRes, err := apiClient.DNAAlignmentsApi.DeleteDNAAlignment(context.Background(), dnaAlignmentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DNAAlignmentsApiService GetDNAAlignment", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var dnaAlignmentId string

        resp, httpRes, err := apiClient.DNAAlignmentsApi.GetDNAAlignment(context.Background(), dnaAlignmentId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test DNAAlignmentsApiService ListDNAAlignments", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.DNAAlignmentsApi.ListDNAAlignments(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
