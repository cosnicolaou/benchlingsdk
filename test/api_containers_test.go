/*
Benchling API

Testing ContainersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_ContainersApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ContainersApiService ArchiveContainers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.ArchiveContainers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService BulkCreateContainers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.BulkCreateContainers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService BulkGetContainers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.BulkGetContainers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService BulkUpdateContainers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.BulkUpdateContainers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService CheckinContainers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.CheckinContainers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService CheckoutContainers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.CheckoutContainers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService CreateContainer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.CreateContainer(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService DeleteContainerContent", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerId string
        var containableId string

        resp, httpRes, err := apiClient.ContainersApi.DeleteContainerContent(context.Background(), containerId, containableId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService GetContainer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerId string

        resp, httpRes, err := apiClient.ContainersApi.GetContainer(context.Background(), containerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService GetContainerContent", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerId string
        var containableId string

        resp, httpRes, err := apiClient.ContainersApi.GetContainerContent(context.Background(), containerId, containableId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService ListContainerContents", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerId string

        resp, httpRes, err := apiClient.ContainersApi.ListContainerContents(context.Background(), containerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService ListContainers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.ListContainers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService PrintLabels", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.PrintLabels(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService ReserveContainers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.ReserveContainers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService TransferIntoContainer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var destinationContainerId string

        resp, httpRes, err := apiClient.ContainersApi.TransferIntoContainer(context.Background(), destinationContainerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService TransferIntoContainers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.TransferIntoContainers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService UnarchiveContainers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ContainersApi.UnarchiveContainers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService UpdateContainer", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerId string

        resp, httpRes, err := apiClient.ContainersApi.UpdateContainer(context.Background(), containerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ContainersApiService UpdateContainerContent", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var containerId string
        var containableId string

        resp, httpRes, err := apiClient.ContainersApi.UpdateContainerContent(context.Background(), containerId, containableId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
