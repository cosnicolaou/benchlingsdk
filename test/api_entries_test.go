/*
Benchling API

Testing EntriesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package benchlingsdk

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_benchlingsdk_EntriesApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test EntriesApiService ArchiveEntries", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EntriesApi.ArchiveEntries(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EntriesApiService BulkGetEntries", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EntriesApi.BulkGetEntries(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EntriesApiService CreateEntry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EntriesApi.CreateEntry(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EntriesApiService GetEntry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var entryId string

        resp, httpRes, err := apiClient.EntriesApi.GetEntry(context.Background(), entryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EntriesApiService GetEntryTemplate", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var entryTemplateId string

        resp, httpRes, err := apiClient.EntriesApi.GetEntryTemplate(context.Background(), entryTemplateId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EntriesApiService GetExternalFileMetadata", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var entryId string
        var externalFileId string

        resp, httpRes, err := apiClient.EntriesApi.GetExternalFileMetadata(context.Background(), entryId, externalFileId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EntriesApiService ListEntries", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EntriesApi.ListEntries(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EntriesApiService ListEntryTemplates", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EntriesApi.ListEntryTemplates(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EntriesApiService UnarchiveEntries", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.EntriesApi.UnarchiveEntries(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test EntriesApiService UpdateEntry", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var entryId string

        resp, httpRes, err := apiClient.EntriesApi.UpdateEntry(context.Background(), entryId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
