/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// InaccessibleResource struct for InaccessibleResource
type InaccessibleResource struct {
	InaccessibleId *string `json:"inaccessibleId,omitempty"`
	// The type of this inaccessible item. Example values: \"custom_entity\", \"container\", \"plate\", \"dna_sequence\" 
	Type *string `json:"type,omitempty"`
}

// NewInaccessibleResource instantiates a new InaccessibleResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInaccessibleResource() *InaccessibleResource {
	this := InaccessibleResource{}
	return &this
}

// NewInaccessibleResourceWithDefaults instantiates a new InaccessibleResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInaccessibleResourceWithDefaults() *InaccessibleResource {
	this := InaccessibleResource{}
	return &this
}

// GetInaccessibleId returns the InaccessibleId field value if set, zero value otherwise.
func (o *InaccessibleResource) GetInaccessibleId() string {
	if o == nil || isNil(o.InaccessibleId) {
		var ret string
		return ret
	}
	return *o.InaccessibleId
}

// GetInaccessibleIdOk returns a tuple with the InaccessibleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InaccessibleResource) GetInaccessibleIdOk() (*string, bool) {
	if o == nil || isNil(o.InaccessibleId) {
    return nil, false
	}
	return o.InaccessibleId, true
}

// HasInaccessibleId returns a boolean if a field has been set.
func (o *InaccessibleResource) HasInaccessibleId() bool {
	if o != nil && !isNil(o.InaccessibleId) {
		return true
	}

	return false
}

// SetInaccessibleId gets a reference to the given string and assigns it to the InaccessibleId field.
func (o *InaccessibleResource) SetInaccessibleId(v string) {
	o.InaccessibleId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *InaccessibleResource) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InaccessibleResource) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *InaccessibleResource) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *InaccessibleResource) SetType(v string) {
	o.Type = &v
}

func (o InaccessibleResource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InaccessibleId) {
		toSerialize["inaccessibleId"] = o.InaccessibleId
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableInaccessibleResource struct {
	value *InaccessibleResource
	isSet bool
}

func (v NullableInaccessibleResource) Get() *InaccessibleResource {
	return v.value
}

func (v *NullableInaccessibleResource) Set(val *InaccessibleResource) {
	v.value = val
	v.isSet = true
}

func (v NullableInaccessibleResource) IsSet() bool {
	return v.isSet
}

func (v *NullableInaccessibleResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInaccessibleResource(val *InaccessibleResource) *NullableInaccessibleResource {
	return &NullableInaccessibleResource{value: val, isSet: true}
}

func (v NullableInaccessibleResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInaccessibleResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


