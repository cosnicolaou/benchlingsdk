/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntryExternalFile The ExternalFile resource stores metadata about the file. The actual original file can be downloaded by using the 'downloadURL' property. 
type EntryExternalFile struct {
	// A short-lived URL that can be used to download the original file. 
	DownloadURL *string `json:"downloadURL,omitempty"`
	// UNIX timestamp when downloadURL expires.
	ExpiresAt *int32 `json:"expiresAt,omitempty"`
	// ID of the external file
	Id *string `json:"id,omitempty"`
	// Size, in bytes, of the external file
	Size *int32 `json:"size,omitempty"`
}

// NewEntryExternalFile instantiates a new EntryExternalFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryExternalFile() *EntryExternalFile {
	this := EntryExternalFile{}
	return &this
}

// NewEntryExternalFileWithDefaults instantiates a new EntryExternalFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryExternalFileWithDefaults() *EntryExternalFile {
	this := EntryExternalFile{}
	return &this
}

// GetDownloadURL returns the DownloadURL field value if set, zero value otherwise.
func (o *EntryExternalFile) GetDownloadURL() string {
	if o == nil || isNil(o.DownloadURL) {
		var ret string
		return ret
	}
	return *o.DownloadURL
}

// GetDownloadURLOk returns a tuple with the DownloadURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryExternalFile) GetDownloadURLOk() (*string, bool) {
	if o == nil || isNil(o.DownloadURL) {
    return nil, false
	}
	return o.DownloadURL, true
}

// HasDownloadURL returns a boolean if a field has been set.
func (o *EntryExternalFile) HasDownloadURL() bool {
	if o != nil && !isNil(o.DownloadURL) {
		return true
	}

	return false
}

// SetDownloadURL gets a reference to the given string and assigns it to the DownloadURL field.
func (o *EntryExternalFile) SetDownloadURL(v string) {
	o.DownloadURL = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *EntryExternalFile) GetExpiresAt() int32 {
	if o == nil || isNil(o.ExpiresAt) {
		var ret int32
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryExternalFile) GetExpiresAtOk() (*int32, bool) {
	if o == nil || isNil(o.ExpiresAt) {
    return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *EntryExternalFile) HasExpiresAt() bool {
	if o != nil && !isNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given int32 and assigns it to the ExpiresAt field.
func (o *EntryExternalFile) SetExpiresAt(v int32) {
	o.ExpiresAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EntryExternalFile) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryExternalFile) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EntryExternalFile) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EntryExternalFile) SetId(v string) {
	o.Id = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *EntryExternalFile) GetSize() int32 {
	if o == nil || isNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryExternalFile) GetSizeOk() (*int32, bool) {
	if o == nil || isNil(o.Size) {
    return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *EntryExternalFile) HasSize() bool {
	if o != nil && !isNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *EntryExternalFile) SetSize(v int32) {
	o.Size = &v
}

func (o EntryExternalFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DownloadURL) {
		toSerialize["downloadURL"] = o.DownloadURL
	}
	if !isNil(o.ExpiresAt) {
		toSerialize["expiresAt"] = o.ExpiresAt
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableEntryExternalFile struct {
	value *EntryExternalFile
	isSet bool
}

func (v NullableEntryExternalFile) Get() *EntryExternalFile {
	return v.value
}

func (v *NullableEntryExternalFile) Set(val *EntryExternalFile) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryExternalFile) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryExternalFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryExternalFile(val *EntryExternalFile) *NullableEntryExternalFile {
	return &NullableEntryExternalFile{value: val, isSet: true}
}

func (v NullableEntryExternalFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryExternalFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


