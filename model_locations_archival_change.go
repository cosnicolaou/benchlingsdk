/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// LocationsArchivalChange IDs of all items that were archived or unarchived, grouped by resource type. This includes the IDs of locations along with any IDs of locations, boxes, plates, containers that were archived. 
type LocationsArchivalChange struct {
	BoxIds []string `json:"boxIds,omitempty"`
	ContainerIds []string `json:"containerIds,omitempty"`
	LocationIds []string `json:"locationIds,omitempty"`
	PlateIds []string `json:"plateIds,omitempty"`
}

// NewLocationsArchivalChange instantiates a new LocationsArchivalChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationsArchivalChange() *LocationsArchivalChange {
	this := LocationsArchivalChange{}
	return &this
}

// NewLocationsArchivalChangeWithDefaults instantiates a new LocationsArchivalChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationsArchivalChangeWithDefaults() *LocationsArchivalChange {
	this := LocationsArchivalChange{}
	return &this
}

// GetBoxIds returns the BoxIds field value if set, zero value otherwise.
func (o *LocationsArchivalChange) GetBoxIds() []string {
	if o == nil || isNil(o.BoxIds) {
		var ret []string
		return ret
	}
	return o.BoxIds
}

// GetBoxIdsOk returns a tuple with the BoxIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsArchivalChange) GetBoxIdsOk() ([]string, bool) {
	if o == nil || isNil(o.BoxIds) {
    return nil, false
	}
	return o.BoxIds, true
}

// HasBoxIds returns a boolean if a field has been set.
func (o *LocationsArchivalChange) HasBoxIds() bool {
	if o != nil && !isNil(o.BoxIds) {
		return true
	}

	return false
}

// SetBoxIds gets a reference to the given []string and assigns it to the BoxIds field.
func (o *LocationsArchivalChange) SetBoxIds(v []string) {
	o.BoxIds = v
}

// GetContainerIds returns the ContainerIds field value if set, zero value otherwise.
func (o *LocationsArchivalChange) GetContainerIds() []string {
	if o == nil || isNil(o.ContainerIds) {
		var ret []string
		return ret
	}
	return o.ContainerIds
}

// GetContainerIdsOk returns a tuple with the ContainerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsArchivalChange) GetContainerIdsOk() ([]string, bool) {
	if o == nil || isNil(o.ContainerIds) {
    return nil, false
	}
	return o.ContainerIds, true
}

// HasContainerIds returns a boolean if a field has been set.
func (o *LocationsArchivalChange) HasContainerIds() bool {
	if o != nil && !isNil(o.ContainerIds) {
		return true
	}

	return false
}

// SetContainerIds gets a reference to the given []string and assigns it to the ContainerIds field.
func (o *LocationsArchivalChange) SetContainerIds(v []string) {
	o.ContainerIds = v
}

// GetLocationIds returns the LocationIds field value if set, zero value otherwise.
func (o *LocationsArchivalChange) GetLocationIds() []string {
	if o == nil || isNil(o.LocationIds) {
		var ret []string
		return ret
	}
	return o.LocationIds
}

// GetLocationIdsOk returns a tuple with the LocationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsArchivalChange) GetLocationIdsOk() ([]string, bool) {
	if o == nil || isNil(o.LocationIds) {
    return nil, false
	}
	return o.LocationIds, true
}

// HasLocationIds returns a boolean if a field has been set.
func (o *LocationsArchivalChange) HasLocationIds() bool {
	if o != nil && !isNil(o.LocationIds) {
		return true
	}

	return false
}

// SetLocationIds gets a reference to the given []string and assigns it to the LocationIds field.
func (o *LocationsArchivalChange) SetLocationIds(v []string) {
	o.LocationIds = v
}

// GetPlateIds returns the PlateIds field value if set, zero value otherwise.
func (o *LocationsArchivalChange) GetPlateIds() []string {
	if o == nil || isNil(o.PlateIds) {
		var ret []string
		return ret
	}
	return o.PlateIds
}

// GetPlateIdsOk returns a tuple with the PlateIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsArchivalChange) GetPlateIdsOk() ([]string, bool) {
	if o == nil || isNil(o.PlateIds) {
    return nil, false
	}
	return o.PlateIds, true
}

// HasPlateIds returns a boolean if a field has been set.
func (o *LocationsArchivalChange) HasPlateIds() bool {
	if o != nil && !isNil(o.PlateIds) {
		return true
	}

	return false
}

// SetPlateIds gets a reference to the given []string and assigns it to the PlateIds field.
func (o *LocationsArchivalChange) SetPlateIds(v []string) {
	o.PlateIds = v
}

func (o LocationsArchivalChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BoxIds) {
		toSerialize["boxIds"] = o.BoxIds
	}
	if !isNil(o.ContainerIds) {
		toSerialize["containerIds"] = o.ContainerIds
	}
	if !isNil(o.LocationIds) {
		toSerialize["locationIds"] = o.LocationIds
	}
	if !isNil(o.PlateIds) {
		toSerialize["plateIds"] = o.PlateIds
	}
	return json.Marshal(toSerialize)
}

type NullableLocationsArchivalChange struct {
	value *LocationsArchivalChange
	isSet bool
}

func (v NullableLocationsArchivalChange) Get() *LocationsArchivalChange {
	return v.value
}

func (v *NullableLocationsArchivalChange) Set(val *LocationsArchivalChange) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationsArchivalChange) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationsArchivalChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationsArchivalChange(val *LocationsArchivalChange) *NullableLocationsArchivalChange {
	return &NullableLocationsArchivalChange{value: val, isSet: true}
}

func (v NullableLocationsArchivalChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationsArchivalChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


