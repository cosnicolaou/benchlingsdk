/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntryTable Actual tabular data with rows and columns of text on the note. 
type EntryTable struct {
	// Array of strings, with one item per column. Defaults to null, if the user is using the default, but is set if the user has given a custom name to the column. 
	ColumnLabels []*string `json:"columnLabels,omitempty"`
	// Name of the table - defaults to e.g. Table1 but can be renamed. 
	Name *string `json:"name,omitempty"`
	// Array of row objects.
	Rows []EntryTableRow `json:"rows,omitempty"`
}

// NewEntryTable instantiates a new EntryTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryTable() *EntryTable {
	this := EntryTable{}
	return &this
}

// NewEntryTableWithDefaults instantiates a new EntryTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryTableWithDefaults() *EntryTable {
	this := EntryTable{}
	return &this
}

// GetColumnLabels returns the ColumnLabels field value if set, zero value otherwise.
func (o *EntryTable) GetColumnLabels() []*string {
	if o == nil || isNil(o.ColumnLabels) {
		var ret []*string
		return ret
	}
	return o.ColumnLabels
}

// GetColumnLabelsOk returns a tuple with the ColumnLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryTable) GetColumnLabelsOk() ([]*string, bool) {
	if o == nil || isNil(o.ColumnLabels) {
    return nil, false
	}
	return o.ColumnLabels, true
}

// HasColumnLabels returns a boolean if a field has been set.
func (o *EntryTable) HasColumnLabels() bool {
	if o != nil && !isNil(o.ColumnLabels) {
		return true
	}

	return false
}

// SetColumnLabels gets a reference to the given []*string and assigns it to the ColumnLabels field.
func (o *EntryTable) SetColumnLabels(v []*string) {
	o.ColumnLabels = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EntryTable) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryTable) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EntryTable) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EntryTable) SetName(v string) {
	o.Name = &v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *EntryTable) GetRows() []EntryTableRow {
	if o == nil || isNil(o.Rows) {
		var ret []EntryTableRow
		return ret
	}
	return o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryTable) GetRowsOk() ([]EntryTableRow, bool) {
	if o == nil || isNil(o.Rows) {
    return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *EntryTable) HasRows() bool {
	if o != nil && !isNil(o.Rows) {
		return true
	}

	return false
}

// SetRows gets a reference to the given []EntryTableRow and assigns it to the Rows field.
func (o *EntryTable) SetRows(v []EntryTableRow) {
	o.Rows = v
}

func (o EntryTable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ColumnLabels) {
		toSerialize["columnLabels"] = o.ColumnLabels
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Rows) {
		toSerialize["rows"] = o.Rows
	}
	return json.Marshal(toSerialize)
}

type NullableEntryTable struct {
	value *EntryTable
	isSet bool
}

func (v NullableEntryTable) Get() *EntryTable {
	return v.value
}

func (v *NullableEntryTable) Set(val *EntryTable) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryTable) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryTable(val *EntryTable) *NullableEntryTable {
	return &NullableEntryTable{value: val, isSet: true}
}

func (v NullableEntryTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


