/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AssayRunsArchivalChange IDs of all Assay Runs that were archived / unarchived. 
type AssayRunsArchivalChange struct {
	AssayRunIds []string `json:"assayRunIds,omitempty"`
}

// NewAssayRunsArchivalChange instantiates a new AssayRunsArchivalChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssayRunsArchivalChange() *AssayRunsArchivalChange {
	this := AssayRunsArchivalChange{}
	return &this
}

// NewAssayRunsArchivalChangeWithDefaults instantiates a new AssayRunsArchivalChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssayRunsArchivalChangeWithDefaults() *AssayRunsArchivalChange {
	this := AssayRunsArchivalChange{}
	return &this
}

// GetAssayRunIds returns the AssayRunIds field value if set, zero value otherwise.
func (o *AssayRunsArchivalChange) GetAssayRunIds() []string {
	if o == nil || isNil(o.AssayRunIds) {
		var ret []string
		return ret
	}
	return o.AssayRunIds
}

// GetAssayRunIdsOk returns a tuple with the AssayRunIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunsArchivalChange) GetAssayRunIdsOk() ([]string, bool) {
	if o == nil || isNil(o.AssayRunIds) {
    return nil, false
	}
	return o.AssayRunIds, true
}

// HasAssayRunIds returns a boolean if a field has been set.
func (o *AssayRunsArchivalChange) HasAssayRunIds() bool {
	if o != nil && !isNil(o.AssayRunIds) {
		return true
	}

	return false
}

// SetAssayRunIds gets a reference to the given []string and assigns it to the AssayRunIds field.
func (o *AssayRunsArchivalChange) SetAssayRunIds(v []string) {
	o.AssayRunIds = v
}

func (o AssayRunsArchivalChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AssayRunIds) {
		toSerialize["assayRunIds"] = o.AssayRunIds
	}
	return json.Marshal(toSerialize)
}

type NullableAssayRunsArchivalChange struct {
	value *AssayRunsArchivalChange
	isSet bool
}

func (v NullableAssayRunsArchivalChange) Get() *AssayRunsArchivalChange {
	return v.value
}

func (v *NullableAssayRunsArchivalChange) Set(val *AssayRunsArchivalChange) {
	v.value = val
	v.isSet = true
}

func (v NullableAssayRunsArchivalChange) IsSet() bool {
	return v.isSet
}

func (v *NullableAssayRunsArchivalChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssayRunsArchivalChange(val *AssayRunsArchivalChange) *NullableAssayRunsArchivalChange {
	return &NullableAssayRunsArchivalChange{value: val, isSet: true}
}

func (v NullableAssayRunsArchivalChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssayRunsArchivalChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


