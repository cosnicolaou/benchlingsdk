/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntryTableCell struct for EntryTableCell
type EntryTableCell struct {
	Link *EntryTableCellLink `json:"link,omitempty"`
	// The textual content of the cell. If the cell was originally a formula, this will be the evaluated version of the formula. 
	Text *string `json:"text,omitempty"`
}

// NewEntryTableCell instantiates a new EntryTableCell object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryTableCell() *EntryTableCell {
	this := EntryTableCell{}
	return &this
}

// NewEntryTableCellWithDefaults instantiates a new EntryTableCell object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryTableCellWithDefaults() *EntryTableCell {
	this := EntryTableCell{}
	return &this
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *EntryTableCell) GetLink() EntryTableCellLink {
	if o == nil || isNil(o.Link) {
		var ret EntryTableCellLink
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryTableCell) GetLinkOk() (*EntryTableCellLink, bool) {
	if o == nil || isNil(o.Link) {
    return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *EntryTableCell) HasLink() bool {
	if o != nil && !isNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given EntryTableCellLink and assigns it to the Link field.
func (o *EntryTableCell) SetLink(v EntryTableCellLink) {
	o.Link = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *EntryTableCell) GetText() string {
	if o == nil || isNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryTableCell) GetTextOk() (*string, bool) {
	if o == nil || isNil(o.Text) {
    return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *EntryTableCell) HasText() bool {
	if o != nil && !isNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *EntryTableCell) SetText(v string) {
	o.Text = &v
}

func (o EntryTableCell) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !isNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableEntryTableCell struct {
	value *EntryTableCell
	isSet bool
}

func (v NullableEntryTableCell) Get() *EntryTableCell {
	return v.value
}

func (v *NullableEntryTableCell) Set(val *EntryTableCell) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryTableCell) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryTableCell) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryTableCell(val *EntryTableCell) *NullableEntryTableCell {
	return &NullableEntryTableCell{value: val, isSet: true}
}

func (v NullableEntryTableCell) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryTableCell) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


