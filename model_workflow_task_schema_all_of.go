/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// WorkflowTaskSchemaAllOf struct for WorkflowTaskSchemaAllOf
type WorkflowTaskSchemaAllOf struct {
	// The method by which instances of this schema are executed
	ExecutionType *string `json:"executionType,omitempty"`
}

// NewWorkflowTaskSchemaAllOf instantiates a new WorkflowTaskSchemaAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowTaskSchemaAllOf() *WorkflowTaskSchemaAllOf {
	this := WorkflowTaskSchemaAllOf{}
	return &this
}

// NewWorkflowTaskSchemaAllOfWithDefaults instantiates a new WorkflowTaskSchemaAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowTaskSchemaAllOfWithDefaults() *WorkflowTaskSchemaAllOf {
	this := WorkflowTaskSchemaAllOf{}
	return &this
}

// GetExecutionType returns the ExecutionType field value if set, zero value otherwise.
func (o *WorkflowTaskSchemaAllOf) GetExecutionType() string {
	if o == nil || isNil(o.ExecutionType) {
		var ret string
		return ret
	}
	return *o.ExecutionType
}

// GetExecutionTypeOk returns a tuple with the ExecutionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskSchemaAllOf) GetExecutionTypeOk() (*string, bool) {
	if o == nil || isNil(o.ExecutionType) {
    return nil, false
	}
	return o.ExecutionType, true
}

// HasExecutionType returns a boolean if a field has been set.
func (o *WorkflowTaskSchemaAllOf) HasExecutionType() bool {
	if o != nil && !isNil(o.ExecutionType) {
		return true
	}

	return false
}

// SetExecutionType gets a reference to the given string and assigns it to the ExecutionType field.
func (o *WorkflowTaskSchemaAllOf) SetExecutionType(v string) {
	o.ExecutionType = &v
}

func (o WorkflowTaskSchemaAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExecutionType) {
		toSerialize["executionType"] = o.ExecutionType
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowTaskSchemaAllOf struct {
	value *WorkflowTaskSchemaAllOf
	isSet bool
}

func (v NullableWorkflowTaskSchemaAllOf) Get() *WorkflowTaskSchemaAllOf {
	return v.value
}

func (v *NullableWorkflowTaskSchemaAllOf) Set(val *WorkflowTaskSchemaAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowTaskSchemaAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowTaskSchemaAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowTaskSchemaAllOf(val *WorkflowTaskSchemaAllOf) *NullableWorkflowTaskSchemaAllOf {
	return &NullableWorkflowTaskSchemaAllOf{value: val, isSet: true}
}

func (v NullableWorkflowTaskSchemaAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowTaskSchemaAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


