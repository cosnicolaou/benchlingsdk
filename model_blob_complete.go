/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BlobComplete struct for BlobComplete
type BlobComplete struct {
	Parts []BlobPart `json:"parts,omitempty"`
}

// NewBlobComplete instantiates a new BlobComplete object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlobComplete() *BlobComplete {
	this := BlobComplete{}
	return &this
}

// NewBlobCompleteWithDefaults instantiates a new BlobComplete object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlobCompleteWithDefaults() *BlobComplete {
	this := BlobComplete{}
	return &this
}

// GetParts returns the Parts field value if set, zero value otherwise.
func (o *BlobComplete) GetParts() []BlobPart {
	if o == nil || isNil(o.Parts) {
		var ret []BlobPart
		return ret
	}
	return o.Parts
}

// GetPartsOk returns a tuple with the Parts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobComplete) GetPartsOk() ([]BlobPart, bool) {
	if o == nil || isNil(o.Parts) {
    return nil, false
	}
	return o.Parts, true
}

// HasParts returns a boolean if a field has been set.
func (o *BlobComplete) HasParts() bool {
	if o != nil && !isNil(o.Parts) {
		return true
	}

	return false
}

// SetParts gets a reference to the given []BlobPart and assigns it to the Parts field.
func (o *BlobComplete) SetParts(v []BlobPart) {
	o.Parts = v
}

func (o BlobComplete) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Parts) {
		toSerialize["parts"] = o.Parts
	}
	return json.Marshal(toSerialize)
}

type NullableBlobComplete struct {
	value *BlobComplete
	isSet bool
}

func (v NullableBlobComplete) Get() *BlobComplete {
	return v.value
}

func (v *NullableBlobComplete) Set(val *BlobComplete) {
	v.value = val
	v.isSet = true
}

func (v NullableBlobComplete) IsSet() bool {
	return v.isSet
}

func (v *NullableBlobComplete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlobComplete(val *BlobComplete) *NullableBlobComplete {
	return &NullableBlobComplete{value: val, isSet: true}
}

func (v NullableBlobComplete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlobComplete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


