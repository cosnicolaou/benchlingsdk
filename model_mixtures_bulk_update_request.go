/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// MixturesBulkUpdateRequest struct for MixturesBulkUpdateRequest
type MixturesBulkUpdateRequest struct {
	Mixtures []MixtureBulkUpdate `json:"mixtures,omitempty"`
}

// NewMixturesBulkUpdateRequest instantiates a new MixturesBulkUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixturesBulkUpdateRequest() *MixturesBulkUpdateRequest {
	this := MixturesBulkUpdateRequest{}
	return &this
}

// NewMixturesBulkUpdateRequestWithDefaults instantiates a new MixturesBulkUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixturesBulkUpdateRequestWithDefaults() *MixturesBulkUpdateRequest {
	this := MixturesBulkUpdateRequest{}
	return &this
}

// GetMixtures returns the Mixtures field value if set, zero value otherwise.
func (o *MixturesBulkUpdateRequest) GetMixtures() []MixtureBulkUpdate {
	if o == nil || isNil(o.Mixtures) {
		var ret []MixtureBulkUpdate
		return ret
	}
	return o.Mixtures
}

// GetMixturesOk returns a tuple with the Mixtures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixturesBulkUpdateRequest) GetMixturesOk() ([]MixtureBulkUpdate, bool) {
	if o == nil || isNil(o.Mixtures) {
    return nil, false
	}
	return o.Mixtures, true
}

// HasMixtures returns a boolean if a field has been set.
func (o *MixturesBulkUpdateRequest) HasMixtures() bool {
	if o != nil && !isNil(o.Mixtures) {
		return true
	}

	return false
}

// SetMixtures gets a reference to the given []MixtureBulkUpdate and assigns it to the Mixtures field.
func (o *MixturesBulkUpdateRequest) SetMixtures(v []MixtureBulkUpdate) {
	o.Mixtures = v
}

func (o MixturesBulkUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Mixtures) {
		toSerialize["mixtures"] = o.Mixtures
	}
	return json.Marshal(toSerialize)
}

type NullableMixturesBulkUpdateRequest struct {
	value *MixturesBulkUpdateRequest
	isSet bool
}

func (v NullableMixturesBulkUpdateRequest) Get() *MixturesBulkUpdateRequest {
	return v.value
}

func (v *NullableMixturesBulkUpdateRequest) Set(val *MixturesBulkUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMixturesBulkUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMixturesBulkUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixturesBulkUpdateRequest(val *MixturesBulkUpdateRequest) *NullableMixturesBulkUpdateRequest {
	return &NullableMixturesBulkUpdateRequest{value: val, isSet: true}
}

func (v NullableMixturesBulkUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixturesBulkUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


