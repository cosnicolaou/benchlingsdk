/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// EntityArchiveReason The reason for archiving the provided entities. Accepted reasons may differ based on tenant configuration. 
type EntityArchiveReason string

// List of EntityArchiveReason
const (
	MADE_IN_ERROR EntityArchiveReason = "Made in error"
	RETIRED EntityArchiveReason = "Retired"
	EXPENDED EntityArchiveReason = "Expended"
	SHIPPED EntityArchiveReason = "Shipped"
	CONTAMINATED EntityArchiveReason = "Contaminated"
	EXPIRED EntityArchiveReason = "Expired"
	MISSING EntityArchiveReason = "Missing"
	OTHER EntityArchiveReason = "Other"
)

// All allowed values of EntityArchiveReason enum
var AllowedEntityArchiveReasonEnumValues = []EntityArchiveReason{
	"Made in error",
	"Retired",
	"Expended",
	"Shipped",
	"Contaminated",
	"Expired",
	"Missing",
	"Other",
}

func (v *EntityArchiveReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntityArchiveReason(value)
	for _, existing := range AllowedEntityArchiveReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntityArchiveReason", value)
}

// NewEntityArchiveReasonFromValue returns a pointer to a valid EntityArchiveReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntityArchiveReasonFromValue(v string) (*EntityArchiveReason, error) {
	ev := EntityArchiveReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntityArchiveReason: valid values are %v", v, AllowedEntityArchiveReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntityArchiveReason) IsValid() bool {
	for _, existing := range AllowedEntityArchiveReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EntityArchiveReason value
func (v EntityArchiveReason) Ptr() *EntityArchiveReason {
	return &v
}

type NullableEntityArchiveReason struct {
	value *EntityArchiveReason
	isSet bool
}

func (v NullableEntityArchiveReason) Get() *EntityArchiveReason {
	return v.value
}

func (v *NullableEntityArchiveReason) Set(val *EntityArchiveReason) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityArchiveReason) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityArchiveReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityArchiveReason(val *EntityArchiveReason) *NullableEntityArchiveReason {
	return &NullableEntityArchiveReason{value: val, isSet: true}
}

func (v NullableEntityArchiveReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityArchiveReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

