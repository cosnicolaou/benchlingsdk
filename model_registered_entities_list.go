/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// RegisteredEntitiesList struct for RegisteredEntitiesList
type RegisteredEntitiesList struct {
	Entities []RegisteredEntitiesListEntitiesInner `json:"entities,omitempty"`
}

// NewRegisteredEntitiesList instantiates a new RegisteredEntitiesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredEntitiesList() *RegisteredEntitiesList {
	this := RegisteredEntitiesList{}
	return &this
}

// NewRegisteredEntitiesListWithDefaults instantiates a new RegisteredEntitiesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredEntitiesListWithDefaults() *RegisteredEntitiesList {
	this := RegisteredEntitiesList{}
	return &this
}

// GetEntities returns the Entities field value if set, zero value otherwise.
func (o *RegisteredEntitiesList) GetEntities() []RegisteredEntitiesListEntitiesInner {
	if o == nil || isNil(o.Entities) {
		var ret []RegisteredEntitiesListEntitiesInner
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredEntitiesList) GetEntitiesOk() ([]RegisteredEntitiesListEntitiesInner, bool) {
	if o == nil || isNil(o.Entities) {
    return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *RegisteredEntitiesList) HasEntities() bool {
	if o != nil && !isNil(o.Entities) {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []RegisteredEntitiesListEntitiesInner and assigns it to the Entities field.
func (o *RegisteredEntitiesList) SetEntities(v []RegisteredEntitiesListEntitiesInner) {
	o.Entities = v
}

func (o RegisteredEntitiesList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Entities) {
		toSerialize["entities"] = o.Entities
	}
	return json.Marshal(toSerialize)
}

type NullableRegisteredEntitiesList struct {
	value *RegisteredEntitiesList
	isSet bool
}

func (v NullableRegisteredEntitiesList) Get() *RegisteredEntitiesList {
	return v.value
}

func (v *NullableRegisteredEntitiesList) Set(val *RegisteredEntitiesList) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredEntitiesList) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredEntitiesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredEntitiesList(val *RegisteredEntitiesList) *NullableRegisteredEntitiesList {
	return &NullableRegisteredEntitiesList{value: val, isSet: true}
}

func (v NullableRegisteredEntitiesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredEntitiesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


