/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AutomationFile struct for AutomationFile
type AutomationFile struct {
	AssayRunId *string `json:"assayRunId,omitempty"`
	AutomationFileConfig *AutomationFileAutomationFileConfig `json:"automationFileConfig,omitempty"`
	File NullableAutomationFileFile `json:"file,omitempty"`
	Id *string `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewAutomationFile instantiates a new AutomationFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutomationFile() *AutomationFile {
	this := AutomationFile{}
	return &this
}

// NewAutomationFileWithDefaults instantiates a new AutomationFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutomationFileWithDefaults() *AutomationFile {
	this := AutomationFile{}
	return &this
}

// GetAssayRunId returns the AssayRunId field value if set, zero value otherwise.
func (o *AutomationFile) GetAssayRunId() string {
	if o == nil || isNil(o.AssayRunId) {
		var ret string
		return ret
	}
	return *o.AssayRunId
}

// GetAssayRunIdOk returns a tuple with the AssayRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationFile) GetAssayRunIdOk() (*string, bool) {
	if o == nil || isNil(o.AssayRunId) {
    return nil, false
	}
	return o.AssayRunId, true
}

// HasAssayRunId returns a boolean if a field has been set.
func (o *AutomationFile) HasAssayRunId() bool {
	if o != nil && !isNil(o.AssayRunId) {
		return true
	}

	return false
}

// SetAssayRunId gets a reference to the given string and assigns it to the AssayRunId field.
func (o *AutomationFile) SetAssayRunId(v string) {
	o.AssayRunId = &v
}

// GetAutomationFileConfig returns the AutomationFileConfig field value if set, zero value otherwise.
func (o *AutomationFile) GetAutomationFileConfig() AutomationFileAutomationFileConfig {
	if o == nil || isNil(o.AutomationFileConfig) {
		var ret AutomationFileAutomationFileConfig
		return ret
	}
	return *o.AutomationFileConfig
}

// GetAutomationFileConfigOk returns a tuple with the AutomationFileConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationFile) GetAutomationFileConfigOk() (*AutomationFileAutomationFileConfig, bool) {
	if o == nil || isNil(o.AutomationFileConfig) {
    return nil, false
	}
	return o.AutomationFileConfig, true
}

// HasAutomationFileConfig returns a boolean if a field has been set.
func (o *AutomationFile) HasAutomationFileConfig() bool {
	if o != nil && !isNil(o.AutomationFileConfig) {
		return true
	}

	return false
}

// SetAutomationFileConfig gets a reference to the given AutomationFileAutomationFileConfig and assigns it to the AutomationFileConfig field.
func (o *AutomationFile) SetAutomationFileConfig(v AutomationFileAutomationFileConfig) {
	o.AutomationFileConfig = &v
}

// GetFile returns the File field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AutomationFile) GetFile() AutomationFileFile {
	if o == nil || isNil(o.File.Get()) {
		var ret AutomationFileFile
		return ret
	}
	return *o.File.Get()
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AutomationFile) GetFileOk() (*AutomationFileFile, bool) {
	if o == nil {
    return nil, false
	}
	return o.File.Get(), o.File.IsSet()
}

// HasFile returns a boolean if a field has been set.
func (o *AutomationFile) HasFile() bool {
	if o != nil && o.File.IsSet() {
		return true
	}

	return false
}

// SetFile gets a reference to the given NullableAutomationFileFile and assigns it to the File field.
func (o *AutomationFile) SetFile(v AutomationFileFile) {
	o.File.Set(&v)
}
// SetFileNil sets the value for File to be an explicit nil
func (o *AutomationFile) SetFileNil() {
	o.File.Set(nil)
}

// UnsetFile ensures that no value is present for File, not even an explicit nil
func (o *AutomationFile) UnsetFile() {
	o.File.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AutomationFile) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationFile) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AutomationFile) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AutomationFile) SetId(v string) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *AutomationFile) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutomationFile) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *AutomationFile) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *AutomationFile) SetStatus(v string) {
	o.Status = &v
}

func (o AutomationFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AssayRunId) {
		toSerialize["assayRunId"] = o.AssayRunId
	}
	if !isNil(o.AutomationFileConfig) {
		toSerialize["automationFileConfig"] = o.AutomationFileConfig
	}
	if o.File.IsSet() {
		toSerialize["file"] = o.File.Get()
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableAutomationFile struct {
	value *AutomationFile
	isSet bool
}

func (v NullableAutomationFile) Get() *AutomationFile {
	return v.value
}

func (v *NullableAutomationFile) Set(val *AutomationFile) {
	v.value = val
	v.isSet = true
}

func (v NullableAutomationFile) IsSet() bool {
	return v.isSet
}

func (v *NullableAutomationFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutomationFile(val *AutomationFile) *NullableAutomationFile {
	return &NullableAutomationFile{value: val, isSet: true}
}

func (v NullableAutomationFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutomationFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


