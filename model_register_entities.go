/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// RegisterEntities struct for RegisterEntities
type RegisterEntities struct {
	// Array of entity IDs
	EntityIds []string `json:"entityIds"`
	NamingStrategy NamingStrategy `json:"namingStrategy"`
}

// NewRegisterEntities instantiates a new RegisterEntities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterEntities(entityIds []string, namingStrategy NamingStrategy) *RegisterEntities {
	this := RegisterEntities{}
	this.EntityIds = entityIds
	this.NamingStrategy = namingStrategy
	return &this
}

// NewRegisterEntitiesWithDefaults instantiates a new RegisterEntities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterEntitiesWithDefaults() *RegisterEntities {
	this := RegisterEntities{}
	return &this
}

// GetEntityIds returns the EntityIds field value
func (o *RegisterEntities) GetEntityIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EntityIds
}

// GetEntityIdsOk returns a tuple with the EntityIds field value
// and a boolean to check if the value has been set.
func (o *RegisterEntities) GetEntityIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.EntityIds, true
}

// SetEntityIds sets field value
func (o *RegisterEntities) SetEntityIds(v []string) {
	o.EntityIds = v
}

// GetNamingStrategy returns the NamingStrategy field value
func (o *RegisterEntities) GetNamingStrategy() NamingStrategy {
	if o == nil {
		var ret NamingStrategy
		return ret
	}

	return o.NamingStrategy
}

// GetNamingStrategyOk returns a tuple with the NamingStrategy field value
// and a boolean to check if the value has been set.
func (o *RegisterEntities) GetNamingStrategyOk() (*NamingStrategy, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NamingStrategy, true
}

// SetNamingStrategy sets field value
func (o *RegisterEntities) SetNamingStrategy(v NamingStrategy) {
	o.NamingStrategy = v
}

func (o RegisterEntities) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entityIds"] = o.EntityIds
	}
	if true {
		toSerialize["namingStrategy"] = o.NamingStrategy
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterEntities struct {
	value *RegisterEntities
	isSet bool
}

func (v NullableRegisterEntities) Get() *RegisterEntities {
	return v.value
}

func (v *NullableRegisterEntities) Set(val *RegisterEntities) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterEntities) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterEntities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterEntities(val *RegisterEntities) *NullableRegisterEntities {
	return &NullableRegisterEntities{value: val, isSet: true}
}

func (v NullableRegisterEntities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterEntities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


