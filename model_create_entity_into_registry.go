/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// CreateEntityIntoRegistry struct for CreateEntityIntoRegistry
type CreateEntityIntoRegistry struct {
	// Entity registry ID to set for the registered entity. Cannot specify both entityRegistryId and namingStrategy at the same time. 
	EntityRegistryId *string `json:"entityRegistryId,omitempty"`
	// ID of the folder containing the entity. Can be left empty when registryId is present.
	FolderId *string `json:"folderId,omitempty"`
	NamingStrategy *NamingStrategy `json:"namingStrategy,omitempty"`
	// Registry ID into which entity should be registered. this is the ID of the registry which was configured for a particular organization To get available registryIds, use the [/registries endpoint](#/Registry/listRegistries)  Required in order for entities to be created directly in the registry. 
	RegistryId *string `json:"registryId,omitempty"`
}

// NewCreateEntityIntoRegistry instantiates a new CreateEntityIntoRegistry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEntityIntoRegistry() *CreateEntityIntoRegistry {
	this := CreateEntityIntoRegistry{}
	return &this
}

// NewCreateEntityIntoRegistryWithDefaults instantiates a new CreateEntityIntoRegistry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEntityIntoRegistryWithDefaults() *CreateEntityIntoRegistry {
	this := CreateEntityIntoRegistry{}
	return &this
}

// GetEntityRegistryId returns the EntityRegistryId field value if set, zero value otherwise.
func (o *CreateEntityIntoRegistry) GetEntityRegistryId() string {
	if o == nil || isNil(o.EntityRegistryId) {
		var ret string
		return ret
	}
	return *o.EntityRegistryId
}

// GetEntityRegistryIdOk returns a tuple with the EntityRegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEntityIntoRegistry) GetEntityRegistryIdOk() (*string, bool) {
	if o == nil || isNil(o.EntityRegistryId) {
    return nil, false
	}
	return o.EntityRegistryId, true
}

// HasEntityRegistryId returns a boolean if a field has been set.
func (o *CreateEntityIntoRegistry) HasEntityRegistryId() bool {
	if o != nil && !isNil(o.EntityRegistryId) {
		return true
	}

	return false
}

// SetEntityRegistryId gets a reference to the given string and assigns it to the EntityRegistryId field.
func (o *CreateEntityIntoRegistry) SetEntityRegistryId(v string) {
	o.EntityRegistryId = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *CreateEntityIntoRegistry) GetFolderId() string {
	if o == nil || isNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEntityIntoRegistry) GetFolderIdOk() (*string, bool) {
	if o == nil || isNil(o.FolderId) {
    return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *CreateEntityIntoRegistry) HasFolderId() bool {
	if o != nil && !isNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *CreateEntityIntoRegistry) SetFolderId(v string) {
	o.FolderId = &v
}

// GetNamingStrategy returns the NamingStrategy field value if set, zero value otherwise.
func (o *CreateEntityIntoRegistry) GetNamingStrategy() NamingStrategy {
	if o == nil || isNil(o.NamingStrategy) {
		var ret NamingStrategy
		return ret
	}
	return *o.NamingStrategy
}

// GetNamingStrategyOk returns a tuple with the NamingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEntityIntoRegistry) GetNamingStrategyOk() (*NamingStrategy, bool) {
	if o == nil || isNil(o.NamingStrategy) {
    return nil, false
	}
	return o.NamingStrategy, true
}

// HasNamingStrategy returns a boolean if a field has been set.
func (o *CreateEntityIntoRegistry) HasNamingStrategy() bool {
	if o != nil && !isNil(o.NamingStrategy) {
		return true
	}

	return false
}

// SetNamingStrategy gets a reference to the given NamingStrategy and assigns it to the NamingStrategy field.
func (o *CreateEntityIntoRegistry) SetNamingStrategy(v NamingStrategy) {
	o.NamingStrategy = &v
}

// GetRegistryId returns the RegistryId field value if set, zero value otherwise.
func (o *CreateEntityIntoRegistry) GetRegistryId() string {
	if o == nil || isNil(o.RegistryId) {
		var ret string
		return ret
	}
	return *o.RegistryId
}

// GetRegistryIdOk returns a tuple with the RegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEntityIntoRegistry) GetRegistryIdOk() (*string, bool) {
	if o == nil || isNil(o.RegistryId) {
    return nil, false
	}
	return o.RegistryId, true
}

// HasRegistryId returns a boolean if a field has been set.
func (o *CreateEntityIntoRegistry) HasRegistryId() bool {
	if o != nil && !isNil(o.RegistryId) {
		return true
	}

	return false
}

// SetRegistryId gets a reference to the given string and assigns it to the RegistryId field.
func (o *CreateEntityIntoRegistry) SetRegistryId(v string) {
	o.RegistryId = &v
}

func (o CreateEntityIntoRegistry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EntityRegistryId) {
		toSerialize["entityRegistryId"] = o.EntityRegistryId
	}
	if !isNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !isNil(o.NamingStrategy) {
		toSerialize["namingStrategy"] = o.NamingStrategy
	}
	if !isNil(o.RegistryId) {
		toSerialize["registryId"] = o.RegistryId
	}
	return json.Marshal(toSerialize)
}

type NullableCreateEntityIntoRegistry struct {
	value *CreateEntityIntoRegistry
	isSet bool
}

func (v NullableCreateEntityIntoRegistry) Get() *CreateEntityIntoRegistry {
	return v.value
}

func (v *NullableCreateEntityIntoRegistry) Set(val *CreateEntityIntoRegistry) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEntityIntoRegistry) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEntityIntoRegistry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEntityIntoRegistry(val *CreateEntityIntoRegistry) *NullableCreateEntityIntoRegistry {
	return &NullableCreateEntityIntoRegistry{value: val, isSet: true}
}

func (v NullableCreateEntityIntoRegistry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEntityIntoRegistry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


