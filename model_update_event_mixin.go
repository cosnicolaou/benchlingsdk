/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// UpdateEventMixin struct for UpdateEventMixin
type UpdateEventMixin struct {
	// These properties have been updated, causing this message 
	Updates []string `json:"updates,omitempty"`
}

// NewUpdateEventMixin instantiates a new UpdateEventMixin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEventMixin() *UpdateEventMixin {
	this := UpdateEventMixin{}
	return &this
}

// NewUpdateEventMixinWithDefaults instantiates a new UpdateEventMixin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEventMixinWithDefaults() *UpdateEventMixin {
	this := UpdateEventMixin{}
	return &this
}

// GetUpdates returns the Updates field value if set, zero value otherwise.
func (o *UpdateEventMixin) GetUpdates() []string {
	if o == nil || isNil(o.Updates) {
		var ret []string
		return ret
	}
	return o.Updates
}

// GetUpdatesOk returns a tuple with the Updates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEventMixin) GetUpdatesOk() ([]string, bool) {
	if o == nil || isNil(o.Updates) {
    return nil, false
	}
	return o.Updates, true
}

// HasUpdates returns a boolean if a field has been set.
func (o *UpdateEventMixin) HasUpdates() bool {
	if o != nil && !isNil(o.Updates) {
		return true
	}

	return false
}

// SetUpdates gets a reference to the given []string and assigns it to the Updates field.
func (o *UpdateEventMixin) SetUpdates(v []string) {
	o.Updates = v
}

func (o UpdateEventMixin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Updates) {
		toSerialize["updates"] = o.Updates
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateEventMixin struct {
	value *UpdateEventMixin
	isSet bool
}

func (v NullableUpdateEventMixin) Get() *UpdateEventMixin {
	return v.value
}

func (v *NullableUpdateEventMixin) Set(val *UpdateEventMixin) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEventMixin) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEventMixin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEventMixin(val *UpdateEventMixin) *NullableUpdateEventMixin {
	return &NullableUpdateEventMixin{value: val, isSet: true}
}

func (v NullableUpdateEventMixin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEventMixin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


