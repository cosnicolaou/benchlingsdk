/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// MixturesArchive The request body for archiving mixtures. 
type MixturesArchive struct {
	MixtureIds []string `json:"mixtureIds"`
	Reason EntityArchiveReason `json:"reason"`
}

// NewMixturesArchive instantiates a new MixturesArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixturesArchive(mixtureIds []string, reason EntityArchiveReason) *MixturesArchive {
	this := MixturesArchive{}
	this.MixtureIds = mixtureIds
	this.Reason = reason
	return &this
}

// NewMixturesArchiveWithDefaults instantiates a new MixturesArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixturesArchiveWithDefaults() *MixturesArchive {
	this := MixturesArchive{}
	return &this
}

// GetMixtureIds returns the MixtureIds field value
func (o *MixturesArchive) GetMixtureIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MixtureIds
}

// GetMixtureIdsOk returns a tuple with the MixtureIds field value
// and a boolean to check if the value has been set.
func (o *MixturesArchive) GetMixtureIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.MixtureIds, true
}

// SetMixtureIds sets field value
func (o *MixturesArchive) SetMixtureIds(v []string) {
	o.MixtureIds = v
}

// GetReason returns the Reason field value
func (o *MixturesArchive) GetReason() EntityArchiveReason {
	if o == nil {
		var ret EntityArchiveReason
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *MixturesArchive) GetReasonOk() (*EntityArchiveReason, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *MixturesArchive) SetReason(v EntityArchiveReason) {
	o.Reason = v
}

func (o MixturesArchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mixtureIds"] = o.MixtureIds
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableMixturesArchive struct {
	value *MixturesArchive
	isSet bool
}

func (v NullableMixturesArchive) Get() *MixturesArchive {
	return v.value
}

func (v *NullableMixturesArchive) Set(val *MixturesArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableMixturesArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableMixturesArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixturesArchive(val *MixturesArchive) *NullableMixturesArchive {
	return &NullableMixturesArchive{value: val, isSet: true}
}

func (v NullableMixturesArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixturesArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


