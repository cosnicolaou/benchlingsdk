/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// OAuthBadRequestError struct for OAuthBadRequestError
type OAuthBadRequestError struct {
	Error *OAuthBadRequestErrorError `json:"error,omitempty"`
}

// NewOAuthBadRequestError instantiates a new OAuthBadRequestError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthBadRequestError() *OAuthBadRequestError {
	this := OAuthBadRequestError{}
	return &this
}

// NewOAuthBadRequestErrorWithDefaults instantiates a new OAuthBadRequestError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthBadRequestErrorWithDefaults() *OAuthBadRequestError {
	this := OAuthBadRequestError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *OAuthBadRequestError) GetError() OAuthBadRequestErrorError {
	if o == nil || isNil(o.Error) {
		var ret OAuthBadRequestErrorError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthBadRequestError) GetErrorOk() (*OAuthBadRequestErrorError, bool) {
	if o == nil || isNil(o.Error) {
    return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *OAuthBadRequestError) HasError() bool {
	if o != nil && !isNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given OAuthBadRequestErrorError and assigns it to the Error field.
func (o *OAuthBadRequestError) SetError(v OAuthBadRequestErrorError) {
	o.Error = &v
}

func (o OAuthBadRequestError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableOAuthBadRequestError struct {
	value *OAuthBadRequestError
	isSet bool
}

func (v NullableOAuthBadRequestError) Get() *OAuthBadRequestError {
	return v.value
}

func (v *NullableOAuthBadRequestError) Set(val *OAuthBadRequestError) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthBadRequestError) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthBadRequestError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthBadRequestError(val *OAuthBadRequestError) *NullableOAuthBadRequestError {
	return &NullableOAuthBadRequestError{value: val, isSet: true}
}

func (v NullableOAuthBadRequestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthBadRequestError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


