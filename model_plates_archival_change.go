/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// PlatesArchivalChange IDs of all items that were archived or unarchived, grouped by resource type. This includes the IDs of plates along with any IDs of containers that were archived / unarchived. 
type PlatesArchivalChange struct {
	ContainerIds []string `json:"containerIds,omitempty"`
	PlateIds []string `json:"plateIds,omitempty"`
}

// NewPlatesArchivalChange instantiates a new PlatesArchivalChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlatesArchivalChange() *PlatesArchivalChange {
	this := PlatesArchivalChange{}
	return &this
}

// NewPlatesArchivalChangeWithDefaults instantiates a new PlatesArchivalChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlatesArchivalChangeWithDefaults() *PlatesArchivalChange {
	this := PlatesArchivalChange{}
	return &this
}

// GetContainerIds returns the ContainerIds field value if set, zero value otherwise.
func (o *PlatesArchivalChange) GetContainerIds() []string {
	if o == nil || isNil(o.ContainerIds) {
		var ret []string
		return ret
	}
	return o.ContainerIds
}

// GetContainerIdsOk returns a tuple with the ContainerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatesArchivalChange) GetContainerIdsOk() ([]string, bool) {
	if o == nil || isNil(o.ContainerIds) {
    return nil, false
	}
	return o.ContainerIds, true
}

// HasContainerIds returns a boolean if a field has been set.
func (o *PlatesArchivalChange) HasContainerIds() bool {
	if o != nil && !isNil(o.ContainerIds) {
		return true
	}

	return false
}

// SetContainerIds gets a reference to the given []string and assigns it to the ContainerIds field.
func (o *PlatesArchivalChange) SetContainerIds(v []string) {
	o.ContainerIds = v
}

// GetPlateIds returns the PlateIds field value if set, zero value otherwise.
func (o *PlatesArchivalChange) GetPlateIds() []string {
	if o == nil || isNil(o.PlateIds) {
		var ret []string
		return ret
	}
	return o.PlateIds
}

// GetPlateIdsOk returns a tuple with the PlateIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlatesArchivalChange) GetPlateIdsOk() ([]string, bool) {
	if o == nil || isNil(o.PlateIds) {
    return nil, false
	}
	return o.PlateIds, true
}

// HasPlateIds returns a boolean if a field has been set.
func (o *PlatesArchivalChange) HasPlateIds() bool {
	if o != nil && !isNil(o.PlateIds) {
		return true
	}

	return false
}

// SetPlateIds gets a reference to the given []string and assigns it to the PlateIds field.
func (o *PlatesArchivalChange) SetPlateIds(v []string) {
	o.PlateIds = v
}

func (o PlatesArchivalChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ContainerIds) {
		toSerialize["containerIds"] = o.ContainerIds
	}
	if !isNil(o.PlateIds) {
		toSerialize["plateIds"] = o.PlateIds
	}
	return json.Marshal(toSerialize)
}

type NullablePlatesArchivalChange struct {
	value *PlatesArchivalChange
	isSet bool
}

func (v NullablePlatesArchivalChange) Get() *PlatesArchivalChange {
	return v.value
}

func (v *NullablePlatesArchivalChange) Set(val *PlatesArchivalChange) {
	v.value = val
	v.isSet = true
}

func (v NullablePlatesArchivalChange) IsSet() bool {
	return v.isSet
}

func (v *NullablePlatesArchivalChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlatesArchivalChange(val *PlatesArchivalChange) *NullablePlatesArchivalChange {
	return &NullablePlatesArchivalChange{value: val, isSet: true}
}

func (v NullablePlatesArchivalChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlatesArchivalChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


