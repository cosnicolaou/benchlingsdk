/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// DropdownOptionUpdate struct for DropdownOptionUpdate
type DropdownOptionUpdate struct {
	// ID of the dropdown option to update, omitted if creating a new option.
	Id *string `json:"id,omitempty"`
	// Name of the dropdown option.
	Name string `json:"name"`
}

// NewDropdownOptionUpdate instantiates a new DropdownOptionUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDropdownOptionUpdate(name string) *DropdownOptionUpdate {
	this := DropdownOptionUpdate{}
	this.Name = name
	return &this
}

// NewDropdownOptionUpdateWithDefaults instantiates a new DropdownOptionUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDropdownOptionUpdateWithDefaults() *DropdownOptionUpdate {
	this := DropdownOptionUpdate{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DropdownOptionUpdate) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DropdownOptionUpdate) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DropdownOptionUpdate) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DropdownOptionUpdate) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *DropdownOptionUpdate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DropdownOptionUpdate) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DropdownOptionUpdate) SetName(v string) {
	o.Name = v
}

func (o DropdownOptionUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableDropdownOptionUpdate struct {
	value *DropdownOptionUpdate
	isSet bool
}

func (v NullableDropdownOptionUpdate) Get() *DropdownOptionUpdate {
	return v.value
}

func (v *NullableDropdownOptionUpdate) Set(val *DropdownOptionUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableDropdownOptionUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableDropdownOptionUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDropdownOptionUpdate(val *DropdownOptionUpdate) *NullableDropdownOptionUpdate {
	return &NullableDropdownOptionUpdate{value: val, isSet: true}
}

func (v NullableDropdownOptionUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDropdownOptionUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


