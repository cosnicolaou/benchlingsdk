/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// FloatFieldDefinition struct for FloatFieldDefinition
type FloatFieldDefinition struct {
	ArchiveRecord NullableAaSequenceArchiveRecord `json:"archiveRecord,omitempty"`
	Id *string `json:"id,omitempty"`
	IsMulti *bool `json:"isMulti,omitempty"`
	IsRequired *bool `json:"isRequired,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	DecimalPrecision NullableFloat32 `json:"decimalPrecision,omitempty"`
	LegalTextDropdownId NullableString `json:"legalTextDropdownId,omitempty"`
	NumericMax NullableFloat32 `json:"numericMax,omitempty"`
	NumericMin NullableFloat32 `json:"numericMin,omitempty"`
}

// NewFloatFieldDefinition instantiates a new FloatFieldDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFloatFieldDefinition() *FloatFieldDefinition {
	this := FloatFieldDefinition{}
	return &this
}

// NewFloatFieldDefinitionWithDefaults instantiates a new FloatFieldDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFloatFieldDefinitionWithDefaults() *FloatFieldDefinition {
	this := FloatFieldDefinition{}
	return &this
}

// GetArchiveRecord returns the ArchiveRecord field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FloatFieldDefinition) GetArchiveRecord() AaSequenceArchiveRecord {
	if o == nil || isNil(o.ArchiveRecord.Get()) {
		var ret AaSequenceArchiveRecord
		return ret
	}
	return *o.ArchiveRecord.Get()
}

// GetArchiveRecordOk returns a tuple with the ArchiveRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FloatFieldDefinition) GetArchiveRecordOk() (*AaSequenceArchiveRecord, bool) {
	if o == nil {
    return nil, false
	}
	return o.ArchiveRecord.Get(), o.ArchiveRecord.IsSet()
}

// HasArchiveRecord returns a boolean if a field has been set.
func (o *FloatFieldDefinition) HasArchiveRecord() bool {
	if o != nil && o.ArchiveRecord.IsSet() {
		return true
	}

	return false
}

// SetArchiveRecord gets a reference to the given NullableAaSequenceArchiveRecord and assigns it to the ArchiveRecord field.
func (o *FloatFieldDefinition) SetArchiveRecord(v AaSequenceArchiveRecord) {
	o.ArchiveRecord.Set(&v)
}
// SetArchiveRecordNil sets the value for ArchiveRecord to be an explicit nil
func (o *FloatFieldDefinition) SetArchiveRecordNil() {
	o.ArchiveRecord.Set(nil)
}

// UnsetArchiveRecord ensures that no value is present for ArchiveRecord, not even an explicit nil
func (o *FloatFieldDefinition) UnsetArchiveRecord() {
	o.ArchiveRecord.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FloatFieldDefinition) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatFieldDefinition) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FloatFieldDefinition) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FloatFieldDefinition) SetId(v string) {
	o.Id = &v
}

// GetIsMulti returns the IsMulti field value if set, zero value otherwise.
func (o *FloatFieldDefinition) GetIsMulti() bool {
	if o == nil || isNil(o.IsMulti) {
		var ret bool
		return ret
	}
	return *o.IsMulti
}

// GetIsMultiOk returns a tuple with the IsMulti field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatFieldDefinition) GetIsMultiOk() (*bool, bool) {
	if o == nil || isNil(o.IsMulti) {
    return nil, false
	}
	return o.IsMulti, true
}

// HasIsMulti returns a boolean if a field has been set.
func (o *FloatFieldDefinition) HasIsMulti() bool {
	if o != nil && !isNil(o.IsMulti) {
		return true
	}

	return false
}

// SetIsMulti gets a reference to the given bool and assigns it to the IsMulti field.
func (o *FloatFieldDefinition) SetIsMulti(v bool) {
	o.IsMulti = &v
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise.
func (o *FloatFieldDefinition) GetIsRequired() bool {
	if o == nil || isNil(o.IsRequired) {
		var ret bool
		return ret
	}
	return *o.IsRequired
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatFieldDefinition) GetIsRequiredOk() (*bool, bool) {
	if o == nil || isNil(o.IsRequired) {
    return nil, false
	}
	return o.IsRequired, true
}

// HasIsRequired returns a boolean if a field has been set.
func (o *FloatFieldDefinition) HasIsRequired() bool {
	if o != nil && !isNil(o.IsRequired) {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given bool and assigns it to the IsRequired field.
func (o *FloatFieldDefinition) SetIsRequired(v bool) {
	o.IsRequired = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FloatFieldDefinition) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatFieldDefinition) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FloatFieldDefinition) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FloatFieldDefinition) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FloatFieldDefinition) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FloatFieldDefinition) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FloatFieldDefinition) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FloatFieldDefinition) SetType(v string) {
	o.Type = &v
}

// GetDecimalPrecision returns the DecimalPrecision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FloatFieldDefinition) GetDecimalPrecision() float32 {
	if o == nil || isNil(o.DecimalPrecision.Get()) {
		var ret float32
		return ret
	}
	return *o.DecimalPrecision.Get()
}

// GetDecimalPrecisionOk returns a tuple with the DecimalPrecision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FloatFieldDefinition) GetDecimalPrecisionOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.DecimalPrecision.Get(), o.DecimalPrecision.IsSet()
}

// HasDecimalPrecision returns a boolean if a field has been set.
func (o *FloatFieldDefinition) HasDecimalPrecision() bool {
	if o != nil && o.DecimalPrecision.IsSet() {
		return true
	}

	return false
}

// SetDecimalPrecision gets a reference to the given NullableFloat32 and assigns it to the DecimalPrecision field.
func (o *FloatFieldDefinition) SetDecimalPrecision(v float32) {
	o.DecimalPrecision.Set(&v)
}
// SetDecimalPrecisionNil sets the value for DecimalPrecision to be an explicit nil
func (o *FloatFieldDefinition) SetDecimalPrecisionNil() {
	o.DecimalPrecision.Set(nil)
}

// UnsetDecimalPrecision ensures that no value is present for DecimalPrecision, not even an explicit nil
func (o *FloatFieldDefinition) UnsetDecimalPrecision() {
	o.DecimalPrecision.Unset()
}

// GetLegalTextDropdownId returns the LegalTextDropdownId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FloatFieldDefinition) GetLegalTextDropdownId() string {
	if o == nil || isNil(o.LegalTextDropdownId.Get()) {
		var ret string
		return ret
	}
	return *o.LegalTextDropdownId.Get()
}

// GetLegalTextDropdownIdOk returns a tuple with the LegalTextDropdownId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FloatFieldDefinition) GetLegalTextDropdownIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.LegalTextDropdownId.Get(), o.LegalTextDropdownId.IsSet()
}

// HasLegalTextDropdownId returns a boolean if a field has been set.
func (o *FloatFieldDefinition) HasLegalTextDropdownId() bool {
	if o != nil && o.LegalTextDropdownId.IsSet() {
		return true
	}

	return false
}

// SetLegalTextDropdownId gets a reference to the given NullableString and assigns it to the LegalTextDropdownId field.
func (o *FloatFieldDefinition) SetLegalTextDropdownId(v string) {
	o.LegalTextDropdownId.Set(&v)
}
// SetLegalTextDropdownIdNil sets the value for LegalTextDropdownId to be an explicit nil
func (o *FloatFieldDefinition) SetLegalTextDropdownIdNil() {
	o.LegalTextDropdownId.Set(nil)
}

// UnsetLegalTextDropdownId ensures that no value is present for LegalTextDropdownId, not even an explicit nil
func (o *FloatFieldDefinition) UnsetLegalTextDropdownId() {
	o.LegalTextDropdownId.Unset()
}

// GetNumericMax returns the NumericMax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FloatFieldDefinition) GetNumericMax() float32 {
	if o == nil || isNil(o.NumericMax.Get()) {
		var ret float32
		return ret
	}
	return *o.NumericMax.Get()
}

// GetNumericMaxOk returns a tuple with the NumericMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FloatFieldDefinition) GetNumericMaxOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.NumericMax.Get(), o.NumericMax.IsSet()
}

// HasNumericMax returns a boolean if a field has been set.
func (o *FloatFieldDefinition) HasNumericMax() bool {
	if o != nil && o.NumericMax.IsSet() {
		return true
	}

	return false
}

// SetNumericMax gets a reference to the given NullableFloat32 and assigns it to the NumericMax field.
func (o *FloatFieldDefinition) SetNumericMax(v float32) {
	o.NumericMax.Set(&v)
}
// SetNumericMaxNil sets the value for NumericMax to be an explicit nil
func (o *FloatFieldDefinition) SetNumericMaxNil() {
	o.NumericMax.Set(nil)
}

// UnsetNumericMax ensures that no value is present for NumericMax, not even an explicit nil
func (o *FloatFieldDefinition) UnsetNumericMax() {
	o.NumericMax.Unset()
}

// GetNumericMin returns the NumericMin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FloatFieldDefinition) GetNumericMin() float32 {
	if o == nil || isNil(o.NumericMin.Get()) {
		var ret float32
		return ret
	}
	return *o.NumericMin.Get()
}

// GetNumericMinOk returns a tuple with the NumericMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FloatFieldDefinition) GetNumericMinOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.NumericMin.Get(), o.NumericMin.IsSet()
}

// HasNumericMin returns a boolean if a field has been set.
func (o *FloatFieldDefinition) HasNumericMin() bool {
	if o != nil && o.NumericMin.IsSet() {
		return true
	}

	return false
}

// SetNumericMin gets a reference to the given NullableFloat32 and assigns it to the NumericMin field.
func (o *FloatFieldDefinition) SetNumericMin(v float32) {
	o.NumericMin.Set(&v)
}
// SetNumericMinNil sets the value for NumericMin to be an explicit nil
func (o *FloatFieldDefinition) SetNumericMinNil() {
	o.NumericMin.Set(nil)
}

// UnsetNumericMin ensures that no value is present for NumericMin, not even an explicit nil
func (o *FloatFieldDefinition) UnsetNumericMin() {
	o.NumericMin.Unset()
}

func (o FloatFieldDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveRecord.IsSet() {
		toSerialize["archiveRecord"] = o.ArchiveRecord.Get()
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.IsMulti) {
		toSerialize["isMulti"] = o.IsMulti
	}
	if !isNil(o.IsRequired) {
		toSerialize["isRequired"] = o.IsRequired
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.DecimalPrecision.IsSet() {
		toSerialize["decimalPrecision"] = o.DecimalPrecision.Get()
	}
	if o.LegalTextDropdownId.IsSet() {
		toSerialize["legalTextDropdownId"] = o.LegalTextDropdownId.Get()
	}
	if o.NumericMax.IsSet() {
		toSerialize["numericMax"] = o.NumericMax.Get()
	}
	if o.NumericMin.IsSet() {
		toSerialize["numericMin"] = o.NumericMin.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFloatFieldDefinition struct {
	value *FloatFieldDefinition
	isSet bool
}

func (v NullableFloatFieldDefinition) Get() *FloatFieldDefinition {
	return v.value
}

func (v *NullableFloatFieldDefinition) Set(val *FloatFieldDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableFloatFieldDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableFloatFieldDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFloatFieldDefinition(val *FloatFieldDefinition) *NullableFloatFieldDefinition {
	return &NullableFloatFieldDefinition{value: val, isSet: true}
}

func (v NullableFloatFieldDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFloatFieldDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


