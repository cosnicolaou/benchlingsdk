/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ContainerUpdate struct for ContainerUpdate
type ContainerUpdate struct {
	Fields *map[string]Field `json:"fields,omitempty"`
	Name *string `json:"name,omitempty"`
	// ID of containing parent storage, can also specify a coordinate for plates and boxes (e.g. plt_2bAks9dx:a2).
	ParentStorageId *string `json:"parentStorageId,omitempty"`
	ProjectId NullableString `json:"projectId,omitempty"`
	Quantity *ContainerQuantity `json:"quantity,omitempty"`
	Volume *DeprecatedContainerVolumeForInput `json:"volume,omitempty"`
}

// NewContainerUpdate instantiates a new ContainerUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerUpdate() *ContainerUpdate {
	this := ContainerUpdate{}
	return &this
}

// NewContainerUpdateWithDefaults instantiates a new ContainerUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerUpdateWithDefaults() *ContainerUpdate {
	this := ContainerUpdate{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *ContainerUpdate) GetFields() map[string]Field {
	if o == nil || isNil(o.Fields) {
		var ret map[string]Field
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerUpdate) GetFieldsOk() (*map[string]Field, bool) {
	if o == nil || isNil(o.Fields) {
    return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *ContainerUpdate) HasFields() bool {
	if o != nil && !isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]Field and assigns it to the Fields field.
func (o *ContainerUpdate) SetFields(v map[string]Field) {
	o.Fields = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ContainerUpdate) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerUpdate) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ContainerUpdate) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ContainerUpdate) SetName(v string) {
	o.Name = &v
}

// GetParentStorageId returns the ParentStorageId field value if set, zero value otherwise.
func (o *ContainerUpdate) GetParentStorageId() string {
	if o == nil || isNil(o.ParentStorageId) {
		var ret string
		return ret
	}
	return *o.ParentStorageId
}

// GetParentStorageIdOk returns a tuple with the ParentStorageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerUpdate) GetParentStorageIdOk() (*string, bool) {
	if o == nil || isNil(o.ParentStorageId) {
    return nil, false
	}
	return o.ParentStorageId, true
}

// HasParentStorageId returns a boolean if a field has been set.
func (o *ContainerUpdate) HasParentStorageId() bool {
	if o != nil && !isNil(o.ParentStorageId) {
		return true
	}

	return false
}

// SetParentStorageId gets a reference to the given string and assigns it to the ParentStorageId field.
func (o *ContainerUpdate) SetParentStorageId(v string) {
	o.ParentStorageId = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerUpdate) GetProjectId() string {
	if o == nil || isNil(o.ProjectId.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerUpdate) GetProjectIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *ContainerUpdate) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableString and assigns it to the ProjectId field.
func (o *ContainerUpdate) SetProjectId(v string) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *ContainerUpdate) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *ContainerUpdate) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *ContainerUpdate) GetQuantity() ContainerQuantity {
	if o == nil || isNil(o.Quantity) {
		var ret ContainerQuantity
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerUpdate) GetQuantityOk() (*ContainerQuantity, bool) {
	if o == nil || isNil(o.Quantity) {
    return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *ContainerUpdate) HasQuantity() bool {
	if o != nil && !isNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given ContainerQuantity and assigns it to the Quantity field.
func (o *ContainerUpdate) SetQuantity(v ContainerQuantity) {
	o.Quantity = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *ContainerUpdate) GetVolume() DeprecatedContainerVolumeForInput {
	if o == nil || isNil(o.Volume) {
		var ret DeprecatedContainerVolumeForInput
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerUpdate) GetVolumeOk() (*DeprecatedContainerVolumeForInput, bool) {
	if o == nil || isNil(o.Volume) {
    return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *ContainerUpdate) HasVolume() bool {
	if o != nil && !isNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given DeprecatedContainerVolumeForInput and assigns it to the Volume field.
func (o *ContainerUpdate) SetVolume(v DeprecatedContainerVolumeForInput) {
	o.Volume = &v
}

func (o ContainerUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ParentStorageId) {
		toSerialize["parentStorageId"] = o.ParentStorageId
	}
	if o.ProjectId.IsSet() {
		toSerialize["projectId"] = o.ProjectId.Get()
	}
	if !isNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !isNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	return json.Marshal(toSerialize)
}

type NullableContainerUpdate struct {
	value *ContainerUpdate
	isSet bool
}

func (v NullableContainerUpdate) Get() *ContainerUpdate {
	return v.value
}

func (v *NullableContainerUpdate) Set(val *ContainerUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerUpdate(val *ContainerUpdate) *NullableContainerUpdate {
	return &NullableContainerUpdate{value: val, isSet: true}
}

func (v NullableContainerUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


