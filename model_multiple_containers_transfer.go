/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// MultipleContainersTransfer struct for MultipleContainersTransfer
type MultipleContainersTransfer struct {
	// ID of the batch that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
	SourceBatchId *string `json:"sourceBatchId,omitempty"`
	// ID of the container that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
	SourceContainerId *string `json:"sourceContainerId,omitempty"`
	// ID of the entity that will be transferred in. Must specify one of sourceEntityId, sourceBatchId, or sourceContainerId. 
	SourceEntityId *string `json:"sourceEntityId,omitempty"`
	TransferQuantity *ContainerTransferBaseTransferQuantity `json:"transferQuantity,omitempty"`
	TransferVolume *ContainerTransferBaseTransferVolume `json:"transferVolume,omitempty"`
	// ID of container that will be transferred into.
	DestinationContainerId string `json:"destinationContainerId"`
	FinalQuantity *ContainerQuantity `json:"finalQuantity,omitempty"`
	FinalVolume *DeprecatedContainerVolumeForInput `json:"finalVolume,omitempty"`
	// Concentration at which to transfer entities or batches. Not applicable for container-to-container transfers (the concentration of the source containerâ€™s contents will be used). 
	SourceConcentration map[string]interface{} `json:"sourceConcentration,omitempty"`
}

// NewMultipleContainersTransfer instantiates a new MultipleContainersTransfer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleContainersTransfer(destinationContainerId string) *MultipleContainersTransfer {
	this := MultipleContainersTransfer{}
	this.DestinationContainerId = destinationContainerId
	return &this
}

// NewMultipleContainersTransferWithDefaults instantiates a new MultipleContainersTransfer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleContainersTransferWithDefaults() *MultipleContainersTransfer {
	this := MultipleContainersTransfer{}
	return &this
}

// GetSourceBatchId returns the SourceBatchId field value if set, zero value otherwise.
func (o *MultipleContainersTransfer) GetSourceBatchId() string {
	if o == nil || isNil(o.SourceBatchId) {
		var ret string
		return ret
	}
	return *o.SourceBatchId
}

// GetSourceBatchIdOk returns a tuple with the SourceBatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransfer) GetSourceBatchIdOk() (*string, bool) {
	if o == nil || isNil(o.SourceBatchId) {
    return nil, false
	}
	return o.SourceBatchId, true
}

// HasSourceBatchId returns a boolean if a field has been set.
func (o *MultipleContainersTransfer) HasSourceBatchId() bool {
	if o != nil && !isNil(o.SourceBatchId) {
		return true
	}

	return false
}

// SetSourceBatchId gets a reference to the given string and assigns it to the SourceBatchId field.
func (o *MultipleContainersTransfer) SetSourceBatchId(v string) {
	o.SourceBatchId = &v
}

// GetSourceContainerId returns the SourceContainerId field value if set, zero value otherwise.
func (o *MultipleContainersTransfer) GetSourceContainerId() string {
	if o == nil || isNil(o.SourceContainerId) {
		var ret string
		return ret
	}
	return *o.SourceContainerId
}

// GetSourceContainerIdOk returns a tuple with the SourceContainerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransfer) GetSourceContainerIdOk() (*string, bool) {
	if o == nil || isNil(o.SourceContainerId) {
    return nil, false
	}
	return o.SourceContainerId, true
}

// HasSourceContainerId returns a boolean if a field has been set.
func (o *MultipleContainersTransfer) HasSourceContainerId() bool {
	if o != nil && !isNil(o.SourceContainerId) {
		return true
	}

	return false
}

// SetSourceContainerId gets a reference to the given string and assigns it to the SourceContainerId field.
func (o *MultipleContainersTransfer) SetSourceContainerId(v string) {
	o.SourceContainerId = &v
}

// GetSourceEntityId returns the SourceEntityId field value if set, zero value otherwise.
func (o *MultipleContainersTransfer) GetSourceEntityId() string {
	if o == nil || isNil(o.SourceEntityId) {
		var ret string
		return ret
	}
	return *o.SourceEntityId
}

// GetSourceEntityIdOk returns a tuple with the SourceEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransfer) GetSourceEntityIdOk() (*string, bool) {
	if o == nil || isNil(o.SourceEntityId) {
    return nil, false
	}
	return o.SourceEntityId, true
}

// HasSourceEntityId returns a boolean if a field has been set.
func (o *MultipleContainersTransfer) HasSourceEntityId() bool {
	if o != nil && !isNil(o.SourceEntityId) {
		return true
	}

	return false
}

// SetSourceEntityId gets a reference to the given string and assigns it to the SourceEntityId field.
func (o *MultipleContainersTransfer) SetSourceEntityId(v string) {
	o.SourceEntityId = &v
}

// GetTransferQuantity returns the TransferQuantity field value if set, zero value otherwise.
func (o *MultipleContainersTransfer) GetTransferQuantity() ContainerTransferBaseTransferQuantity {
	if o == nil || isNil(o.TransferQuantity) {
		var ret ContainerTransferBaseTransferQuantity
		return ret
	}
	return *o.TransferQuantity
}

// GetTransferQuantityOk returns a tuple with the TransferQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransfer) GetTransferQuantityOk() (*ContainerTransferBaseTransferQuantity, bool) {
	if o == nil || isNil(o.TransferQuantity) {
    return nil, false
	}
	return o.TransferQuantity, true
}

// HasTransferQuantity returns a boolean if a field has been set.
func (o *MultipleContainersTransfer) HasTransferQuantity() bool {
	if o != nil && !isNil(o.TransferQuantity) {
		return true
	}

	return false
}

// SetTransferQuantity gets a reference to the given ContainerTransferBaseTransferQuantity and assigns it to the TransferQuantity field.
func (o *MultipleContainersTransfer) SetTransferQuantity(v ContainerTransferBaseTransferQuantity) {
	o.TransferQuantity = &v
}

// GetTransferVolume returns the TransferVolume field value if set, zero value otherwise.
func (o *MultipleContainersTransfer) GetTransferVolume() ContainerTransferBaseTransferVolume {
	if o == nil || isNil(o.TransferVolume) {
		var ret ContainerTransferBaseTransferVolume
		return ret
	}
	return *o.TransferVolume
}

// GetTransferVolumeOk returns a tuple with the TransferVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransfer) GetTransferVolumeOk() (*ContainerTransferBaseTransferVolume, bool) {
	if o == nil || isNil(o.TransferVolume) {
    return nil, false
	}
	return o.TransferVolume, true
}

// HasTransferVolume returns a boolean if a field has been set.
func (o *MultipleContainersTransfer) HasTransferVolume() bool {
	if o != nil && !isNil(o.TransferVolume) {
		return true
	}

	return false
}

// SetTransferVolume gets a reference to the given ContainerTransferBaseTransferVolume and assigns it to the TransferVolume field.
func (o *MultipleContainersTransfer) SetTransferVolume(v ContainerTransferBaseTransferVolume) {
	o.TransferVolume = &v
}

// GetDestinationContainerId returns the DestinationContainerId field value
func (o *MultipleContainersTransfer) GetDestinationContainerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationContainerId
}

// GetDestinationContainerIdOk returns a tuple with the DestinationContainerId field value
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransfer) GetDestinationContainerIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DestinationContainerId, true
}

// SetDestinationContainerId sets field value
func (o *MultipleContainersTransfer) SetDestinationContainerId(v string) {
	o.DestinationContainerId = v
}

// GetFinalQuantity returns the FinalQuantity field value if set, zero value otherwise.
func (o *MultipleContainersTransfer) GetFinalQuantity() ContainerQuantity {
	if o == nil || isNil(o.FinalQuantity) {
		var ret ContainerQuantity
		return ret
	}
	return *o.FinalQuantity
}

// GetFinalQuantityOk returns a tuple with the FinalQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransfer) GetFinalQuantityOk() (*ContainerQuantity, bool) {
	if o == nil || isNil(o.FinalQuantity) {
    return nil, false
	}
	return o.FinalQuantity, true
}

// HasFinalQuantity returns a boolean if a field has been set.
func (o *MultipleContainersTransfer) HasFinalQuantity() bool {
	if o != nil && !isNil(o.FinalQuantity) {
		return true
	}

	return false
}

// SetFinalQuantity gets a reference to the given ContainerQuantity and assigns it to the FinalQuantity field.
func (o *MultipleContainersTransfer) SetFinalQuantity(v ContainerQuantity) {
	o.FinalQuantity = &v
}

// GetFinalVolume returns the FinalVolume field value if set, zero value otherwise.
func (o *MultipleContainersTransfer) GetFinalVolume() DeprecatedContainerVolumeForInput {
	if o == nil || isNil(o.FinalVolume) {
		var ret DeprecatedContainerVolumeForInput
		return ret
	}
	return *o.FinalVolume
}

// GetFinalVolumeOk returns a tuple with the FinalVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransfer) GetFinalVolumeOk() (*DeprecatedContainerVolumeForInput, bool) {
	if o == nil || isNil(o.FinalVolume) {
    return nil, false
	}
	return o.FinalVolume, true
}

// HasFinalVolume returns a boolean if a field has been set.
func (o *MultipleContainersTransfer) HasFinalVolume() bool {
	if o != nil && !isNil(o.FinalVolume) {
		return true
	}

	return false
}

// SetFinalVolume gets a reference to the given DeprecatedContainerVolumeForInput and assigns it to the FinalVolume field.
func (o *MultipleContainersTransfer) SetFinalVolume(v DeprecatedContainerVolumeForInput) {
	o.FinalVolume = &v
}

// GetSourceConcentration returns the SourceConcentration field value if set, zero value otherwise.
func (o *MultipleContainersTransfer) GetSourceConcentration() map[string]interface{} {
	if o == nil || isNil(o.SourceConcentration) {
		var ret map[string]interface{}
		return ret
	}
	return o.SourceConcentration
}

// GetSourceConcentrationOk returns a tuple with the SourceConcentration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransfer) GetSourceConcentrationOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.SourceConcentration) {
    return map[string]interface{}{}, false
	}
	return o.SourceConcentration, true
}

// HasSourceConcentration returns a boolean if a field has been set.
func (o *MultipleContainersTransfer) HasSourceConcentration() bool {
	if o != nil && !isNil(o.SourceConcentration) {
		return true
	}

	return false
}

// SetSourceConcentration gets a reference to the given map[string]interface{} and assigns it to the SourceConcentration field.
func (o *MultipleContainersTransfer) SetSourceConcentration(v map[string]interface{}) {
	o.SourceConcentration = v
}

func (o MultipleContainersTransfer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SourceBatchId) {
		toSerialize["sourceBatchId"] = o.SourceBatchId
	}
	if !isNil(o.SourceContainerId) {
		toSerialize["sourceContainerId"] = o.SourceContainerId
	}
	if !isNil(o.SourceEntityId) {
		toSerialize["sourceEntityId"] = o.SourceEntityId
	}
	if !isNil(o.TransferQuantity) {
		toSerialize["transferQuantity"] = o.TransferQuantity
	}
	if !isNil(o.TransferVolume) {
		toSerialize["transferVolume"] = o.TransferVolume
	}
	if true {
		toSerialize["destinationContainerId"] = o.DestinationContainerId
	}
	if !isNil(o.FinalQuantity) {
		toSerialize["finalQuantity"] = o.FinalQuantity
	}
	if !isNil(o.FinalVolume) {
		toSerialize["finalVolume"] = o.FinalVolume
	}
	if !isNil(o.SourceConcentration) {
		toSerialize["sourceConcentration"] = o.SourceConcentration
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleContainersTransfer struct {
	value *MultipleContainersTransfer
	isSet bool
}

func (v NullableMultipleContainersTransfer) Get() *MultipleContainersTransfer {
	return v.value
}

func (v *NullableMultipleContainersTransfer) Set(val *MultipleContainersTransfer) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleContainersTransfer) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleContainersTransfer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleContainersTransfer(val *MultipleContainersTransfer) *NullableMultipleContainersTransfer {
	return &NullableMultipleContainersTransfer{value: val, isSet: true}
}

func (v NullableMultipleContainersTransfer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleContainersTransfer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


