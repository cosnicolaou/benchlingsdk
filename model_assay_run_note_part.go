/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AssayRunNotePart struct for AssayRunNotePart
type AssayRunNotePart struct {
	// All notes have an indentation level - the default is 0 for no indent. For lists, indentation gives notes hierarchy - a bulleted list with children is modeled as one note part with indentation 1 followed by note parts with indentation 2, for example.
	Indentation *int32 `json:"indentation,omitempty"`
	Type *string `json:"type,omitempty"`
	AssayRunId NullableString `json:"assayRunId,omitempty"`
	AssayRunSchemaId *string `json:"assayRunSchemaId,omitempty"`
}

// NewAssayRunNotePart instantiates a new AssayRunNotePart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssayRunNotePart() *AssayRunNotePart {
	this := AssayRunNotePart{}
	var indentation int32 = 0
	this.Indentation = &indentation
	return &this
}

// NewAssayRunNotePartWithDefaults instantiates a new AssayRunNotePart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssayRunNotePartWithDefaults() *AssayRunNotePart {
	this := AssayRunNotePart{}
	var indentation int32 = 0
	this.Indentation = &indentation
	return &this
}

// GetIndentation returns the Indentation field value if set, zero value otherwise.
func (o *AssayRunNotePart) GetIndentation() int32 {
	if o == nil || isNil(o.Indentation) {
		var ret int32
		return ret
	}
	return *o.Indentation
}

// GetIndentationOk returns a tuple with the Indentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunNotePart) GetIndentationOk() (*int32, bool) {
	if o == nil || isNil(o.Indentation) {
    return nil, false
	}
	return o.Indentation, true
}

// HasIndentation returns a boolean if a field has been set.
func (o *AssayRunNotePart) HasIndentation() bool {
	if o != nil && !isNil(o.Indentation) {
		return true
	}

	return false
}

// SetIndentation gets a reference to the given int32 and assigns it to the Indentation field.
func (o *AssayRunNotePart) SetIndentation(v int32) {
	o.Indentation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AssayRunNotePart) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunNotePart) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AssayRunNotePart) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AssayRunNotePart) SetType(v string) {
	o.Type = &v
}

// GetAssayRunId returns the AssayRunId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssayRunNotePart) GetAssayRunId() string {
	if o == nil || isNil(o.AssayRunId.Get()) {
		var ret string
		return ret
	}
	return *o.AssayRunId.Get()
}

// GetAssayRunIdOk returns a tuple with the AssayRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssayRunNotePart) GetAssayRunIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.AssayRunId.Get(), o.AssayRunId.IsSet()
}

// HasAssayRunId returns a boolean if a field has been set.
func (o *AssayRunNotePart) HasAssayRunId() bool {
	if o != nil && o.AssayRunId.IsSet() {
		return true
	}

	return false
}

// SetAssayRunId gets a reference to the given NullableString and assigns it to the AssayRunId field.
func (o *AssayRunNotePart) SetAssayRunId(v string) {
	o.AssayRunId.Set(&v)
}
// SetAssayRunIdNil sets the value for AssayRunId to be an explicit nil
func (o *AssayRunNotePart) SetAssayRunIdNil() {
	o.AssayRunId.Set(nil)
}

// UnsetAssayRunId ensures that no value is present for AssayRunId, not even an explicit nil
func (o *AssayRunNotePart) UnsetAssayRunId() {
	o.AssayRunId.Unset()
}

// GetAssayRunSchemaId returns the AssayRunSchemaId field value if set, zero value otherwise.
func (o *AssayRunNotePart) GetAssayRunSchemaId() string {
	if o == nil || isNil(o.AssayRunSchemaId) {
		var ret string
		return ret
	}
	return *o.AssayRunSchemaId
}

// GetAssayRunSchemaIdOk returns a tuple with the AssayRunSchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunNotePart) GetAssayRunSchemaIdOk() (*string, bool) {
	if o == nil || isNil(o.AssayRunSchemaId) {
    return nil, false
	}
	return o.AssayRunSchemaId, true
}

// HasAssayRunSchemaId returns a boolean if a field has been set.
func (o *AssayRunNotePart) HasAssayRunSchemaId() bool {
	if o != nil && !isNil(o.AssayRunSchemaId) {
		return true
	}

	return false
}

// SetAssayRunSchemaId gets a reference to the given string and assigns it to the AssayRunSchemaId field.
func (o *AssayRunNotePart) SetAssayRunSchemaId(v string) {
	o.AssayRunSchemaId = &v
}

func (o AssayRunNotePart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Indentation) {
		toSerialize["indentation"] = o.Indentation
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.AssayRunId.IsSet() {
		toSerialize["assayRunId"] = o.AssayRunId.Get()
	}
	if !isNil(o.AssayRunSchemaId) {
		toSerialize["assayRunSchemaId"] = o.AssayRunSchemaId
	}
	return json.Marshal(toSerialize)
}

type NullableAssayRunNotePart struct {
	value *AssayRunNotePart
	isSet bool
}

func (v NullableAssayRunNotePart) Get() *AssayRunNotePart {
	return v.value
}

func (v *NullableAssayRunNotePart) Set(val *AssayRunNotePart) {
	v.value = val
	v.isSet = true
}

func (v NullableAssayRunNotePart) IsSet() bool {
	return v.isSet
}

func (v *NullableAssayRunNotePart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssayRunNotePart(val *AssayRunNotePart) *NullableAssayRunNotePart {
	return &NullableAssayRunNotePart{value: val, isSet: true}
}

func (v NullableAssayRunNotePart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssayRunNotePart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


