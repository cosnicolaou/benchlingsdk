/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// Ingredient struct for Ingredient
type Ingredient struct {
	// The amount value of this ingredient in its mixture, in string format (to preserve full precision). Pair with `units`. Supports scientific notation (1.23e4). One ingredient on this mixture can have an amount value of `\"QS\"`. 
	Amount NullableString `json:"amount,omitempty"`
	CatalogIdentifier NullableString `json:"catalogIdentifier,omitempty"`
	ComponentEntity *IngredientComponentEntity `json:"componentEntity,omitempty"`
	ComponentLotContainer NullableIngredientComponentLotContainer `json:"componentLotContainer,omitempty"`
	ComponentLotEntity NullableIngredientComponentLotEntity `json:"componentLotEntity,omitempty"`
	// Text representing the component lot for this ingredient. This is only present if the mixture schema supports component lots in \"text\" format.
	ComponentLotText NullableString `json:"componentLotText,omitempty"`
	HasParent *bool `json:"hasParent,omitempty"`
	Notes NullableString `json:"notes,omitempty"`
	// The target amount for this ingredient such that this ingredient's proportion in its mixture would preserve the equivalent ingredient's proportion in the parent mixture. Pair with `units`.
	TargetAmount NullableString `json:"targetAmount,omitempty"`
	Units NullableIngredientMeasurementUnits `json:"units,omitempty"`
}

// NewIngredient instantiates a new Ingredient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIngredient() *Ingredient {
	this := Ingredient{}
	return &this
}

// NewIngredientWithDefaults instantiates a new Ingredient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIngredientWithDefaults() *Ingredient {
	this := Ingredient{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ingredient) GetAmount() string {
	if o == nil || isNil(o.Amount.Get()) {
		var ret string
		return ret
	}
	return *o.Amount.Get()
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ingredient) GetAmountOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Amount.Get(), o.Amount.IsSet()
}

// HasAmount returns a boolean if a field has been set.
func (o *Ingredient) HasAmount() bool {
	if o != nil && o.Amount.IsSet() {
		return true
	}

	return false
}

// SetAmount gets a reference to the given NullableString and assigns it to the Amount field.
func (o *Ingredient) SetAmount(v string) {
	o.Amount.Set(&v)
}
// SetAmountNil sets the value for Amount to be an explicit nil
func (o *Ingredient) SetAmountNil() {
	o.Amount.Set(nil)
}

// UnsetAmount ensures that no value is present for Amount, not even an explicit nil
func (o *Ingredient) UnsetAmount() {
	o.Amount.Unset()
}

// GetCatalogIdentifier returns the CatalogIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ingredient) GetCatalogIdentifier() string {
	if o == nil || isNil(o.CatalogIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.CatalogIdentifier.Get()
}

// GetCatalogIdentifierOk returns a tuple with the CatalogIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ingredient) GetCatalogIdentifierOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.CatalogIdentifier.Get(), o.CatalogIdentifier.IsSet()
}

// HasCatalogIdentifier returns a boolean if a field has been set.
func (o *Ingredient) HasCatalogIdentifier() bool {
	if o != nil && o.CatalogIdentifier.IsSet() {
		return true
	}

	return false
}

// SetCatalogIdentifier gets a reference to the given NullableString and assigns it to the CatalogIdentifier field.
func (o *Ingredient) SetCatalogIdentifier(v string) {
	o.CatalogIdentifier.Set(&v)
}
// SetCatalogIdentifierNil sets the value for CatalogIdentifier to be an explicit nil
func (o *Ingredient) SetCatalogIdentifierNil() {
	o.CatalogIdentifier.Set(nil)
}

// UnsetCatalogIdentifier ensures that no value is present for CatalogIdentifier, not even an explicit nil
func (o *Ingredient) UnsetCatalogIdentifier() {
	o.CatalogIdentifier.Unset()
}

// GetComponentEntity returns the ComponentEntity field value if set, zero value otherwise.
func (o *Ingredient) GetComponentEntity() IngredientComponentEntity {
	if o == nil || isNil(o.ComponentEntity) {
		var ret IngredientComponentEntity
		return ret
	}
	return *o.ComponentEntity
}

// GetComponentEntityOk returns a tuple with the ComponentEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ingredient) GetComponentEntityOk() (*IngredientComponentEntity, bool) {
	if o == nil || isNil(o.ComponentEntity) {
    return nil, false
	}
	return o.ComponentEntity, true
}

// HasComponentEntity returns a boolean if a field has been set.
func (o *Ingredient) HasComponentEntity() bool {
	if o != nil && !isNil(o.ComponentEntity) {
		return true
	}

	return false
}

// SetComponentEntity gets a reference to the given IngredientComponentEntity and assigns it to the ComponentEntity field.
func (o *Ingredient) SetComponentEntity(v IngredientComponentEntity) {
	o.ComponentEntity = &v
}

// GetComponentLotContainer returns the ComponentLotContainer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ingredient) GetComponentLotContainer() IngredientComponentLotContainer {
	if o == nil || isNil(o.ComponentLotContainer.Get()) {
		var ret IngredientComponentLotContainer
		return ret
	}
	return *o.ComponentLotContainer.Get()
}

// GetComponentLotContainerOk returns a tuple with the ComponentLotContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ingredient) GetComponentLotContainerOk() (*IngredientComponentLotContainer, bool) {
	if o == nil {
    return nil, false
	}
	return o.ComponentLotContainer.Get(), o.ComponentLotContainer.IsSet()
}

// HasComponentLotContainer returns a boolean if a field has been set.
func (o *Ingredient) HasComponentLotContainer() bool {
	if o != nil && o.ComponentLotContainer.IsSet() {
		return true
	}

	return false
}

// SetComponentLotContainer gets a reference to the given NullableIngredientComponentLotContainer and assigns it to the ComponentLotContainer field.
func (o *Ingredient) SetComponentLotContainer(v IngredientComponentLotContainer) {
	o.ComponentLotContainer.Set(&v)
}
// SetComponentLotContainerNil sets the value for ComponentLotContainer to be an explicit nil
func (o *Ingredient) SetComponentLotContainerNil() {
	o.ComponentLotContainer.Set(nil)
}

// UnsetComponentLotContainer ensures that no value is present for ComponentLotContainer, not even an explicit nil
func (o *Ingredient) UnsetComponentLotContainer() {
	o.ComponentLotContainer.Unset()
}

// GetComponentLotEntity returns the ComponentLotEntity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ingredient) GetComponentLotEntity() IngredientComponentLotEntity {
	if o == nil || isNil(o.ComponentLotEntity.Get()) {
		var ret IngredientComponentLotEntity
		return ret
	}
	return *o.ComponentLotEntity.Get()
}

// GetComponentLotEntityOk returns a tuple with the ComponentLotEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ingredient) GetComponentLotEntityOk() (*IngredientComponentLotEntity, bool) {
	if o == nil {
    return nil, false
	}
	return o.ComponentLotEntity.Get(), o.ComponentLotEntity.IsSet()
}

// HasComponentLotEntity returns a boolean if a field has been set.
func (o *Ingredient) HasComponentLotEntity() bool {
	if o != nil && o.ComponentLotEntity.IsSet() {
		return true
	}

	return false
}

// SetComponentLotEntity gets a reference to the given NullableIngredientComponentLotEntity and assigns it to the ComponentLotEntity field.
func (o *Ingredient) SetComponentLotEntity(v IngredientComponentLotEntity) {
	o.ComponentLotEntity.Set(&v)
}
// SetComponentLotEntityNil sets the value for ComponentLotEntity to be an explicit nil
func (o *Ingredient) SetComponentLotEntityNil() {
	o.ComponentLotEntity.Set(nil)
}

// UnsetComponentLotEntity ensures that no value is present for ComponentLotEntity, not even an explicit nil
func (o *Ingredient) UnsetComponentLotEntity() {
	o.ComponentLotEntity.Unset()
}

// GetComponentLotText returns the ComponentLotText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ingredient) GetComponentLotText() string {
	if o == nil || isNil(o.ComponentLotText.Get()) {
		var ret string
		return ret
	}
	return *o.ComponentLotText.Get()
}

// GetComponentLotTextOk returns a tuple with the ComponentLotText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ingredient) GetComponentLotTextOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ComponentLotText.Get(), o.ComponentLotText.IsSet()
}

// HasComponentLotText returns a boolean if a field has been set.
func (o *Ingredient) HasComponentLotText() bool {
	if o != nil && o.ComponentLotText.IsSet() {
		return true
	}

	return false
}

// SetComponentLotText gets a reference to the given NullableString and assigns it to the ComponentLotText field.
func (o *Ingredient) SetComponentLotText(v string) {
	o.ComponentLotText.Set(&v)
}
// SetComponentLotTextNil sets the value for ComponentLotText to be an explicit nil
func (o *Ingredient) SetComponentLotTextNil() {
	o.ComponentLotText.Set(nil)
}

// UnsetComponentLotText ensures that no value is present for ComponentLotText, not even an explicit nil
func (o *Ingredient) UnsetComponentLotText() {
	o.ComponentLotText.Unset()
}

// GetHasParent returns the HasParent field value if set, zero value otherwise.
func (o *Ingredient) GetHasParent() bool {
	if o == nil || isNil(o.HasParent) {
		var ret bool
		return ret
	}
	return *o.HasParent
}

// GetHasParentOk returns a tuple with the HasParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ingredient) GetHasParentOk() (*bool, bool) {
	if o == nil || isNil(o.HasParent) {
    return nil, false
	}
	return o.HasParent, true
}

// HasHasParent returns a boolean if a field has been set.
func (o *Ingredient) HasHasParent() bool {
	if o != nil && !isNil(o.HasParent) {
		return true
	}

	return false
}

// SetHasParent gets a reference to the given bool and assigns it to the HasParent field.
func (o *Ingredient) SetHasParent(v bool) {
	o.HasParent = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ingredient) GetNotes() string {
	if o == nil || isNil(o.Notes.Get()) {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ingredient) GetNotesOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *Ingredient) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *Ingredient) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *Ingredient) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *Ingredient) UnsetNotes() {
	o.Notes.Unset()
}

// GetTargetAmount returns the TargetAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ingredient) GetTargetAmount() string {
	if o == nil || isNil(o.TargetAmount.Get()) {
		var ret string
		return ret
	}
	return *o.TargetAmount.Get()
}

// GetTargetAmountOk returns a tuple with the TargetAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ingredient) GetTargetAmountOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.TargetAmount.Get(), o.TargetAmount.IsSet()
}

// HasTargetAmount returns a boolean if a field has been set.
func (o *Ingredient) HasTargetAmount() bool {
	if o != nil && o.TargetAmount.IsSet() {
		return true
	}

	return false
}

// SetTargetAmount gets a reference to the given NullableString and assigns it to the TargetAmount field.
func (o *Ingredient) SetTargetAmount(v string) {
	o.TargetAmount.Set(&v)
}
// SetTargetAmountNil sets the value for TargetAmount to be an explicit nil
func (o *Ingredient) SetTargetAmountNil() {
	o.TargetAmount.Set(nil)
}

// UnsetTargetAmount ensures that no value is present for TargetAmount, not even an explicit nil
func (o *Ingredient) UnsetTargetAmount() {
	o.TargetAmount.Unset()
}

// GetUnits returns the Units field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ingredient) GetUnits() IngredientMeasurementUnits {
	if o == nil || isNil(o.Units.Get()) {
		var ret IngredientMeasurementUnits
		return ret
	}
	return *o.Units.Get()
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ingredient) GetUnitsOk() (*IngredientMeasurementUnits, bool) {
	if o == nil {
    return nil, false
	}
	return o.Units.Get(), o.Units.IsSet()
}

// HasUnits returns a boolean if a field has been set.
func (o *Ingredient) HasUnits() bool {
	if o != nil && o.Units.IsSet() {
		return true
	}

	return false
}

// SetUnits gets a reference to the given NullableIngredientMeasurementUnits and assigns it to the Units field.
func (o *Ingredient) SetUnits(v IngredientMeasurementUnits) {
	o.Units.Set(&v)
}
// SetUnitsNil sets the value for Units to be an explicit nil
func (o *Ingredient) SetUnitsNil() {
	o.Units.Set(nil)
}

// UnsetUnits ensures that no value is present for Units, not even an explicit nil
func (o *Ingredient) UnsetUnits() {
	o.Units.Unset()
}

func (o Ingredient) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Amount.IsSet() {
		toSerialize["amount"] = o.Amount.Get()
	}
	if o.CatalogIdentifier.IsSet() {
		toSerialize["catalogIdentifier"] = o.CatalogIdentifier.Get()
	}
	if !isNil(o.ComponentEntity) {
		toSerialize["componentEntity"] = o.ComponentEntity
	}
	if o.ComponentLotContainer.IsSet() {
		toSerialize["componentLotContainer"] = o.ComponentLotContainer.Get()
	}
	if o.ComponentLotEntity.IsSet() {
		toSerialize["componentLotEntity"] = o.ComponentLotEntity.Get()
	}
	if o.ComponentLotText.IsSet() {
		toSerialize["componentLotText"] = o.ComponentLotText.Get()
	}
	if !isNil(o.HasParent) {
		toSerialize["hasParent"] = o.HasParent
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if o.TargetAmount.IsSet() {
		toSerialize["targetAmount"] = o.TargetAmount.Get()
	}
	if o.Units.IsSet() {
		toSerialize["units"] = o.Units.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIngredient struct {
	value *Ingredient
	isSet bool
}

func (v NullableIngredient) Get() *Ingredient {
	return v.value
}

func (v *NullableIngredient) Set(val *Ingredient) {
	v.value = val
	v.isSet = true
}

func (v NullableIngredient) IsSet() bool {
	return v.isSet
}

func (v *NullableIngredient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngredient(val *Ingredient) *NullableIngredient {
	return &NullableIngredient{value: val, isSet: true}
}

func (v NullableIngredient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngredient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


