/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// SchemaDependencySubtypes the model 'SchemaDependencySubtypes'
type SchemaDependencySubtypes string

// List of SchemaDependencySubtypes
const (
	AA_SEQUENCE SchemaDependencySubtypes = "aa_sequence"
	DNA_SEQUENCE SchemaDependencySubtypes = "dna_sequence"
	CUSTOM_ENTITY SchemaDependencySubtypes = "custom_entity"
	MIXTURE SchemaDependencySubtypes = "mixture"
	MOLECULE SchemaDependencySubtypes = "molecule"
	DNA_OLIGO SchemaDependencySubtypes = "dna_oligo"
	RNA_OLIGO SchemaDependencySubtypes = "rna_oligo"
	RNA_SEQUENCE SchemaDependencySubtypes = "rna_sequence"
)

// All allowed values of SchemaDependencySubtypes enum
var AllowedSchemaDependencySubtypesEnumValues = []SchemaDependencySubtypes{
	"aa_sequence",
	"dna_sequence",
	"custom_entity",
	"mixture",
	"molecule",
	"dna_oligo",
	"rna_oligo",
	"rna_sequence",
}

func (v *SchemaDependencySubtypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaDependencySubtypes(value)
	for _, existing := range AllowedSchemaDependencySubtypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaDependencySubtypes", value)
}

// NewSchemaDependencySubtypesFromValue returns a pointer to a valid SchemaDependencySubtypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemaDependencySubtypesFromValue(v string) (*SchemaDependencySubtypes, error) {
	ev := SchemaDependencySubtypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemaDependencySubtypes: valid values are %v", v, AllowedSchemaDependencySubtypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemaDependencySubtypes) IsValid() bool {
	for _, existing := range AllowedSchemaDependencySubtypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SchemaDependencySubtypes value
func (v SchemaDependencySubtypes) Ptr() *SchemaDependencySubtypes {
	return &v
}

type NullableSchemaDependencySubtypes struct {
	value *SchemaDependencySubtypes
	isSet bool
}

func (v NullableSchemaDependencySubtypes) Get() *SchemaDependencySubtypes {
	return v.value
}

func (v *NullableSchemaDependencySubtypes) Set(val *SchemaDependencySubtypes) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaDependencySubtypes) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaDependencySubtypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaDependencySubtypes(val *SchemaDependencySubtypes) *NullableSchemaDependencySubtypes {
	return &NullableSchemaDependencySubtypes{value: val, isSet: true}
}

func (v NullableSchemaDependencySubtypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaDependencySubtypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

