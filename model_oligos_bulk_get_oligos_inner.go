/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// OligosBulkGetOligosInner struct for OligosBulkGetOligosInner
type OligosBulkGetOligosInner struct {
	DnaOligo *DnaOligo
	RnaOligo *RnaOligo
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *OligosBulkGetOligosInner) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("failed to unmarshal JSON into map for the discriminator lookup")
	}

	// check if the discriminator value is 'DNA'
	if jsonDict["nucleotideType"] == "DNA" {
		// try to unmarshal JSON data into DnaOligo
		err = json.Unmarshal(data, &dst.DnaOligo);
		if err == nil {
			jsonDnaOligo, _ := json.Marshal(dst.DnaOligo)
			if string(jsonDnaOligo) == "{}" { // empty struct
				dst.DnaOligo = nil
			} else {
				return nil // data stored in dst.DnaOligo, return on the first match
			}
		} else {
			dst.DnaOligo = nil
		}
	}

	// check if the discriminator value is 'DnaOligo'
	if jsonDict["nucleotideType"] == "DnaOligo" {
		// try to unmarshal JSON data into DnaOligo
		err = json.Unmarshal(data, &dst.DnaOligo);
		if err == nil {
			jsonDnaOligo, _ := json.Marshal(dst.DnaOligo)
			if string(jsonDnaOligo) == "{}" { // empty struct
				dst.DnaOligo = nil
			} else {
				return nil // data stored in dst.DnaOligo, return on the first match
			}
		} else {
			dst.DnaOligo = nil
		}
	}

	// check if the discriminator value is 'RNA'
	if jsonDict["nucleotideType"] == "RNA" {
		// try to unmarshal JSON data into RnaOligo
		err = json.Unmarshal(data, &dst.RnaOligo);
		if err == nil {
			jsonRnaOligo, _ := json.Marshal(dst.RnaOligo)
			if string(jsonRnaOligo) == "{}" { // empty struct
				dst.RnaOligo = nil
			} else {
				return nil // data stored in dst.RnaOligo, return on the first match
			}
		} else {
			dst.RnaOligo = nil
		}
	}

	// check if the discriminator value is 'RnaOligo'
	if jsonDict["nucleotideType"] == "RnaOligo" {
		// try to unmarshal JSON data into RnaOligo
		err = json.Unmarshal(data, &dst.RnaOligo);
		if err == nil {
			jsonRnaOligo, _ := json.Marshal(dst.RnaOligo)
			if string(jsonRnaOligo) == "{}" { // empty struct
				dst.RnaOligo = nil
			} else {
				return nil // data stored in dst.RnaOligo, return on the first match
			}
		} else {
			dst.RnaOligo = nil
		}
	}

	// try to unmarshal JSON data into DnaOligo
	err = json.Unmarshal(data, &dst.DnaOligo);
	if err == nil {
		jsonDnaOligo, _ := json.Marshal(dst.DnaOligo)
		if string(jsonDnaOligo) == "{}" { // empty struct
			dst.DnaOligo = nil
		} else {
			return nil // data stored in dst.DnaOligo, return on the first match
		}
	} else {
		dst.DnaOligo = nil
	}

	// try to unmarshal JSON data into RnaOligo
	err = json.Unmarshal(data, &dst.RnaOligo);
	if err == nil {
		jsonRnaOligo, _ := json.Marshal(dst.RnaOligo)
		if string(jsonRnaOligo) == "{}" { // empty struct
			dst.RnaOligo = nil
		} else {
			return nil // data stored in dst.RnaOligo, return on the first match
		}
	} else {
		dst.RnaOligo = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(OligosBulkGetOligosInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *OligosBulkGetOligosInner) MarshalJSON() ([]byte, error) {
	if src.DnaOligo != nil {
		return json.Marshal(&src.DnaOligo)
	}

	if src.RnaOligo != nil {
		return json.Marshal(&src.RnaOligo)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableOligosBulkGetOligosInner struct {
	value *OligosBulkGetOligosInner
	isSet bool
}

func (v NullableOligosBulkGetOligosInner) Get() *OligosBulkGetOligosInner {
	return v.value
}

func (v *NullableOligosBulkGetOligosInner) Set(val *OligosBulkGetOligosInner) {
	v.value = val
	v.isSet = true
}

func (v NullableOligosBulkGetOligosInner) IsSet() bool {
	return v.isSet
}

func (v *NullableOligosBulkGetOligosInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOligosBulkGetOligosInner(val *OligosBulkGetOligosInner) *NullableOligosBulkGetOligosInner {
	return &NullableOligosBulkGetOligosInner{value: val, isSet: true}
}

func (v NullableOligosBulkGetOligosInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOligosBulkGetOligosInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


