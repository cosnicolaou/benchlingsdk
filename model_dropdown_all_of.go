/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// DropdownAllOf struct for DropdownAllOf
type DropdownAllOf struct {
	ArchiveRecord NullableArchiveRecord `json:"archiveRecord,omitempty"`
	// Array of dropdown options
	Options []DropdownOption `json:"options,omitempty"`
}

// NewDropdownAllOf instantiates a new DropdownAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDropdownAllOf() *DropdownAllOf {
	this := DropdownAllOf{}
	return &this
}

// NewDropdownAllOfWithDefaults instantiates a new DropdownAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDropdownAllOfWithDefaults() *DropdownAllOf {
	this := DropdownAllOf{}
	return &this
}

// GetArchiveRecord returns the ArchiveRecord field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DropdownAllOf) GetArchiveRecord() ArchiveRecord {
	if o == nil || isNil(o.ArchiveRecord.Get()) {
		var ret ArchiveRecord
		return ret
	}
	return *o.ArchiveRecord.Get()
}

// GetArchiveRecordOk returns a tuple with the ArchiveRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DropdownAllOf) GetArchiveRecordOk() (*ArchiveRecord, bool) {
	if o == nil {
    return nil, false
	}
	return o.ArchiveRecord.Get(), o.ArchiveRecord.IsSet()
}

// HasArchiveRecord returns a boolean if a field has been set.
func (o *DropdownAllOf) HasArchiveRecord() bool {
	if o != nil && o.ArchiveRecord.IsSet() {
		return true
	}

	return false
}

// SetArchiveRecord gets a reference to the given NullableArchiveRecord and assigns it to the ArchiveRecord field.
func (o *DropdownAllOf) SetArchiveRecord(v ArchiveRecord) {
	o.ArchiveRecord.Set(&v)
}
// SetArchiveRecordNil sets the value for ArchiveRecord to be an explicit nil
func (o *DropdownAllOf) SetArchiveRecordNil() {
	o.ArchiveRecord.Set(nil)
}

// UnsetArchiveRecord ensures that no value is present for ArchiveRecord, not even an explicit nil
func (o *DropdownAllOf) UnsetArchiveRecord() {
	o.ArchiveRecord.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *DropdownAllOf) GetOptions() []DropdownOption {
	if o == nil || isNil(o.Options) {
		var ret []DropdownOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DropdownAllOf) GetOptionsOk() ([]DropdownOption, bool) {
	if o == nil || isNil(o.Options) {
    return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *DropdownAllOf) HasOptions() bool {
	if o != nil && !isNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []DropdownOption and assigns it to the Options field.
func (o *DropdownAllOf) SetOptions(v []DropdownOption) {
	o.Options = v
}

func (o DropdownAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveRecord.IsSet() {
		toSerialize["archiveRecord"] = o.ArchiveRecord.Get()
	}
	if !isNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableDropdownAllOf struct {
	value *DropdownAllOf
	isSet bool
}

func (v NullableDropdownAllOf) Get() *DropdownAllOf {
	return v.value
}

func (v *NullableDropdownAllOf) Set(val *DropdownAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDropdownAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDropdownAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDropdownAllOf(val *DropdownAllOf) *NullableDropdownAllOf {
	return &NullableDropdownAllOf{value: val, isSet: true}
}

func (v NullableDropdownAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDropdownAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


