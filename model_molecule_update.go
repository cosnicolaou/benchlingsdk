/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// MoleculeUpdate struct for MoleculeUpdate
type MoleculeUpdate struct {
	EntityRegistryId *string `json:"entityRegistryId,omitempty"`
	// Aliases to add to the Molecule.
	Aliases []string `json:"aliases,omitempty"`
	// IDs of users to set as the Molecule's authors.
	AuthorIds []string `json:"authorIds,omitempty"`
	ChemicalStructure *MoleculeBaseRequestChemicalStructure `json:"chemicalStructure,omitempty"`
	// Custom fields to add to the Molecule. Every field should have its name as a key, mapping to an object with information about the value of the field. 
	CustomFields *ModelMap `json:"customFields,omitempty"`
	// Fields to set on the Molecule. Must correspond with the schema's field definitions. Every field should have its name as a key, mapping to an object with information about the value of the field. 
	Fields *ModelMap `json:"fields,omitempty"`
	// ID of the folder containing the Molecule. 
	FolderId *string `json:"folderId,omitempty"`
	// Name of the Molecule. 
	Name *string `json:"name,omitempty"`
	// ID of the Molecule's schema. 
	SchemaId *string `json:"schemaId,omitempty"`
}

// NewMoleculeUpdate instantiates a new MoleculeUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoleculeUpdate() *MoleculeUpdate {
	this := MoleculeUpdate{}
	return &this
}

// NewMoleculeUpdateWithDefaults instantiates a new MoleculeUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoleculeUpdateWithDefaults() *MoleculeUpdate {
	this := MoleculeUpdate{}
	return &this
}

// GetEntityRegistryId returns the EntityRegistryId field value if set, zero value otherwise.
func (o *MoleculeUpdate) GetEntityRegistryId() string {
	if o == nil || isNil(o.EntityRegistryId) {
		var ret string
		return ret
	}
	return *o.EntityRegistryId
}

// GetEntityRegistryIdOk returns a tuple with the EntityRegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeUpdate) GetEntityRegistryIdOk() (*string, bool) {
	if o == nil || isNil(o.EntityRegistryId) {
    return nil, false
	}
	return o.EntityRegistryId, true
}

// HasEntityRegistryId returns a boolean if a field has been set.
func (o *MoleculeUpdate) HasEntityRegistryId() bool {
	if o != nil && !isNil(o.EntityRegistryId) {
		return true
	}

	return false
}

// SetEntityRegistryId gets a reference to the given string and assigns it to the EntityRegistryId field.
func (o *MoleculeUpdate) SetEntityRegistryId(v string) {
	o.EntityRegistryId = &v
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *MoleculeUpdate) GetAliases() []string {
	if o == nil || isNil(o.Aliases) {
		var ret []string
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeUpdate) GetAliasesOk() ([]string, bool) {
	if o == nil || isNil(o.Aliases) {
    return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *MoleculeUpdate) HasAliases() bool {
	if o != nil && !isNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []string and assigns it to the Aliases field.
func (o *MoleculeUpdate) SetAliases(v []string) {
	o.Aliases = v
}

// GetAuthorIds returns the AuthorIds field value if set, zero value otherwise.
func (o *MoleculeUpdate) GetAuthorIds() []string {
	if o == nil || isNil(o.AuthorIds) {
		var ret []string
		return ret
	}
	return o.AuthorIds
}

// GetAuthorIdsOk returns a tuple with the AuthorIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeUpdate) GetAuthorIdsOk() ([]string, bool) {
	if o == nil || isNil(o.AuthorIds) {
    return nil, false
	}
	return o.AuthorIds, true
}

// HasAuthorIds returns a boolean if a field has been set.
func (o *MoleculeUpdate) HasAuthorIds() bool {
	if o != nil && !isNil(o.AuthorIds) {
		return true
	}

	return false
}

// SetAuthorIds gets a reference to the given []string and assigns it to the AuthorIds field.
func (o *MoleculeUpdate) SetAuthorIds(v []string) {
	o.AuthorIds = v
}

// GetChemicalStructure returns the ChemicalStructure field value if set, zero value otherwise.
func (o *MoleculeUpdate) GetChemicalStructure() MoleculeBaseRequestChemicalStructure {
	if o == nil || isNil(o.ChemicalStructure) {
		var ret MoleculeBaseRequestChemicalStructure
		return ret
	}
	return *o.ChemicalStructure
}

// GetChemicalStructureOk returns a tuple with the ChemicalStructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeUpdate) GetChemicalStructureOk() (*MoleculeBaseRequestChemicalStructure, bool) {
	if o == nil || isNil(o.ChemicalStructure) {
    return nil, false
	}
	return o.ChemicalStructure, true
}

// HasChemicalStructure returns a boolean if a field has been set.
func (o *MoleculeUpdate) HasChemicalStructure() bool {
	if o != nil && !isNil(o.ChemicalStructure) {
		return true
	}

	return false
}

// SetChemicalStructure gets a reference to the given MoleculeBaseRequestChemicalStructure and assigns it to the ChemicalStructure field.
func (o *MoleculeUpdate) SetChemicalStructure(v MoleculeBaseRequestChemicalStructure) {
	o.ChemicalStructure = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *MoleculeUpdate) GetCustomFields() ModelMap {
	if o == nil || isNil(o.CustomFields) {
		var ret ModelMap
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeUpdate) GetCustomFieldsOk() (*ModelMap, bool) {
	if o == nil || isNil(o.CustomFields) {
    return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *MoleculeUpdate) HasCustomFields() bool {
	if o != nil && !isNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given ModelMap and assigns it to the CustomFields field.
func (o *MoleculeUpdate) SetCustomFields(v ModelMap) {
	o.CustomFields = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *MoleculeUpdate) GetFields() ModelMap {
	if o == nil || isNil(o.Fields) {
		var ret ModelMap
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeUpdate) GetFieldsOk() (*ModelMap, bool) {
	if o == nil || isNil(o.Fields) {
    return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *MoleculeUpdate) HasFields() bool {
	if o != nil && !isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given ModelMap and assigns it to the Fields field.
func (o *MoleculeUpdate) SetFields(v ModelMap) {
	o.Fields = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *MoleculeUpdate) GetFolderId() string {
	if o == nil || isNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeUpdate) GetFolderIdOk() (*string, bool) {
	if o == nil || isNil(o.FolderId) {
    return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *MoleculeUpdate) HasFolderId() bool {
	if o != nil && !isNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *MoleculeUpdate) SetFolderId(v string) {
	o.FolderId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MoleculeUpdate) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeUpdate) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MoleculeUpdate) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MoleculeUpdate) SetName(v string) {
	o.Name = &v
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise.
func (o *MoleculeUpdate) GetSchemaId() string {
	if o == nil || isNil(o.SchemaId) {
		var ret string
		return ret
	}
	return *o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeUpdate) GetSchemaIdOk() (*string, bool) {
	if o == nil || isNil(o.SchemaId) {
    return nil, false
	}
	return o.SchemaId, true
}

// HasSchemaId returns a boolean if a field has been set.
func (o *MoleculeUpdate) HasSchemaId() bool {
	if o != nil && !isNil(o.SchemaId) {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given string and assigns it to the SchemaId field.
func (o *MoleculeUpdate) SetSchemaId(v string) {
	o.SchemaId = &v
}

func (o MoleculeUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EntityRegistryId) {
		toSerialize["entityRegistryId"] = o.EntityRegistryId
	}
	if !isNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !isNil(o.AuthorIds) {
		toSerialize["authorIds"] = o.AuthorIds
	}
	if !isNil(o.ChemicalStructure) {
		toSerialize["chemicalStructure"] = o.ChemicalStructure
	}
	if !isNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	if !isNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !isNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.SchemaId) {
		toSerialize["schemaId"] = o.SchemaId
	}
	return json.Marshal(toSerialize)
}

type NullableMoleculeUpdate struct {
	value *MoleculeUpdate
	isSet bool
}

func (v NullableMoleculeUpdate) Get() *MoleculeUpdate {
	return v.value
}

func (v *NullableMoleculeUpdate) Set(val *MoleculeUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableMoleculeUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableMoleculeUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoleculeUpdate(val *MoleculeUpdate) *NullableMoleculeUpdate {
	return &NullableMoleculeUpdate{value: val, isSet: true}
}

func (v NullableMoleculeUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoleculeUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


