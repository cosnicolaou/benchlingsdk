/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// WorkflowOutputArchiveReason The reason for archiving the provided workflow outputs. Accepted reasons may differ based on tenant configuration. 
type WorkflowOutputArchiveReason string

// List of WorkflowOutputArchiveReason
const (
	MADE_IN_ERROR WorkflowOutputArchiveReason = "Made in error"
	RETIRED WorkflowOutputArchiveReason = "Retired"
	OTHER WorkflowOutputArchiveReason = "Other"
)

// All allowed values of WorkflowOutputArchiveReason enum
var AllowedWorkflowOutputArchiveReasonEnumValues = []WorkflowOutputArchiveReason{
	"Made in error",
	"Retired",
	"Other",
}

func (v *WorkflowOutputArchiveReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkflowOutputArchiveReason(value)
	for _, existing := range AllowedWorkflowOutputArchiveReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkflowOutputArchiveReason", value)
}

// NewWorkflowOutputArchiveReasonFromValue returns a pointer to a valid WorkflowOutputArchiveReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkflowOutputArchiveReasonFromValue(v string) (*WorkflowOutputArchiveReason, error) {
	ev := WorkflowOutputArchiveReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkflowOutputArchiveReason: valid values are %v", v, AllowedWorkflowOutputArchiveReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkflowOutputArchiveReason) IsValid() bool {
	for _, existing := range AllowedWorkflowOutputArchiveReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkflowOutputArchiveReason value
func (v WorkflowOutputArchiveReason) Ptr() *WorkflowOutputArchiveReason {
	return &v
}

type NullableWorkflowOutputArchiveReason struct {
	value *WorkflowOutputArchiveReason
	isSet bool
}

func (v NullableWorkflowOutputArchiveReason) Get() *WorkflowOutputArchiveReason {
	return v.value
}

func (v *NullableWorkflowOutputArchiveReason) Set(val *WorkflowOutputArchiveReason) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowOutputArchiveReason) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowOutputArchiveReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowOutputArchiveReason(val *WorkflowOutputArchiveReason) *NullableWorkflowOutputArchiveReason {
	return &NullableWorkflowOutputArchiveReason{value: val, isSet: true}
}

func (v NullableWorkflowOutputArchiveReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowOutputArchiveReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

