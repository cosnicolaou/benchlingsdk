/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BlobPart struct for BlobPart
type BlobPart struct {
	ETag *string `json:"eTag,omitempty"`
	PartNumber *int32 `json:"partNumber,omitempty"`
}

// NewBlobPart instantiates a new BlobPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlobPart() *BlobPart {
	this := BlobPart{}
	return &this
}

// NewBlobPartWithDefaults instantiates a new BlobPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlobPartWithDefaults() *BlobPart {
	this := BlobPart{}
	return &this
}

// GetETag returns the ETag field value if set, zero value otherwise.
func (o *BlobPart) GetETag() string {
	if o == nil || isNil(o.ETag) {
		var ret string
		return ret
	}
	return *o.ETag
}

// GetETagOk returns a tuple with the ETag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobPart) GetETagOk() (*string, bool) {
	if o == nil || isNil(o.ETag) {
    return nil, false
	}
	return o.ETag, true
}

// HasETag returns a boolean if a field has been set.
func (o *BlobPart) HasETag() bool {
	if o != nil && !isNil(o.ETag) {
		return true
	}

	return false
}

// SetETag gets a reference to the given string and assigns it to the ETag field.
func (o *BlobPart) SetETag(v string) {
	o.ETag = &v
}

// GetPartNumber returns the PartNumber field value if set, zero value otherwise.
func (o *BlobPart) GetPartNumber() int32 {
	if o == nil || isNil(o.PartNumber) {
		var ret int32
		return ret
	}
	return *o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobPart) GetPartNumberOk() (*int32, bool) {
	if o == nil || isNil(o.PartNumber) {
    return nil, false
	}
	return o.PartNumber, true
}

// HasPartNumber returns a boolean if a field has been set.
func (o *BlobPart) HasPartNumber() bool {
	if o != nil && !isNil(o.PartNumber) {
		return true
	}

	return false
}

// SetPartNumber gets a reference to the given int32 and assigns it to the PartNumber field.
func (o *BlobPart) SetPartNumber(v int32) {
	o.PartNumber = &v
}

func (o BlobPart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ETag) {
		toSerialize["eTag"] = o.ETag
	}
	if !isNil(o.PartNumber) {
		toSerialize["partNumber"] = o.PartNumber
	}
	return json.Marshal(toSerialize)
}

type NullableBlobPart struct {
	value *BlobPart
	isSet bool
}

func (v NullableBlobPart) Get() *BlobPart {
	return v.value
}

func (v *NullableBlobPart) Set(val *BlobPart) {
	v.value = val
	v.isSet = true
}

func (v NullableBlobPart) IsSet() bool {
	return v.isSet
}

func (v *NullableBlobPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlobPart(val *BlobPart) *NullableBlobPart {
	return &NullableBlobPart{value: val, isSet: true}
}

func (v NullableBlobPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlobPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


