/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// LocationsBulkGet struct for LocationsBulkGet
type LocationsBulkGet struct {
	Locations []Location `json:"locations,omitempty"`
}

// NewLocationsBulkGet instantiates a new LocationsBulkGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationsBulkGet() *LocationsBulkGet {
	this := LocationsBulkGet{}
	return &this
}

// NewLocationsBulkGetWithDefaults instantiates a new LocationsBulkGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationsBulkGetWithDefaults() *LocationsBulkGet {
	this := LocationsBulkGet{}
	return &this
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *LocationsBulkGet) GetLocations() []Location {
	if o == nil || isNil(o.Locations) {
		var ret []Location
		return ret
	}
	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationsBulkGet) GetLocationsOk() ([]Location, bool) {
	if o == nil || isNil(o.Locations) {
    return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *LocationsBulkGet) HasLocations() bool {
	if o != nil && !isNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given []Location and assigns it to the Locations field.
func (o *LocationsBulkGet) SetLocations(v []Location) {
	o.Locations = v
}

func (o LocationsBulkGet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	return json.Marshal(toSerialize)
}

type NullableLocationsBulkGet struct {
	value *LocationsBulkGet
	isSet bool
}

func (v NullableLocationsBulkGet) Get() *LocationsBulkGet {
	return v.value
}

func (v *NullableLocationsBulkGet) Set(val *LocationsBulkGet) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationsBulkGet) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationsBulkGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationsBulkGet(val *LocationsBulkGet) *NullableLocationsBulkGet {
	return &NullableLocationsBulkGet{value: val, isSet: true}
}

func (v NullableLocationsBulkGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationsBulkGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


