/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// BatchEntity - struct for BatchEntity
type BatchEntity struct {
	AaSequenceSummary *AaSequenceSummary
	CustomEntitySummary *CustomEntitySummary
	DnaSequenceSummary *DnaSequenceSummary
}

// AaSequenceSummaryAsBatchEntity is a convenience function that returns AaSequenceSummary wrapped in BatchEntity
func AaSequenceSummaryAsBatchEntity(v *AaSequenceSummary) BatchEntity {
	return BatchEntity{
		AaSequenceSummary: v,
	}
}

// CustomEntitySummaryAsBatchEntity is a convenience function that returns CustomEntitySummary wrapped in BatchEntity
func CustomEntitySummaryAsBatchEntity(v *CustomEntitySummary) BatchEntity {
	return BatchEntity{
		CustomEntitySummary: v,
	}
}

// DnaSequenceSummaryAsBatchEntity is a convenience function that returns DnaSequenceSummary wrapped in BatchEntity
func DnaSequenceSummaryAsBatchEntity(v *DnaSequenceSummary) BatchEntity {
	return BatchEntity{
		DnaSequenceSummary: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BatchEntity) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AaSequenceSummary
	err = newStrictDecoder(data).Decode(&dst.AaSequenceSummary)
	if err == nil {
		jsonAaSequenceSummary, _ := json.Marshal(dst.AaSequenceSummary)
		if string(jsonAaSequenceSummary) == "{}" { // empty struct
			dst.AaSequenceSummary = nil
		} else {
			match++
		}
	} else {
		dst.AaSequenceSummary = nil
	}

	// try to unmarshal data into CustomEntitySummary
	err = newStrictDecoder(data).Decode(&dst.CustomEntitySummary)
	if err == nil {
		jsonCustomEntitySummary, _ := json.Marshal(dst.CustomEntitySummary)
		if string(jsonCustomEntitySummary) == "{}" { // empty struct
			dst.CustomEntitySummary = nil
		} else {
			match++
		}
	} else {
		dst.CustomEntitySummary = nil
	}

	// try to unmarshal data into DnaSequenceSummary
	err = newStrictDecoder(data).Decode(&dst.DnaSequenceSummary)
	if err == nil {
		jsonDnaSequenceSummary, _ := json.Marshal(dst.DnaSequenceSummary)
		if string(jsonDnaSequenceSummary) == "{}" { // empty struct
			dst.DnaSequenceSummary = nil
		} else {
			match++
		}
	} else {
		dst.DnaSequenceSummary = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AaSequenceSummary = nil
		dst.CustomEntitySummary = nil
		dst.DnaSequenceSummary = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BatchEntity)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BatchEntity)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BatchEntity) MarshalJSON() ([]byte, error) {
	if src.AaSequenceSummary != nil {
		return json.Marshal(&src.AaSequenceSummary)
	}

	if src.CustomEntitySummary != nil {
		return json.Marshal(&src.CustomEntitySummary)
	}

	if src.DnaSequenceSummary != nil {
		return json.Marshal(&src.DnaSequenceSummary)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BatchEntity) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AaSequenceSummary != nil {
		return obj.AaSequenceSummary
	}

	if obj.CustomEntitySummary != nil {
		return obj.CustomEntitySummary
	}

	if obj.DnaSequenceSummary != nil {
		return obj.DnaSequenceSummary
	}

	// all schemas are nil
	return nil
}

type NullableBatchEntity struct {
	value *BatchEntity
	isSet bool
}

func (v NullableBatchEntity) Get() *BatchEntity {
	return v.value
}

func (v *NullableBatchEntity) Set(val *BatchEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchEntity(val *BatchEntity) *NullableBatchEntity {
	return &NullableBatchEntity{value: val, isSet: true}
}

func (v NullableBatchEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


