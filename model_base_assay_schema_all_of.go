/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BaseAssaySchemaAllOf struct for BaseAssaySchemaAllOf
type BaseAssaySchemaAllOf struct {
	DerivedFrom NullableString `json:"derivedFrom,omitempty"`
	Organization *BaseAssaySchemaAllOfOrganization `json:"organization,omitempty"`
	SystemName *string `json:"systemName,omitempty"`
}

// NewBaseAssaySchemaAllOf instantiates a new BaseAssaySchemaAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseAssaySchemaAllOf() *BaseAssaySchemaAllOf {
	this := BaseAssaySchemaAllOf{}
	return &this
}

// NewBaseAssaySchemaAllOfWithDefaults instantiates a new BaseAssaySchemaAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseAssaySchemaAllOfWithDefaults() *BaseAssaySchemaAllOf {
	this := BaseAssaySchemaAllOf{}
	return &this
}

// GetDerivedFrom returns the DerivedFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BaseAssaySchemaAllOf) GetDerivedFrom() string {
	if o == nil || isNil(o.DerivedFrom.Get()) {
		var ret string
		return ret
	}
	return *o.DerivedFrom.Get()
}

// GetDerivedFromOk returns a tuple with the DerivedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BaseAssaySchemaAllOf) GetDerivedFromOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.DerivedFrom.Get(), o.DerivedFrom.IsSet()
}

// HasDerivedFrom returns a boolean if a field has been set.
func (o *BaseAssaySchemaAllOf) HasDerivedFrom() bool {
	if o != nil && o.DerivedFrom.IsSet() {
		return true
	}

	return false
}

// SetDerivedFrom gets a reference to the given NullableString and assigns it to the DerivedFrom field.
func (o *BaseAssaySchemaAllOf) SetDerivedFrom(v string) {
	o.DerivedFrom.Set(&v)
}
// SetDerivedFromNil sets the value for DerivedFrom to be an explicit nil
func (o *BaseAssaySchemaAllOf) SetDerivedFromNil() {
	o.DerivedFrom.Set(nil)
}

// UnsetDerivedFrom ensures that no value is present for DerivedFrom, not even an explicit nil
func (o *BaseAssaySchemaAllOf) UnsetDerivedFrom() {
	o.DerivedFrom.Unset()
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *BaseAssaySchemaAllOf) GetOrganization() BaseAssaySchemaAllOfOrganization {
	if o == nil || isNil(o.Organization) {
		var ret BaseAssaySchemaAllOfOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAssaySchemaAllOf) GetOrganizationOk() (*BaseAssaySchemaAllOfOrganization, bool) {
	if o == nil || isNil(o.Organization) {
    return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *BaseAssaySchemaAllOf) HasOrganization() bool {
	if o != nil && !isNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given BaseAssaySchemaAllOfOrganization and assigns it to the Organization field.
func (o *BaseAssaySchemaAllOf) SetOrganization(v BaseAssaySchemaAllOfOrganization) {
	o.Organization = &v
}

// GetSystemName returns the SystemName field value if set, zero value otherwise.
func (o *BaseAssaySchemaAllOf) GetSystemName() string {
	if o == nil || isNil(o.SystemName) {
		var ret string
		return ret
	}
	return *o.SystemName
}

// GetSystemNameOk returns a tuple with the SystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseAssaySchemaAllOf) GetSystemNameOk() (*string, bool) {
	if o == nil || isNil(o.SystemName) {
    return nil, false
	}
	return o.SystemName, true
}

// HasSystemName returns a boolean if a field has been set.
func (o *BaseAssaySchemaAllOf) HasSystemName() bool {
	if o != nil && !isNil(o.SystemName) {
		return true
	}

	return false
}

// SetSystemName gets a reference to the given string and assigns it to the SystemName field.
func (o *BaseAssaySchemaAllOf) SetSystemName(v string) {
	o.SystemName = &v
}

func (o BaseAssaySchemaAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DerivedFrom.IsSet() {
		toSerialize["derivedFrom"] = o.DerivedFrom.Get()
	}
	if !isNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !isNil(o.SystemName) {
		toSerialize["systemName"] = o.SystemName
	}
	return json.Marshal(toSerialize)
}

type NullableBaseAssaySchemaAllOf struct {
	value *BaseAssaySchemaAllOf
	isSet bool
}

func (v NullableBaseAssaySchemaAllOf) Get() *BaseAssaySchemaAllOf {
	return v.value
}

func (v *NullableBaseAssaySchemaAllOf) Set(val *BaseAssaySchemaAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseAssaySchemaAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseAssaySchemaAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseAssaySchemaAllOf(val *BaseAssaySchemaAllOf) *NullableBaseAssaySchemaAllOf {
	return &NullableBaseAssaySchemaAllOf{value: val, isSet: true}
}

func (v NullableBaseAssaySchemaAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseAssaySchemaAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


