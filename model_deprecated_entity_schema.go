/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// DeprecatedEntitySchema struct for DeprecatedEntitySchema
type DeprecatedEntitySchema struct {
	ArchiveRecord NullableAaSequenceArchiveRecord `json:"archiveRecord,omitempty"`
	FieldDefinitions []SchemaFieldDefinitionsInner `json:"fieldDefinitions,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	RegistryId *string `json:"registryId,omitempty"`
	Constraint NullableEntitySchemaAllOfConstraint `json:"constraint,omitempty"`
	ContainableType *string `json:"containableType,omitempty"`
	// DateTime the Entity Schema was last modified
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`
}

// NewDeprecatedEntitySchema instantiates a new DeprecatedEntitySchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeprecatedEntitySchema() *DeprecatedEntitySchema {
	this := DeprecatedEntitySchema{}
	return &this
}

// NewDeprecatedEntitySchemaWithDefaults instantiates a new DeprecatedEntitySchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeprecatedEntitySchemaWithDefaults() *DeprecatedEntitySchema {
	this := DeprecatedEntitySchema{}
	return &this
}

// GetArchiveRecord returns the ArchiveRecord field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeprecatedEntitySchema) GetArchiveRecord() AaSequenceArchiveRecord {
	if o == nil || isNil(o.ArchiveRecord.Get()) {
		var ret AaSequenceArchiveRecord
		return ret
	}
	return *o.ArchiveRecord.Get()
}

// GetArchiveRecordOk returns a tuple with the ArchiveRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeprecatedEntitySchema) GetArchiveRecordOk() (*AaSequenceArchiveRecord, bool) {
	if o == nil {
    return nil, false
	}
	return o.ArchiveRecord.Get(), o.ArchiveRecord.IsSet()
}

// HasArchiveRecord returns a boolean if a field has been set.
func (o *DeprecatedEntitySchema) HasArchiveRecord() bool {
	if o != nil && o.ArchiveRecord.IsSet() {
		return true
	}

	return false
}

// SetArchiveRecord gets a reference to the given NullableAaSequenceArchiveRecord and assigns it to the ArchiveRecord field.
func (o *DeprecatedEntitySchema) SetArchiveRecord(v AaSequenceArchiveRecord) {
	o.ArchiveRecord.Set(&v)
}
// SetArchiveRecordNil sets the value for ArchiveRecord to be an explicit nil
func (o *DeprecatedEntitySchema) SetArchiveRecordNil() {
	o.ArchiveRecord.Set(nil)
}

// UnsetArchiveRecord ensures that no value is present for ArchiveRecord, not even an explicit nil
func (o *DeprecatedEntitySchema) UnsetArchiveRecord() {
	o.ArchiveRecord.Unset()
}

// GetFieldDefinitions returns the FieldDefinitions field value if set, zero value otherwise.
func (o *DeprecatedEntitySchema) GetFieldDefinitions() []SchemaFieldDefinitionsInner {
	if o == nil || isNil(o.FieldDefinitions) {
		var ret []SchemaFieldDefinitionsInner
		return ret
	}
	return o.FieldDefinitions
}

// GetFieldDefinitionsOk returns a tuple with the FieldDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecatedEntitySchema) GetFieldDefinitionsOk() ([]SchemaFieldDefinitionsInner, bool) {
	if o == nil || isNil(o.FieldDefinitions) {
    return nil, false
	}
	return o.FieldDefinitions, true
}

// HasFieldDefinitions returns a boolean if a field has been set.
func (o *DeprecatedEntitySchema) HasFieldDefinitions() bool {
	if o != nil && !isNil(o.FieldDefinitions) {
		return true
	}

	return false
}

// SetFieldDefinitions gets a reference to the given []SchemaFieldDefinitionsInner and assigns it to the FieldDefinitions field.
func (o *DeprecatedEntitySchema) SetFieldDefinitions(v []SchemaFieldDefinitionsInner) {
	o.FieldDefinitions = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeprecatedEntitySchema) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecatedEntitySchema) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeprecatedEntitySchema) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeprecatedEntitySchema) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeprecatedEntitySchema) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecatedEntitySchema) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeprecatedEntitySchema) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeprecatedEntitySchema) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DeprecatedEntitySchema) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecatedEntitySchema) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DeprecatedEntitySchema) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DeprecatedEntitySchema) SetType(v string) {
	o.Type = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *DeprecatedEntitySchema) GetPrefix() string {
	if o == nil || isNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecatedEntitySchema) GetPrefixOk() (*string, bool) {
	if o == nil || isNil(o.Prefix) {
    return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *DeprecatedEntitySchema) HasPrefix() bool {
	if o != nil && !isNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *DeprecatedEntitySchema) SetPrefix(v string) {
	o.Prefix = &v
}

// GetRegistryId returns the RegistryId field value if set, zero value otherwise.
func (o *DeprecatedEntitySchema) GetRegistryId() string {
	if o == nil || isNil(o.RegistryId) {
		var ret string
		return ret
	}
	return *o.RegistryId
}

// GetRegistryIdOk returns a tuple with the RegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecatedEntitySchema) GetRegistryIdOk() (*string, bool) {
	if o == nil || isNil(o.RegistryId) {
    return nil, false
	}
	return o.RegistryId, true
}

// HasRegistryId returns a boolean if a field has been set.
func (o *DeprecatedEntitySchema) HasRegistryId() bool {
	if o != nil && !isNil(o.RegistryId) {
		return true
	}

	return false
}

// SetRegistryId gets a reference to the given string and assigns it to the RegistryId field.
func (o *DeprecatedEntitySchema) SetRegistryId(v string) {
	o.RegistryId = &v
}

// GetConstraint returns the Constraint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeprecatedEntitySchema) GetConstraint() EntitySchemaAllOfConstraint {
	if o == nil || isNil(o.Constraint.Get()) {
		var ret EntitySchemaAllOfConstraint
		return ret
	}
	return *o.Constraint.Get()
}

// GetConstraintOk returns a tuple with the Constraint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeprecatedEntitySchema) GetConstraintOk() (*EntitySchemaAllOfConstraint, bool) {
	if o == nil {
    return nil, false
	}
	return o.Constraint.Get(), o.Constraint.IsSet()
}

// HasConstraint returns a boolean if a field has been set.
func (o *DeprecatedEntitySchema) HasConstraint() bool {
	if o != nil && o.Constraint.IsSet() {
		return true
	}

	return false
}

// SetConstraint gets a reference to the given NullableEntitySchemaAllOfConstraint and assigns it to the Constraint field.
func (o *DeprecatedEntitySchema) SetConstraint(v EntitySchemaAllOfConstraint) {
	o.Constraint.Set(&v)
}
// SetConstraintNil sets the value for Constraint to be an explicit nil
func (o *DeprecatedEntitySchema) SetConstraintNil() {
	o.Constraint.Set(nil)
}

// UnsetConstraint ensures that no value is present for Constraint, not even an explicit nil
func (o *DeprecatedEntitySchema) UnsetConstraint() {
	o.Constraint.Unset()
}

// GetContainableType returns the ContainableType field value if set, zero value otherwise.
func (o *DeprecatedEntitySchema) GetContainableType() string {
	if o == nil || isNil(o.ContainableType) {
		var ret string
		return ret
	}
	return *o.ContainableType
}

// GetContainableTypeOk returns a tuple with the ContainableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecatedEntitySchema) GetContainableTypeOk() (*string, bool) {
	if o == nil || isNil(o.ContainableType) {
    return nil, false
	}
	return o.ContainableType, true
}

// HasContainableType returns a boolean if a field has been set.
func (o *DeprecatedEntitySchema) HasContainableType() bool {
	if o != nil && !isNil(o.ContainableType) {
		return true
	}

	return false
}

// SetContainableType gets a reference to the given string and assigns it to the ContainableType field.
func (o *DeprecatedEntitySchema) SetContainableType(v string) {
	o.ContainableType = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *DeprecatedEntitySchema) GetModifiedAt() time.Time {
	if o == nil || isNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeprecatedEntitySchema) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.ModifiedAt) {
    return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *DeprecatedEntitySchema) HasModifiedAt() bool {
	if o != nil && !isNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *DeprecatedEntitySchema) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

func (o DeprecatedEntitySchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveRecord.IsSet() {
		toSerialize["archiveRecord"] = o.ArchiveRecord.Get()
	}
	if !isNil(o.FieldDefinitions) {
		toSerialize["fieldDefinitions"] = o.FieldDefinitions
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !isNil(o.RegistryId) {
		toSerialize["registryId"] = o.RegistryId
	}
	if o.Constraint.IsSet() {
		toSerialize["constraint"] = o.Constraint.Get()
	}
	if !isNil(o.ContainableType) {
		toSerialize["containableType"] = o.ContainableType
	}
	if !isNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	return json.Marshal(toSerialize)
}

type NullableDeprecatedEntitySchema struct {
	value *DeprecatedEntitySchema
	isSet bool
}

func (v NullableDeprecatedEntitySchema) Get() *DeprecatedEntitySchema {
	return v.value
}

func (v *NullableDeprecatedEntitySchema) Set(val *DeprecatedEntitySchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDeprecatedEntitySchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDeprecatedEntitySchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeprecatedEntitySchema(val *DeprecatedEntitySchema) *NullableDeprecatedEntitySchema {
	return &NullableDeprecatedEntitySchema{value: val, isSet: true}
}

func (v NullableDeprecatedEntitySchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeprecatedEntitySchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


