/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// RegistrySchemaAllOf struct for RegistrySchemaAllOf
type RegistrySchemaAllOf struct {
	Prefix *string `json:"prefix,omitempty"`
	RegistryId *string `json:"registryId,omitempty"`
}

// NewRegistrySchemaAllOf instantiates a new RegistrySchemaAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrySchemaAllOf() *RegistrySchemaAllOf {
	this := RegistrySchemaAllOf{}
	return &this
}

// NewRegistrySchemaAllOfWithDefaults instantiates a new RegistrySchemaAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrySchemaAllOfWithDefaults() *RegistrySchemaAllOf {
	this := RegistrySchemaAllOf{}
	return &this
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *RegistrySchemaAllOf) GetPrefix() string {
	if o == nil || isNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySchemaAllOf) GetPrefixOk() (*string, bool) {
	if o == nil || isNil(o.Prefix) {
    return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *RegistrySchemaAllOf) HasPrefix() bool {
	if o != nil && !isNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *RegistrySchemaAllOf) SetPrefix(v string) {
	o.Prefix = &v
}

// GetRegistryId returns the RegistryId field value if set, zero value otherwise.
func (o *RegistrySchemaAllOf) GetRegistryId() string {
	if o == nil || isNil(o.RegistryId) {
		var ret string
		return ret
	}
	return *o.RegistryId
}

// GetRegistryIdOk returns a tuple with the RegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrySchemaAllOf) GetRegistryIdOk() (*string, bool) {
	if o == nil || isNil(o.RegistryId) {
    return nil, false
	}
	return o.RegistryId, true
}

// HasRegistryId returns a boolean if a field has been set.
func (o *RegistrySchemaAllOf) HasRegistryId() bool {
	if o != nil && !isNil(o.RegistryId) {
		return true
	}

	return false
}

// SetRegistryId gets a reference to the given string and assigns it to the RegistryId field.
func (o *RegistrySchemaAllOf) SetRegistryId(v string) {
	o.RegistryId = &v
}

func (o RegistrySchemaAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !isNil(o.RegistryId) {
		toSerialize["registryId"] = o.RegistryId
	}
	return json.Marshal(toSerialize)
}

type NullableRegistrySchemaAllOf struct {
	value *RegistrySchemaAllOf
	isSet bool
}

func (v NullableRegistrySchemaAllOf) Get() *RegistrySchemaAllOf {
	return v.value
}

func (v *NullableRegistrySchemaAllOf) Set(val *RegistrySchemaAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrySchemaAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrySchemaAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrySchemaAllOf(val *RegistrySchemaAllOf) *NullableRegistrySchemaAllOf {
	return &NullableRegistrySchemaAllOf{value: val, isSet: true}
}

func (v NullableRegistrySchemaAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrySchemaAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


