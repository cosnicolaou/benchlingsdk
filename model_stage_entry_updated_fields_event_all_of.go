/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// StageEntryUpdatedFieldsEventAllOf struct for StageEntryUpdatedFieldsEventAllOf
type StageEntryUpdatedFieldsEventAllOf struct {
	EventType *string `json:"eventType,omitempty"`
	StageEntry *StageEntry `json:"stageEntry,omitempty"`
}

// NewStageEntryUpdatedFieldsEventAllOf instantiates a new StageEntryUpdatedFieldsEventAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStageEntryUpdatedFieldsEventAllOf() *StageEntryUpdatedFieldsEventAllOf {
	this := StageEntryUpdatedFieldsEventAllOf{}
	return &this
}

// NewStageEntryUpdatedFieldsEventAllOfWithDefaults instantiates a new StageEntryUpdatedFieldsEventAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStageEntryUpdatedFieldsEventAllOfWithDefaults() *StageEntryUpdatedFieldsEventAllOf {
	this := StageEntryUpdatedFieldsEventAllOf{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *StageEntryUpdatedFieldsEventAllOf) GetEventType() string {
	if o == nil || isNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StageEntryUpdatedFieldsEventAllOf) GetEventTypeOk() (*string, bool) {
	if o == nil || isNil(o.EventType) {
    return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *StageEntryUpdatedFieldsEventAllOf) HasEventType() bool {
	if o != nil && !isNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *StageEntryUpdatedFieldsEventAllOf) SetEventType(v string) {
	o.EventType = &v
}

// GetStageEntry returns the StageEntry field value if set, zero value otherwise.
func (o *StageEntryUpdatedFieldsEventAllOf) GetStageEntry() StageEntry {
	if o == nil || isNil(o.StageEntry) {
		var ret StageEntry
		return ret
	}
	return *o.StageEntry
}

// GetStageEntryOk returns a tuple with the StageEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StageEntryUpdatedFieldsEventAllOf) GetStageEntryOk() (*StageEntry, bool) {
	if o == nil || isNil(o.StageEntry) {
    return nil, false
	}
	return o.StageEntry, true
}

// HasStageEntry returns a boolean if a field has been set.
func (o *StageEntryUpdatedFieldsEventAllOf) HasStageEntry() bool {
	if o != nil && !isNil(o.StageEntry) {
		return true
	}

	return false
}

// SetStageEntry gets a reference to the given StageEntry and assigns it to the StageEntry field.
func (o *StageEntryUpdatedFieldsEventAllOf) SetStageEntry(v StageEntry) {
	o.StageEntry = &v
}

func (o StageEntryUpdatedFieldsEventAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	if !isNil(o.StageEntry) {
		toSerialize["stageEntry"] = o.StageEntry
	}
	return json.Marshal(toSerialize)
}

type NullableStageEntryUpdatedFieldsEventAllOf struct {
	value *StageEntryUpdatedFieldsEventAllOf
	isSet bool
}

func (v NullableStageEntryUpdatedFieldsEventAllOf) Get() *StageEntryUpdatedFieldsEventAllOf {
	return v.value
}

func (v *NullableStageEntryUpdatedFieldsEventAllOf) Set(val *StageEntryUpdatedFieldsEventAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStageEntryUpdatedFieldsEventAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStageEntryUpdatedFieldsEventAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStageEntryUpdatedFieldsEventAllOf(val *StageEntryUpdatedFieldsEventAllOf) *NullableStageEntryUpdatedFieldsEventAllOf {
	return &NullableStageEntryUpdatedFieldsEventAllOf{value: val, isSet: true}
}

func (v NullableStageEntryUpdatedFieldsEventAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStageEntryUpdatedFieldsEventAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


