/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// StructuredTableColumnInfo struct for StructuredTableColumnInfo
type StructuredTableColumnInfo struct {
	ColumnId *string `json:"columnId,omitempty"`
	IsReadOnly *bool `json:"isReadOnly,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewStructuredTableColumnInfo instantiates a new StructuredTableColumnInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStructuredTableColumnInfo() *StructuredTableColumnInfo {
	this := StructuredTableColumnInfo{}
	return &this
}

// NewStructuredTableColumnInfoWithDefaults instantiates a new StructuredTableColumnInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStructuredTableColumnInfoWithDefaults() *StructuredTableColumnInfo {
	this := StructuredTableColumnInfo{}
	return &this
}

// GetColumnId returns the ColumnId field value if set, zero value otherwise.
func (o *StructuredTableColumnInfo) GetColumnId() string {
	if o == nil || isNil(o.ColumnId) {
		var ret string
		return ret
	}
	return *o.ColumnId
}

// GetColumnIdOk returns a tuple with the ColumnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuredTableColumnInfo) GetColumnIdOk() (*string, bool) {
	if o == nil || isNil(o.ColumnId) {
    return nil, false
	}
	return o.ColumnId, true
}

// HasColumnId returns a boolean if a field has been set.
func (o *StructuredTableColumnInfo) HasColumnId() bool {
	if o != nil && !isNil(o.ColumnId) {
		return true
	}

	return false
}

// SetColumnId gets a reference to the given string and assigns it to the ColumnId field.
func (o *StructuredTableColumnInfo) SetColumnId(v string) {
	o.ColumnId = &v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *StructuredTableColumnInfo) GetIsReadOnly() bool {
	if o == nil || isNil(o.IsReadOnly) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuredTableColumnInfo) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.IsReadOnly) {
    return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *StructuredTableColumnInfo) HasIsReadOnly() bool {
	if o != nil && !isNil(o.IsReadOnly) {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *StructuredTableColumnInfo) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *StructuredTableColumnInfo) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StructuredTableColumnInfo) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *StructuredTableColumnInfo) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *StructuredTableColumnInfo) SetName(v string) {
	o.Name = &v
}

func (o StructuredTableColumnInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ColumnId) {
		toSerialize["columnId"] = o.ColumnId
	}
	if !isNil(o.IsReadOnly) {
		toSerialize["isReadOnly"] = o.IsReadOnly
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableStructuredTableColumnInfo struct {
	value *StructuredTableColumnInfo
	isSet bool
}

func (v NullableStructuredTableColumnInfo) Get() *StructuredTableColumnInfo {
	return v.value
}

func (v *NullableStructuredTableColumnInfo) Set(val *StructuredTableColumnInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStructuredTableColumnInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStructuredTableColumnInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStructuredTableColumnInfo(val *StructuredTableColumnInfo) *NullableStructuredTableColumnInfo {
	return &NullableStructuredTableColumnInfo{value: val, isSet: true}
}

func (v NullableStructuredTableColumnInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStructuredTableColumnInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


