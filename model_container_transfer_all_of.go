/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ContainerTransferAllOf struct for ContainerTransferAllOf
type ContainerTransferAllOf struct {
	// This represents what the contents of the destination container should look like post-transfer. 
	DestinationContents []ContainerTransferDestinationContentsItem `json:"destinationContents"`
	// This represents the desired final quantity of the destination container, post-dilution. If you don't want to dilute the destination container, you can omit this parameter. Supports mass, volume, and other quantities. 
	DestinationQuantity *ContainerQuantity `json:"destinationQuantity,omitempty"`
	// Deprecated - use destinationQuantity instead. 
	DestinationVolume *DeprecatedContainerVolumeForInput `json:"destinationVolume,omitempty"`
}

// NewContainerTransferAllOf instantiates a new ContainerTransferAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerTransferAllOf(destinationContents []ContainerTransferDestinationContentsItem) *ContainerTransferAllOf {
	this := ContainerTransferAllOf{}
	this.DestinationContents = destinationContents
	return &this
}

// NewContainerTransferAllOfWithDefaults instantiates a new ContainerTransferAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerTransferAllOfWithDefaults() *ContainerTransferAllOf {
	this := ContainerTransferAllOf{}
	return &this
}

// GetDestinationContents returns the DestinationContents field value
func (o *ContainerTransferAllOf) GetDestinationContents() []ContainerTransferDestinationContentsItem {
	if o == nil {
		var ret []ContainerTransferDestinationContentsItem
		return ret
	}

	return o.DestinationContents
}

// GetDestinationContentsOk returns a tuple with the DestinationContents field value
// and a boolean to check if the value has been set.
func (o *ContainerTransferAllOf) GetDestinationContentsOk() ([]ContainerTransferDestinationContentsItem, bool) {
	if o == nil {
    return nil, false
	}
	return o.DestinationContents, true
}

// SetDestinationContents sets field value
func (o *ContainerTransferAllOf) SetDestinationContents(v []ContainerTransferDestinationContentsItem) {
	o.DestinationContents = v
}

// GetDestinationQuantity returns the DestinationQuantity field value if set, zero value otherwise.
func (o *ContainerTransferAllOf) GetDestinationQuantity() ContainerQuantity {
	if o == nil || isNil(o.DestinationQuantity) {
		var ret ContainerQuantity
		return ret
	}
	return *o.DestinationQuantity
}

// GetDestinationQuantityOk returns a tuple with the DestinationQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerTransferAllOf) GetDestinationQuantityOk() (*ContainerQuantity, bool) {
	if o == nil || isNil(o.DestinationQuantity) {
    return nil, false
	}
	return o.DestinationQuantity, true
}

// HasDestinationQuantity returns a boolean if a field has been set.
func (o *ContainerTransferAllOf) HasDestinationQuantity() bool {
	if o != nil && !isNil(o.DestinationQuantity) {
		return true
	}

	return false
}

// SetDestinationQuantity gets a reference to the given ContainerQuantity and assigns it to the DestinationQuantity field.
func (o *ContainerTransferAllOf) SetDestinationQuantity(v ContainerQuantity) {
	o.DestinationQuantity = &v
}

// GetDestinationVolume returns the DestinationVolume field value if set, zero value otherwise.
func (o *ContainerTransferAllOf) GetDestinationVolume() DeprecatedContainerVolumeForInput {
	if o == nil || isNil(o.DestinationVolume) {
		var ret DeprecatedContainerVolumeForInput
		return ret
	}
	return *o.DestinationVolume
}

// GetDestinationVolumeOk returns a tuple with the DestinationVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerTransferAllOf) GetDestinationVolumeOk() (*DeprecatedContainerVolumeForInput, bool) {
	if o == nil || isNil(o.DestinationVolume) {
    return nil, false
	}
	return o.DestinationVolume, true
}

// HasDestinationVolume returns a boolean if a field has been set.
func (o *ContainerTransferAllOf) HasDestinationVolume() bool {
	if o != nil && !isNil(o.DestinationVolume) {
		return true
	}

	return false
}

// SetDestinationVolume gets a reference to the given DeprecatedContainerVolumeForInput and assigns it to the DestinationVolume field.
func (o *ContainerTransferAllOf) SetDestinationVolume(v DeprecatedContainerVolumeForInput) {
	o.DestinationVolume = &v
}

func (o ContainerTransferAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["destinationContents"] = o.DestinationContents
	}
	if !isNil(o.DestinationQuantity) {
		toSerialize["destinationQuantity"] = o.DestinationQuantity
	}
	if !isNil(o.DestinationVolume) {
		toSerialize["destinationVolume"] = o.DestinationVolume
	}
	return json.Marshal(toSerialize)
}

type NullableContainerTransferAllOf struct {
	value *ContainerTransferAllOf
	isSet bool
}

func (v NullableContainerTransferAllOf) Get() *ContainerTransferAllOf {
	return v.value
}

func (v *NullableContainerTransferAllOf) Set(val *ContainerTransferAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerTransferAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerTransferAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerTransferAllOf(val *ContainerTransferAllOf) *NullableContainerTransferAllOf {
	return &NullableContainerTransferAllOf{value: val, isSet: true}
}

func (v NullableContainerTransferAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerTransferAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


