/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AssayRunsArchive The request body for archiving Assay Runs. 
type AssayRunsArchive struct {
	AssayRunIds []string `json:"assayRunIds"`
	// The reason for archiving the provided Assay Runs. Accepted reasons may differ based on tenant configuration. 
	Reason string `json:"reason"`
}

// NewAssayRunsArchive instantiates a new AssayRunsArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssayRunsArchive(assayRunIds []string, reason string) *AssayRunsArchive {
	this := AssayRunsArchive{}
	this.AssayRunIds = assayRunIds
	this.Reason = reason
	return &this
}

// NewAssayRunsArchiveWithDefaults instantiates a new AssayRunsArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssayRunsArchiveWithDefaults() *AssayRunsArchive {
	this := AssayRunsArchive{}
	return &this
}

// GetAssayRunIds returns the AssayRunIds field value
func (o *AssayRunsArchive) GetAssayRunIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AssayRunIds
}

// GetAssayRunIdsOk returns a tuple with the AssayRunIds field value
// and a boolean to check if the value has been set.
func (o *AssayRunsArchive) GetAssayRunIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.AssayRunIds, true
}

// SetAssayRunIds sets field value
func (o *AssayRunsArchive) SetAssayRunIds(v []string) {
	o.AssayRunIds = v
}

// GetReason returns the Reason field value
func (o *AssayRunsArchive) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *AssayRunsArchive) GetReasonOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *AssayRunsArchive) SetReason(v string) {
	o.Reason = v
}

func (o AssayRunsArchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assayRunIds"] = o.AssayRunIds
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableAssayRunsArchive struct {
	value *AssayRunsArchive
	isSet bool
}

func (v NullableAssayRunsArchive) Get() *AssayRunsArchive {
	return v.value
}

func (v *NullableAssayRunsArchive) Set(val *AssayRunsArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableAssayRunsArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableAssayRunsArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssayRunsArchive(val *AssayRunsArchive) *NullableAssayRunsArchive {
	return &NullableAssayRunsArchive{value: val, isSet: true}
}

func (v NullableAssayRunsArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssayRunsArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


