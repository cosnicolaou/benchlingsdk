/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ConflictErrorError struct for ConflictErrorError
type ConflictErrorError struct {
	Message *string `json:"message,omitempty"`
	Type *string `json:"type,omitempty"`
	UserMessage *string `json:"userMessage,omitempty"`
	Conflicts []map[string]interface{} `json:"conflicts,omitempty"`
}

// NewConflictErrorError instantiates a new ConflictErrorError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConflictErrorError() *ConflictErrorError {
	this := ConflictErrorError{}
	return &this
}

// NewConflictErrorErrorWithDefaults instantiates a new ConflictErrorError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConflictErrorErrorWithDefaults() *ConflictErrorError {
	this := ConflictErrorError{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ConflictErrorError) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictErrorError) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
    return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ConflictErrorError) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ConflictErrorError) SetMessage(v string) {
	o.Message = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConflictErrorError) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictErrorError) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConflictErrorError) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConflictErrorError) SetType(v string) {
	o.Type = &v
}

// GetUserMessage returns the UserMessage field value if set, zero value otherwise.
func (o *ConflictErrorError) GetUserMessage() string {
	if o == nil || isNil(o.UserMessage) {
		var ret string
		return ret
	}
	return *o.UserMessage
}

// GetUserMessageOk returns a tuple with the UserMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictErrorError) GetUserMessageOk() (*string, bool) {
	if o == nil || isNil(o.UserMessage) {
    return nil, false
	}
	return o.UserMessage, true
}

// HasUserMessage returns a boolean if a field has been set.
func (o *ConflictErrorError) HasUserMessage() bool {
	if o != nil && !isNil(o.UserMessage) {
		return true
	}

	return false
}

// SetUserMessage gets a reference to the given string and assigns it to the UserMessage field.
func (o *ConflictErrorError) SetUserMessage(v string) {
	o.UserMessage = &v
}

// GetConflicts returns the Conflicts field value if set, zero value otherwise.
func (o *ConflictErrorError) GetConflicts() []map[string]interface{} {
	if o == nil || isNil(o.Conflicts) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Conflicts
}

// GetConflictsOk returns a tuple with the Conflicts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConflictErrorError) GetConflictsOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.Conflicts) {
    return nil, false
	}
	return o.Conflicts, true
}

// HasConflicts returns a boolean if a field has been set.
func (o *ConflictErrorError) HasConflicts() bool {
	if o != nil && !isNil(o.Conflicts) {
		return true
	}

	return false
}

// SetConflicts gets a reference to the given []map[string]interface{} and assigns it to the Conflicts field.
func (o *ConflictErrorError) SetConflicts(v []map[string]interface{}) {
	o.Conflicts = v
}

func (o ConflictErrorError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.UserMessage) {
		toSerialize["userMessage"] = o.UserMessage
	}
	if !isNil(o.Conflicts) {
		toSerialize["conflicts"] = o.Conflicts
	}
	return json.Marshal(toSerialize)
}

type NullableConflictErrorError struct {
	value *ConflictErrorError
	isSet bool
}

func (v NullableConflictErrorError) Get() *ConflictErrorError {
	return v.value
}

func (v *NullableConflictErrorError) Set(val *ConflictErrorError) {
	v.value = val
	v.isSet = true
}

func (v NullableConflictErrorError) IsSet() bool {
	return v.isSet
}

func (v *NullableConflictErrorError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConflictErrorError(val *ConflictErrorError) *NullableConflictErrorError {
	return &NullableConflictErrorError{value: val, isSet: true}
}

func (v NullableConflictErrorError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConflictErrorError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


