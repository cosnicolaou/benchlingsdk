/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntryTableRow Each has property 'cells' that is an array of cell objects
type EntryTableRow struct {
	Cells []EntryTableCell `json:"cells,omitempty"`
}

// NewEntryTableRow instantiates a new EntryTableRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryTableRow() *EntryTableRow {
	this := EntryTableRow{}
	return &this
}

// NewEntryTableRowWithDefaults instantiates a new EntryTableRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryTableRowWithDefaults() *EntryTableRow {
	this := EntryTableRow{}
	return &this
}

// GetCells returns the Cells field value if set, zero value otherwise.
func (o *EntryTableRow) GetCells() []EntryTableCell {
	if o == nil || isNil(o.Cells) {
		var ret []EntryTableCell
		return ret
	}
	return o.Cells
}

// GetCellsOk returns a tuple with the Cells field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryTableRow) GetCellsOk() ([]EntryTableCell, bool) {
	if o == nil || isNil(o.Cells) {
    return nil, false
	}
	return o.Cells, true
}

// HasCells returns a boolean if a field has been set.
func (o *EntryTableRow) HasCells() bool {
	if o != nil && !isNil(o.Cells) {
		return true
	}

	return false
}

// SetCells gets a reference to the given []EntryTableCell and assigns it to the Cells field.
func (o *EntryTableRow) SetCells(v []EntryTableCell) {
	o.Cells = v
}

func (o EntryTableRow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Cells) {
		toSerialize["cells"] = o.Cells
	}
	return json.Marshal(toSerialize)
}

type NullableEntryTableRow struct {
	value *EntryTableRow
	isSet bool
}

func (v NullableEntryTableRow) Get() *EntryTableRow {
	return v.value
}

func (v *NullableEntryTableRow) Set(val *EntryTableRow) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryTableRow) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryTableRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryTableRow(val *EntryTableRow) *NullableEntryTableRow {
	return &NullableEntryTableRow{value: val, isSet: true}
}

func (v NullableEntryTableRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryTableRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


