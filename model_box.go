/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"time"
)

// Box struct for Box
type Box struct {
	ArchiveRecord NullableAaSequenceArchiveRecord `json:"archiveRecord,omitempty"`
	Barcode NullableString `json:"barcode,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Creator *UserSummary `json:"creator,omitempty"`
	// The number of containers in the box that have no contents.
	EmptyContainers *int32 `json:"emptyContainers,omitempty"`
	// The number of empty positions for adding additional containers in the box.
	EmptyPositions *int32 `json:"emptyPositions,omitempty"`
	Fields *map[string]Field `json:"fields,omitempty"`
	// The number of containers currently in the box.
	FilledPositions *int32 `json:"filledPositions,omitempty"`
	Id *string `json:"id,omitempty"`
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`
	Name *string `json:"name,omitempty"`
	ParentStorageId NullableString `json:"parentStorageId,omitempty"`
	ProjectId NullableString `json:"projectId,omitempty"`
	Schema NullableSchemaProperty3 `json:"schema,omitempty"`
	// The size of the box (i.e. how many containers it can store).
	Size *int32 `json:"size,omitempty"`
	WebURL *string `json:"webURL,omitempty"`
}

// NewBox instantiates a new Box object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBox() *Box {
	this := Box{}
	return &this
}

// NewBoxWithDefaults instantiates a new Box object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBoxWithDefaults() *Box {
	this := Box{}
	return &this
}

// GetArchiveRecord returns the ArchiveRecord field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Box) GetArchiveRecord() AaSequenceArchiveRecord {
	if o == nil || isNil(o.ArchiveRecord.Get()) {
		var ret AaSequenceArchiveRecord
		return ret
	}
	return *o.ArchiveRecord.Get()
}

// GetArchiveRecordOk returns a tuple with the ArchiveRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Box) GetArchiveRecordOk() (*AaSequenceArchiveRecord, bool) {
	if o == nil {
    return nil, false
	}
	return o.ArchiveRecord.Get(), o.ArchiveRecord.IsSet()
}

// HasArchiveRecord returns a boolean if a field has been set.
func (o *Box) HasArchiveRecord() bool {
	if o != nil && o.ArchiveRecord.IsSet() {
		return true
	}

	return false
}

// SetArchiveRecord gets a reference to the given NullableAaSequenceArchiveRecord and assigns it to the ArchiveRecord field.
func (o *Box) SetArchiveRecord(v AaSequenceArchiveRecord) {
	o.ArchiveRecord.Set(&v)
}
// SetArchiveRecordNil sets the value for ArchiveRecord to be an explicit nil
func (o *Box) SetArchiveRecordNil() {
	o.ArchiveRecord.Set(nil)
}

// UnsetArchiveRecord ensures that no value is present for ArchiveRecord, not even an explicit nil
func (o *Box) UnsetArchiveRecord() {
	o.ArchiveRecord.Unset()
}

// GetBarcode returns the Barcode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Box) GetBarcode() string {
	if o == nil || isNil(o.Barcode.Get()) {
		var ret string
		return ret
	}
	return *o.Barcode.Get()
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Box) GetBarcodeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Barcode.Get(), o.Barcode.IsSet()
}

// HasBarcode returns a boolean if a field has been set.
func (o *Box) HasBarcode() bool {
	if o != nil && o.Barcode.IsSet() {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given NullableString and assigns it to the Barcode field.
func (o *Box) SetBarcode(v string) {
	o.Barcode.Set(&v)
}
// SetBarcodeNil sets the value for Barcode to be an explicit nil
func (o *Box) SetBarcodeNil() {
	o.Barcode.Set(nil)
}

// UnsetBarcode ensures that no value is present for Barcode, not even an explicit nil
func (o *Box) UnsetBarcode() {
	o.Barcode.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Box) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Box) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Box) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *Box) GetCreator() UserSummary {
	if o == nil || isNil(o.Creator) {
		var ret UserSummary
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetCreatorOk() (*UserSummary, bool) {
	if o == nil || isNil(o.Creator) {
    return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *Box) HasCreator() bool {
	if o != nil && !isNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given UserSummary and assigns it to the Creator field.
func (o *Box) SetCreator(v UserSummary) {
	o.Creator = &v
}

// GetEmptyContainers returns the EmptyContainers field value if set, zero value otherwise.
func (o *Box) GetEmptyContainers() int32 {
	if o == nil || isNil(o.EmptyContainers) {
		var ret int32
		return ret
	}
	return *o.EmptyContainers
}

// GetEmptyContainersOk returns a tuple with the EmptyContainers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetEmptyContainersOk() (*int32, bool) {
	if o == nil || isNil(o.EmptyContainers) {
    return nil, false
	}
	return o.EmptyContainers, true
}

// HasEmptyContainers returns a boolean if a field has been set.
func (o *Box) HasEmptyContainers() bool {
	if o != nil && !isNil(o.EmptyContainers) {
		return true
	}

	return false
}

// SetEmptyContainers gets a reference to the given int32 and assigns it to the EmptyContainers field.
func (o *Box) SetEmptyContainers(v int32) {
	o.EmptyContainers = &v
}

// GetEmptyPositions returns the EmptyPositions field value if set, zero value otherwise.
func (o *Box) GetEmptyPositions() int32 {
	if o == nil || isNil(o.EmptyPositions) {
		var ret int32
		return ret
	}
	return *o.EmptyPositions
}

// GetEmptyPositionsOk returns a tuple with the EmptyPositions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetEmptyPositionsOk() (*int32, bool) {
	if o == nil || isNil(o.EmptyPositions) {
    return nil, false
	}
	return o.EmptyPositions, true
}

// HasEmptyPositions returns a boolean if a field has been set.
func (o *Box) HasEmptyPositions() bool {
	if o != nil && !isNil(o.EmptyPositions) {
		return true
	}

	return false
}

// SetEmptyPositions gets a reference to the given int32 and assigns it to the EmptyPositions field.
func (o *Box) SetEmptyPositions(v int32) {
	o.EmptyPositions = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *Box) GetFields() map[string]Field {
	if o == nil || isNil(o.Fields) {
		var ret map[string]Field
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetFieldsOk() (*map[string]Field, bool) {
	if o == nil || isNil(o.Fields) {
    return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *Box) HasFields() bool {
	if o != nil && !isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]Field and assigns it to the Fields field.
func (o *Box) SetFields(v map[string]Field) {
	o.Fields = &v
}

// GetFilledPositions returns the FilledPositions field value if set, zero value otherwise.
func (o *Box) GetFilledPositions() int32 {
	if o == nil || isNil(o.FilledPositions) {
		var ret int32
		return ret
	}
	return *o.FilledPositions
}

// GetFilledPositionsOk returns a tuple with the FilledPositions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetFilledPositionsOk() (*int32, bool) {
	if o == nil || isNil(o.FilledPositions) {
    return nil, false
	}
	return o.FilledPositions, true
}

// HasFilledPositions returns a boolean if a field has been set.
func (o *Box) HasFilledPositions() bool {
	if o != nil && !isNil(o.FilledPositions) {
		return true
	}

	return false
}

// SetFilledPositions gets a reference to the given int32 and assigns it to the FilledPositions field.
func (o *Box) SetFilledPositions(v int32) {
	o.FilledPositions = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Box) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Box) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Box) SetId(v string) {
	o.Id = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *Box) GetModifiedAt() time.Time {
	if o == nil || isNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.ModifiedAt) {
    return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *Box) HasModifiedAt() bool {
	if o != nil && !isNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *Box) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Box) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Box) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Box) SetName(v string) {
	o.Name = &v
}

// GetParentStorageId returns the ParentStorageId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Box) GetParentStorageId() string {
	if o == nil || isNil(o.ParentStorageId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentStorageId.Get()
}

// GetParentStorageIdOk returns a tuple with the ParentStorageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Box) GetParentStorageIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ParentStorageId.Get(), o.ParentStorageId.IsSet()
}

// HasParentStorageId returns a boolean if a field has been set.
func (o *Box) HasParentStorageId() bool {
	if o != nil && o.ParentStorageId.IsSet() {
		return true
	}

	return false
}

// SetParentStorageId gets a reference to the given NullableString and assigns it to the ParentStorageId field.
func (o *Box) SetParentStorageId(v string) {
	o.ParentStorageId.Set(&v)
}
// SetParentStorageIdNil sets the value for ParentStorageId to be an explicit nil
func (o *Box) SetParentStorageIdNil() {
	o.ParentStorageId.Set(nil)
}

// UnsetParentStorageId ensures that no value is present for ParentStorageId, not even an explicit nil
func (o *Box) UnsetParentStorageId() {
	o.ParentStorageId.Unset()
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Box) GetProjectId() string {
	if o == nil || isNil(o.ProjectId.Get()) {
		var ret string
		return ret
	}
	return *o.ProjectId.Get()
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Box) GetProjectIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ProjectId.Get(), o.ProjectId.IsSet()
}

// HasProjectId returns a boolean if a field has been set.
func (o *Box) HasProjectId() bool {
	if o != nil && o.ProjectId.IsSet() {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given NullableString and assigns it to the ProjectId field.
func (o *Box) SetProjectId(v string) {
	o.ProjectId.Set(&v)
}
// SetProjectIdNil sets the value for ProjectId to be an explicit nil
func (o *Box) SetProjectIdNil() {
	o.ProjectId.Set(nil)
}

// UnsetProjectId ensures that no value is present for ProjectId, not even an explicit nil
func (o *Box) UnsetProjectId() {
	o.ProjectId.Unset()
}

// GetSchema returns the Schema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Box) GetSchema() SchemaProperty3 {
	if o == nil || isNil(o.Schema.Get()) {
		var ret SchemaProperty3
		return ret
	}
	return *o.Schema.Get()
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Box) GetSchemaOk() (*SchemaProperty3, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schema.Get(), o.Schema.IsSet()
}

// HasSchema returns a boolean if a field has been set.
func (o *Box) HasSchema() bool {
	if o != nil && o.Schema.IsSet() {
		return true
	}

	return false
}

// SetSchema gets a reference to the given NullableSchemaProperty3 and assigns it to the Schema field.
func (o *Box) SetSchema(v SchemaProperty3) {
	o.Schema.Set(&v)
}
// SetSchemaNil sets the value for Schema to be an explicit nil
func (o *Box) SetSchemaNil() {
	o.Schema.Set(nil)
}

// UnsetSchema ensures that no value is present for Schema, not even an explicit nil
func (o *Box) UnsetSchema() {
	o.Schema.Unset()
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *Box) GetSize() int32 {
	if o == nil || isNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetSizeOk() (*int32, bool) {
	if o == nil || isNil(o.Size) {
    return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Box) HasSize() bool {
	if o != nil && !isNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *Box) SetSize(v int32) {
	o.Size = &v
}

// GetWebURL returns the WebURL field value if set, zero value otherwise.
func (o *Box) GetWebURL() string {
	if o == nil || isNil(o.WebURL) {
		var ret string
		return ret
	}
	return *o.WebURL
}

// GetWebURLOk returns a tuple with the WebURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Box) GetWebURLOk() (*string, bool) {
	if o == nil || isNil(o.WebURL) {
    return nil, false
	}
	return o.WebURL, true
}

// HasWebURL returns a boolean if a field has been set.
func (o *Box) HasWebURL() bool {
	if o != nil && !isNil(o.WebURL) {
		return true
	}

	return false
}

// SetWebURL gets a reference to the given string and assigns it to the WebURL field.
func (o *Box) SetWebURL(v string) {
	o.WebURL = &v
}

func (o Box) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveRecord.IsSet() {
		toSerialize["archiveRecord"] = o.ArchiveRecord.Get()
	}
	if o.Barcode.IsSet() {
		toSerialize["barcode"] = o.Barcode.Get()
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !isNil(o.EmptyContainers) {
		toSerialize["emptyContainers"] = o.EmptyContainers
	}
	if !isNil(o.EmptyPositions) {
		toSerialize["emptyPositions"] = o.EmptyPositions
	}
	if !isNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !isNil(o.FilledPositions) {
		toSerialize["filledPositions"] = o.FilledPositions
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.ParentStorageId.IsSet() {
		toSerialize["parentStorageId"] = o.ParentStorageId.Get()
	}
	if o.ProjectId.IsSet() {
		toSerialize["projectId"] = o.ProjectId.Get()
	}
	if o.Schema.IsSet() {
		toSerialize["schema"] = o.Schema.Get()
	}
	if !isNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !isNil(o.WebURL) {
		toSerialize["webURL"] = o.WebURL
	}
	return json.Marshal(toSerialize)
}

type NullableBox struct {
	value *Box
	isSet bool
}

func (v NullableBox) Get() *Box {
	return v.value
}

func (v *NullableBox) Set(val *Box) {
	v.value = val
	v.isSet = true
}

func (v NullableBox) IsSet() bool {
	return v.isSet
}

func (v *NullableBox) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBox(val *Box) *NullableBox {
	return &NullableBox{value: val, isSet: true}
}

func (v NullableBox) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBox) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


