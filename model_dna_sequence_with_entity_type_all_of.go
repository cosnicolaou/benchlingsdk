/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// DnaSequenceWithEntityTypeAllOf struct for DnaSequenceWithEntityTypeAllOf
type DnaSequenceWithEntityTypeAllOf struct {
	EntityType *string `json:"entityType,omitempty"`
}

// NewDnaSequenceWithEntityTypeAllOf instantiates a new DnaSequenceWithEntityTypeAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnaSequenceWithEntityTypeAllOf() *DnaSequenceWithEntityTypeAllOf {
	this := DnaSequenceWithEntityTypeAllOf{}
	return &this
}

// NewDnaSequenceWithEntityTypeAllOfWithDefaults instantiates a new DnaSequenceWithEntityTypeAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnaSequenceWithEntityTypeAllOfWithDefaults() *DnaSequenceWithEntityTypeAllOf {
	this := DnaSequenceWithEntityTypeAllOf{}
	return &this
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *DnaSequenceWithEntityTypeAllOf) GetEntityType() string {
	if o == nil || isNil(o.EntityType) {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnaSequenceWithEntityTypeAllOf) GetEntityTypeOk() (*string, bool) {
	if o == nil || isNil(o.EntityType) {
    return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *DnaSequenceWithEntityTypeAllOf) HasEntityType() bool {
	if o != nil && !isNil(o.EntityType) {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *DnaSequenceWithEntityTypeAllOf) SetEntityType(v string) {
	o.EntityType = &v
}

func (o DnaSequenceWithEntityTypeAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EntityType) {
		toSerialize["entityType"] = o.EntityType
	}
	return json.Marshal(toSerialize)
}

type NullableDnaSequenceWithEntityTypeAllOf struct {
	value *DnaSequenceWithEntityTypeAllOf
	isSet bool
}

func (v NullableDnaSequenceWithEntityTypeAllOf) Get() *DnaSequenceWithEntityTypeAllOf {
	return v.value
}

func (v *NullableDnaSequenceWithEntityTypeAllOf) Set(val *DnaSequenceWithEntityTypeAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDnaSequenceWithEntityTypeAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDnaSequenceWithEntityTypeAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnaSequenceWithEntityTypeAllOf(val *DnaSequenceWithEntityTypeAllOf) *NullableDnaSequenceWithEntityTypeAllOf {
	return &NullableDnaSequenceWithEntityTypeAllOf{value: val, isSet: true}
}

func (v NullableDnaSequenceWithEntityTypeAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnaSequenceWithEntityTypeAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


