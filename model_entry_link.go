/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntryLink Links are contained within notes to reference resources that live outside of the entry. A link can target an external resource via an http(s):// hyperlink or a Benchling resource via @-mentions and drag-n-drop. 
type EntryLink struct {
	// For linked Benchling resources, this will be the ID of that resource (e.g., 'seq_RhYGVnHF'). Omitted for \"link\" types. 
	Id *string `json:"id,omitempty"`
	// The type of resource being linked. For hyperlinks: 'link'. For linked Benchling resources, one of: 'user', 'request', 'entry', 'stage_entry', 'protocol', 'workflow', 'custom_entity', 'aa_sequence', 'dna_sequence', 'batch', 'box', 'container', 'location', 'plate'. 
	Type *string `json:"type,omitempty"`
	// Canonical URL of the linked Benchling resource (if you have at least READ authorization for that resource), or the explicit URL provided as hyperlink for \"link\" types. Note: locations do not currently have a URL. 
	WebURL NullableString `json:"webURL,omitempty"`
}

// NewEntryLink instantiates a new EntryLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryLink() *EntryLink {
	this := EntryLink{}
	return &this
}

// NewEntryLinkWithDefaults instantiates a new EntryLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryLinkWithDefaults() *EntryLink {
	this := EntryLink{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EntryLink) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryLink) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EntryLink) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EntryLink) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntryLink) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryLink) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntryLink) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntryLink) SetType(v string) {
	o.Type = &v
}

// GetWebURL returns the WebURL field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntryLink) GetWebURL() string {
	if o == nil || isNil(o.WebURL.Get()) {
		var ret string
		return ret
	}
	return *o.WebURL.Get()
}

// GetWebURLOk returns a tuple with the WebURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntryLink) GetWebURLOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.WebURL.Get(), o.WebURL.IsSet()
}

// HasWebURL returns a boolean if a field has been set.
func (o *EntryLink) HasWebURL() bool {
	if o != nil && o.WebURL.IsSet() {
		return true
	}

	return false
}

// SetWebURL gets a reference to the given NullableString and assigns it to the WebURL field.
func (o *EntryLink) SetWebURL(v string) {
	o.WebURL.Set(&v)
}
// SetWebURLNil sets the value for WebURL to be an explicit nil
func (o *EntryLink) SetWebURLNil() {
	o.WebURL.Set(nil)
}

// UnsetWebURL ensures that no value is present for WebURL, not even an explicit nil
func (o *EntryLink) UnsetWebURL() {
	o.WebURL.Unset()
}

func (o EntryLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.WebURL.IsSet() {
		toSerialize["webURL"] = o.WebURL.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEntryLink struct {
	value *EntryLink
	isSet bool
}

func (v NullableEntryLink) Get() *EntryLink {
	return v.value
}

func (v *NullableEntryLink) Set(val *EntryLink) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryLink) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryLink(val *EntryLink) *NullableEntryLink {
	return &NullableEntryLink{value: val, isSet: true}
}

func (v NullableEntryLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


