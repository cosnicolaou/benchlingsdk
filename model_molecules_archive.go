/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// MoleculesArchive The request body for archiving Molecules. 
type MoleculesArchive struct {
	MoleculeIds []string `json:"moleculeIds"`
	// The reason for archiving the provided Molecules. Accepted reasons may differ based on tenant configuration. 
	Reason string `json:"reason"`
}

// NewMoleculesArchive instantiates a new MoleculesArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoleculesArchive(moleculeIds []string, reason string) *MoleculesArchive {
	this := MoleculesArchive{}
	this.MoleculeIds = moleculeIds
	this.Reason = reason
	return &this
}

// NewMoleculesArchiveWithDefaults instantiates a new MoleculesArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoleculesArchiveWithDefaults() *MoleculesArchive {
	this := MoleculesArchive{}
	return &this
}

// GetMoleculeIds returns the MoleculeIds field value
func (o *MoleculesArchive) GetMoleculeIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MoleculeIds
}

// GetMoleculeIdsOk returns a tuple with the MoleculeIds field value
// and a boolean to check if the value has been set.
func (o *MoleculesArchive) GetMoleculeIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.MoleculeIds, true
}

// SetMoleculeIds sets field value
func (o *MoleculesArchive) SetMoleculeIds(v []string) {
	o.MoleculeIds = v
}

// GetReason returns the Reason field value
func (o *MoleculesArchive) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *MoleculesArchive) GetReasonOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *MoleculesArchive) SetReason(v string) {
	o.Reason = v
}

func (o MoleculesArchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["moleculeIds"] = o.MoleculeIds
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableMoleculesArchive struct {
	value *MoleculesArchive
	isSet bool
}

func (v NullableMoleculesArchive) Get() *MoleculesArchive {
	return v.value
}

func (v *NullableMoleculesArchive) Set(val *MoleculesArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableMoleculesArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableMoleculesArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoleculesArchive(val *MoleculesArchive) *NullableMoleculesArchive {
	return &NullableMoleculesArchive{value: val, isSet: true}
}

func (v NullableMoleculesArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoleculesArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


