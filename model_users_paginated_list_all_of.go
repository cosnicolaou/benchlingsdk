/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// UsersPaginatedListAllOf struct for UsersPaginatedListAllOf
type UsersPaginatedListAllOf struct {
	Users []User `json:"users,omitempty"`
}

// NewUsersPaginatedListAllOf instantiates a new UsersPaginatedListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersPaginatedListAllOf() *UsersPaginatedListAllOf {
	this := UsersPaginatedListAllOf{}
	return &this
}

// NewUsersPaginatedListAllOfWithDefaults instantiates a new UsersPaginatedListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersPaginatedListAllOfWithDefaults() *UsersPaginatedListAllOf {
	this := UsersPaginatedListAllOf{}
	return &this
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *UsersPaginatedListAllOf) GetUsers() []User {
	if o == nil || isNil(o.Users) {
		var ret []User
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersPaginatedListAllOf) GetUsersOk() ([]User, bool) {
	if o == nil || isNil(o.Users) {
    return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *UsersPaginatedListAllOf) HasUsers() bool {
	if o != nil && !isNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []User and assigns it to the Users field.
func (o *UsersPaginatedListAllOf) SetUsers(v []User) {
	o.Users = v
}

func (o UsersPaginatedListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableUsersPaginatedListAllOf struct {
	value *UsersPaginatedListAllOf
	isSet bool
}

func (v NullableUsersPaginatedListAllOf) Get() *UsersPaginatedListAllOf {
	return v.value
}

func (v *NullableUsersPaginatedListAllOf) Set(val *UsersPaginatedListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersPaginatedListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersPaginatedListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersPaginatedListAllOf(val *UsersPaginatedListAllOf) *NullableUsersPaginatedListAllOf {
	return &NullableUsersPaginatedListAllOf{value: val, isSet: true}
}

func (v NullableUsersPaginatedListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersPaginatedListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


