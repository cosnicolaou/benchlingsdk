/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AssayRunCreate struct for AssayRunCreate
type AssayRunCreate struct {
	Fields AssayRunCreateFields `json:"fields"`
	// ID of assay run
	Id *string `json:"id,omitempty"`
	// The project that the assay run should be uploaded to. Only users with read access to the project will be able to read the assay run. Leaving this empty will result in only the creator having read access. 
	ProjectId *string `json:"projectId,omitempty"`
	// ID of assay schema that assay run conforms to
	SchemaId string `json:"schemaId"`
	// Additional information about the validation status
	ValidationComment *string `json:"validationComment,omitempty"`
	ValidationStatus *AssayRunValidationStatus `json:"validationStatus,omitempty"`
}

// NewAssayRunCreate instantiates a new AssayRunCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssayRunCreate(fields AssayRunCreateFields, schemaId string) *AssayRunCreate {
	this := AssayRunCreate{}
	this.Fields = fields
	this.SchemaId = schemaId
	return &this
}

// NewAssayRunCreateWithDefaults instantiates a new AssayRunCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssayRunCreateWithDefaults() *AssayRunCreate {
	this := AssayRunCreate{}
	return &this
}

// GetFields returns the Fields field value
func (o *AssayRunCreate) GetFields() AssayRunCreateFields {
	if o == nil {
		var ret AssayRunCreateFields
		return ret
	}

	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value
// and a boolean to check if the value has been set.
func (o *AssayRunCreate) GetFieldsOk() (*AssayRunCreateFields, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Fields, true
}

// SetFields sets field value
func (o *AssayRunCreate) SetFields(v AssayRunCreateFields) {
	o.Fields = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AssayRunCreate) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunCreate) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AssayRunCreate) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AssayRunCreate) SetId(v string) {
	o.Id = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *AssayRunCreate) GetProjectId() string {
	if o == nil || isNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunCreate) GetProjectIdOk() (*string, bool) {
	if o == nil || isNil(o.ProjectId) {
    return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *AssayRunCreate) HasProjectId() bool {
	if o != nil && !isNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *AssayRunCreate) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetSchemaId returns the SchemaId field value
func (o *AssayRunCreate) GetSchemaId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value
// and a boolean to check if the value has been set.
func (o *AssayRunCreate) GetSchemaIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SchemaId, true
}

// SetSchemaId sets field value
func (o *AssayRunCreate) SetSchemaId(v string) {
	o.SchemaId = v
}

// GetValidationComment returns the ValidationComment field value if set, zero value otherwise.
func (o *AssayRunCreate) GetValidationComment() string {
	if o == nil || isNil(o.ValidationComment) {
		var ret string
		return ret
	}
	return *o.ValidationComment
}

// GetValidationCommentOk returns a tuple with the ValidationComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunCreate) GetValidationCommentOk() (*string, bool) {
	if o == nil || isNil(o.ValidationComment) {
    return nil, false
	}
	return o.ValidationComment, true
}

// HasValidationComment returns a boolean if a field has been set.
func (o *AssayRunCreate) HasValidationComment() bool {
	if o != nil && !isNil(o.ValidationComment) {
		return true
	}

	return false
}

// SetValidationComment gets a reference to the given string and assigns it to the ValidationComment field.
func (o *AssayRunCreate) SetValidationComment(v string) {
	o.ValidationComment = &v
}

// GetValidationStatus returns the ValidationStatus field value if set, zero value otherwise.
func (o *AssayRunCreate) GetValidationStatus() AssayRunValidationStatus {
	if o == nil || isNil(o.ValidationStatus) {
		var ret AssayRunValidationStatus
		return ret
	}
	return *o.ValidationStatus
}

// GetValidationStatusOk returns a tuple with the ValidationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssayRunCreate) GetValidationStatusOk() (*AssayRunValidationStatus, bool) {
	if o == nil || isNil(o.ValidationStatus) {
    return nil, false
	}
	return o.ValidationStatus, true
}

// HasValidationStatus returns a boolean if a field has been set.
func (o *AssayRunCreate) HasValidationStatus() bool {
	if o != nil && !isNil(o.ValidationStatus) {
		return true
	}

	return false
}

// SetValidationStatus gets a reference to the given AssayRunValidationStatus and assigns it to the ValidationStatus field.
func (o *AssayRunCreate) SetValidationStatus(v AssayRunValidationStatus) {
	o.ValidationStatus = &v
}

func (o AssayRunCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["fields"] = o.Fields
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.ProjectId) {
		toSerialize["projectId"] = o.ProjectId
	}
	if true {
		toSerialize["schemaId"] = o.SchemaId
	}
	if !isNil(o.ValidationComment) {
		toSerialize["validationComment"] = o.ValidationComment
	}
	if !isNil(o.ValidationStatus) {
		toSerialize["validationStatus"] = o.ValidationStatus
	}
	return json.Marshal(toSerialize)
}

type NullableAssayRunCreate struct {
	value *AssayRunCreate
	isSet bool
}

func (v NullableAssayRunCreate) Get() *AssayRunCreate {
	return v.value
}

func (v *NullableAssayRunCreate) Set(val *AssayRunCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableAssayRunCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableAssayRunCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssayRunCreate(val *AssayRunCreate) *NullableAssayRunCreate {
	return &NullableAssayRunCreate{value: val, isSet: true}
}

func (v NullableAssayRunCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssayRunCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


