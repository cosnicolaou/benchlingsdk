/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntriesArchivalChange IDs of all items that were archived or unarchived, grouped by resource type. This includes the IDs of entries that changed.. 
type EntriesArchivalChange struct {
	EntryIds []string `json:"entryIds,omitempty"`
}

// NewEntriesArchivalChange instantiates a new EntriesArchivalChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntriesArchivalChange() *EntriesArchivalChange {
	this := EntriesArchivalChange{}
	return &this
}

// NewEntriesArchivalChangeWithDefaults instantiates a new EntriesArchivalChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntriesArchivalChangeWithDefaults() *EntriesArchivalChange {
	this := EntriesArchivalChange{}
	return &this
}

// GetEntryIds returns the EntryIds field value if set, zero value otherwise.
func (o *EntriesArchivalChange) GetEntryIds() []string {
	if o == nil || isNil(o.EntryIds) {
		var ret []string
		return ret
	}
	return o.EntryIds
}

// GetEntryIdsOk returns a tuple with the EntryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntriesArchivalChange) GetEntryIdsOk() ([]string, bool) {
	if o == nil || isNil(o.EntryIds) {
    return nil, false
	}
	return o.EntryIds, true
}

// HasEntryIds returns a boolean if a field has been set.
func (o *EntriesArchivalChange) HasEntryIds() bool {
	if o != nil && !isNil(o.EntryIds) {
		return true
	}

	return false
}

// SetEntryIds gets a reference to the given []string and assigns it to the EntryIds field.
func (o *EntriesArchivalChange) SetEntryIds(v []string) {
	o.EntryIds = v
}

func (o EntriesArchivalChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EntryIds) {
		toSerialize["entryIds"] = o.EntryIds
	}
	return json.Marshal(toSerialize)
}

type NullableEntriesArchivalChange struct {
	value *EntriesArchivalChange
	isSet bool
}

func (v NullableEntriesArchivalChange) Get() *EntriesArchivalChange {
	return v.value
}

func (v *NullableEntriesArchivalChange) Set(val *EntriesArchivalChange) {
	v.value = val
	v.isSet = true
}

func (v NullableEntriesArchivalChange) IsSet() bool {
	return v.isSet
}

func (v *NullableEntriesArchivalChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntriesArchivalChange(val *EntriesArchivalChange) *NullableEntriesArchivalChange {
	return &NullableEntriesArchivalChange{value: val, isSet: true}
}

func (v NullableEntriesArchivalChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntriesArchivalChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


