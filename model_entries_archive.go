/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntriesArchive struct for EntriesArchive
type EntriesArchive struct {
	// Array of entry IDs
	EntryIds []string `json:"entryIds"`
	// Reason that entries are being archived. One of [\"Made in error\", \"Retired\", \"Other\"]. 
	Reason string `json:"reason"`
}

// NewEntriesArchive instantiates a new EntriesArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntriesArchive(entryIds []string, reason string) *EntriesArchive {
	this := EntriesArchive{}
	this.EntryIds = entryIds
	this.Reason = reason
	return &this
}

// NewEntriesArchiveWithDefaults instantiates a new EntriesArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntriesArchiveWithDefaults() *EntriesArchive {
	this := EntriesArchive{}
	return &this
}

// GetEntryIds returns the EntryIds field value
func (o *EntriesArchive) GetEntryIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.EntryIds
}

// GetEntryIdsOk returns a tuple with the EntryIds field value
// and a boolean to check if the value has been set.
func (o *EntriesArchive) GetEntryIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.EntryIds, true
}

// SetEntryIds sets field value
func (o *EntriesArchive) SetEntryIds(v []string) {
	o.EntryIds = v
}

// GetReason returns the Reason field value
func (o *EntriesArchive) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *EntriesArchive) GetReasonOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *EntriesArchive) SetReason(v string) {
	o.Reason = v
}

func (o EntriesArchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entryIds"] = o.EntryIds
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableEntriesArchive struct {
	value *EntriesArchive
	isSet bool
}

func (v NullableEntriesArchive) Get() *EntriesArchive {
	return v.value
}

func (v *NullableEntriesArchive) Set(val *EntriesArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableEntriesArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableEntriesArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntriesArchive(val *EntriesArchive) *NullableEntriesArchive {
	return &NullableEntriesArchive{value: val, isSet: true}
}

func (v NullableEntriesArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntriesArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


