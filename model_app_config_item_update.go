/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// AppConfigItemUpdate - struct for AppConfigItemUpdate
type AppConfigItemUpdate struct {
	AppConfigItemBooleanUpdate *AppConfigItemBooleanUpdate
	AppConfigItemDateUpdate *AppConfigItemDateUpdate
	AppConfigItemDatetimeUpdate *AppConfigItemDatetimeUpdate
	AppConfigItemFloatUpdate *AppConfigItemFloatUpdate
	AppConfigItemGenericUpdate *AppConfigItemGenericUpdate
	AppConfigItemIntegerUpdate *AppConfigItemIntegerUpdate
	AppConfigItemJsonUpdate *AppConfigItemJsonUpdate
}

// AppConfigItemBooleanUpdateAsAppConfigItemUpdate is a convenience function that returns AppConfigItemBooleanUpdate wrapped in AppConfigItemUpdate
func AppConfigItemBooleanUpdateAsAppConfigItemUpdate(v *AppConfigItemBooleanUpdate) AppConfigItemUpdate {
	return AppConfigItemUpdate{
		AppConfigItemBooleanUpdate: v,
	}
}

// AppConfigItemDateUpdateAsAppConfigItemUpdate is a convenience function that returns AppConfigItemDateUpdate wrapped in AppConfigItemUpdate
func AppConfigItemDateUpdateAsAppConfigItemUpdate(v *AppConfigItemDateUpdate) AppConfigItemUpdate {
	return AppConfigItemUpdate{
		AppConfigItemDateUpdate: v,
	}
}

// AppConfigItemDatetimeUpdateAsAppConfigItemUpdate is a convenience function that returns AppConfigItemDatetimeUpdate wrapped in AppConfigItemUpdate
func AppConfigItemDatetimeUpdateAsAppConfigItemUpdate(v *AppConfigItemDatetimeUpdate) AppConfigItemUpdate {
	return AppConfigItemUpdate{
		AppConfigItemDatetimeUpdate: v,
	}
}

// AppConfigItemFloatUpdateAsAppConfigItemUpdate is a convenience function that returns AppConfigItemFloatUpdate wrapped in AppConfigItemUpdate
func AppConfigItemFloatUpdateAsAppConfigItemUpdate(v *AppConfigItemFloatUpdate) AppConfigItemUpdate {
	return AppConfigItemUpdate{
		AppConfigItemFloatUpdate: v,
	}
}

// AppConfigItemGenericUpdateAsAppConfigItemUpdate is a convenience function that returns AppConfigItemGenericUpdate wrapped in AppConfigItemUpdate
func AppConfigItemGenericUpdateAsAppConfigItemUpdate(v *AppConfigItemGenericUpdate) AppConfigItemUpdate {
	return AppConfigItemUpdate{
		AppConfigItemGenericUpdate: v,
	}
}

// AppConfigItemIntegerUpdateAsAppConfigItemUpdate is a convenience function that returns AppConfigItemIntegerUpdate wrapped in AppConfigItemUpdate
func AppConfigItemIntegerUpdateAsAppConfigItemUpdate(v *AppConfigItemIntegerUpdate) AppConfigItemUpdate {
	return AppConfigItemUpdate{
		AppConfigItemIntegerUpdate: v,
	}
}

// AppConfigItemJsonUpdateAsAppConfigItemUpdate is a convenience function that returns AppConfigItemJsonUpdate wrapped in AppConfigItemUpdate
func AppConfigItemJsonUpdateAsAppConfigItemUpdate(v *AppConfigItemJsonUpdate) AppConfigItemUpdate {
	return AppConfigItemUpdate{
		AppConfigItemJsonUpdate: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AppConfigItemUpdate) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AppConfigItemBooleanUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemBooleanUpdate)
	if err == nil {
		jsonAppConfigItemBooleanUpdate, _ := json.Marshal(dst.AppConfigItemBooleanUpdate)
		if string(jsonAppConfigItemBooleanUpdate) == "{}" { // empty struct
			dst.AppConfigItemBooleanUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemBooleanUpdate = nil
	}

	// try to unmarshal data into AppConfigItemDateUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemDateUpdate)
	if err == nil {
		jsonAppConfigItemDateUpdate, _ := json.Marshal(dst.AppConfigItemDateUpdate)
		if string(jsonAppConfigItemDateUpdate) == "{}" { // empty struct
			dst.AppConfigItemDateUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemDateUpdate = nil
	}

	// try to unmarshal data into AppConfigItemDatetimeUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemDatetimeUpdate)
	if err == nil {
		jsonAppConfigItemDatetimeUpdate, _ := json.Marshal(dst.AppConfigItemDatetimeUpdate)
		if string(jsonAppConfigItemDatetimeUpdate) == "{}" { // empty struct
			dst.AppConfigItemDatetimeUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemDatetimeUpdate = nil
	}

	// try to unmarshal data into AppConfigItemFloatUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemFloatUpdate)
	if err == nil {
		jsonAppConfigItemFloatUpdate, _ := json.Marshal(dst.AppConfigItemFloatUpdate)
		if string(jsonAppConfigItemFloatUpdate) == "{}" { // empty struct
			dst.AppConfigItemFloatUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemFloatUpdate = nil
	}

	// try to unmarshal data into AppConfigItemGenericUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemGenericUpdate)
	if err == nil {
		jsonAppConfigItemGenericUpdate, _ := json.Marshal(dst.AppConfigItemGenericUpdate)
		if string(jsonAppConfigItemGenericUpdate) == "{}" { // empty struct
			dst.AppConfigItemGenericUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemGenericUpdate = nil
	}

	// try to unmarshal data into AppConfigItemIntegerUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemIntegerUpdate)
	if err == nil {
		jsonAppConfigItemIntegerUpdate, _ := json.Marshal(dst.AppConfigItemIntegerUpdate)
		if string(jsonAppConfigItemIntegerUpdate) == "{}" { // empty struct
			dst.AppConfigItemIntegerUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemIntegerUpdate = nil
	}

	// try to unmarshal data into AppConfigItemJsonUpdate
	err = newStrictDecoder(data).Decode(&dst.AppConfigItemJsonUpdate)
	if err == nil {
		jsonAppConfigItemJsonUpdate, _ := json.Marshal(dst.AppConfigItemJsonUpdate)
		if string(jsonAppConfigItemJsonUpdate) == "{}" { // empty struct
			dst.AppConfigItemJsonUpdate = nil
		} else {
			match++
		}
	} else {
		dst.AppConfigItemJsonUpdate = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AppConfigItemBooleanUpdate = nil
		dst.AppConfigItemDateUpdate = nil
		dst.AppConfigItemDatetimeUpdate = nil
		dst.AppConfigItemFloatUpdate = nil
		dst.AppConfigItemGenericUpdate = nil
		dst.AppConfigItemIntegerUpdate = nil
		dst.AppConfigItemJsonUpdate = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AppConfigItemUpdate)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AppConfigItemUpdate)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AppConfigItemUpdate) MarshalJSON() ([]byte, error) {
	if src.AppConfigItemBooleanUpdate != nil {
		return json.Marshal(&src.AppConfigItemBooleanUpdate)
	}

	if src.AppConfigItemDateUpdate != nil {
		return json.Marshal(&src.AppConfigItemDateUpdate)
	}

	if src.AppConfigItemDatetimeUpdate != nil {
		return json.Marshal(&src.AppConfigItemDatetimeUpdate)
	}

	if src.AppConfigItemFloatUpdate != nil {
		return json.Marshal(&src.AppConfigItemFloatUpdate)
	}

	if src.AppConfigItemGenericUpdate != nil {
		return json.Marshal(&src.AppConfigItemGenericUpdate)
	}

	if src.AppConfigItemIntegerUpdate != nil {
		return json.Marshal(&src.AppConfigItemIntegerUpdate)
	}

	if src.AppConfigItemJsonUpdate != nil {
		return json.Marshal(&src.AppConfigItemJsonUpdate)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AppConfigItemUpdate) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AppConfigItemBooleanUpdate != nil {
		return obj.AppConfigItemBooleanUpdate
	}

	if obj.AppConfigItemDateUpdate != nil {
		return obj.AppConfigItemDateUpdate
	}

	if obj.AppConfigItemDatetimeUpdate != nil {
		return obj.AppConfigItemDatetimeUpdate
	}

	if obj.AppConfigItemFloatUpdate != nil {
		return obj.AppConfigItemFloatUpdate
	}

	if obj.AppConfigItemGenericUpdate != nil {
		return obj.AppConfigItemGenericUpdate
	}

	if obj.AppConfigItemIntegerUpdate != nil {
		return obj.AppConfigItemIntegerUpdate
	}

	if obj.AppConfigItemJsonUpdate != nil {
		return obj.AppConfigItemJsonUpdate
	}

	// all schemas are nil
	return nil
}

type NullableAppConfigItemUpdate struct {
	value *AppConfigItemUpdate
	isSet bool
}

func (v NullableAppConfigItemUpdate) Get() *AppConfigItemUpdate {
	return v.value
}

func (v *NullableAppConfigItemUpdate) Set(val *AppConfigItemUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAppConfigItemUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAppConfigItemUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppConfigItemUpdate(val *AppConfigItemUpdate) *NullableAppConfigItemUpdate {
	return &NullableAppConfigItemUpdate{value: val, isSet: true}
}

func (v NullableAppConfigItemUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppConfigItemUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


