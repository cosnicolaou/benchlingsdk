/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntryDay struct for EntryDay
type EntryDay struct {
	// A Date string
	Date *string `json:"date,omitempty"`
	Notes []EntryDayNotesInner `json:"notes,omitempty"`
}

// NewEntryDay instantiates a new EntryDay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryDay() *EntryDay {
	this := EntryDay{}
	return &this
}

// NewEntryDayWithDefaults instantiates a new EntryDay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryDayWithDefaults() *EntryDay {
	this := EntryDay{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *EntryDay) GetDate() string {
	if o == nil || isNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryDay) GetDateOk() (*string, bool) {
	if o == nil || isNil(o.Date) {
    return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *EntryDay) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *EntryDay) SetDate(v string) {
	o.Date = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *EntryDay) GetNotes() []EntryDayNotesInner {
	if o == nil || isNil(o.Notes) {
		var ret []EntryDayNotesInner
		return ret
	}
	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryDay) GetNotesOk() ([]EntryDayNotesInner, bool) {
	if o == nil || isNil(o.Notes) {
    return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *EntryDay) HasNotes() bool {
	if o != nil && !isNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given []EntryDayNotesInner and assigns it to the Notes field.
func (o *EntryDay) SetNotes(v []EntryDayNotesInner) {
	o.Notes = v
}

func (o EntryDay) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	return json.Marshal(toSerialize)
}

type NullableEntryDay struct {
	value *EntryDay
	isSet bool
}

func (v NullableEntryDay) Get() *EntryDay {
	return v.value
}

func (v *NullableEntryDay) Set(val *EntryDay) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryDay) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryDay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryDay(val *EntryDay) *NullableEntryDay {
	return &NullableEntryDay{value: val, isSet: true}
}

func (v NullableEntryDay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryDay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


