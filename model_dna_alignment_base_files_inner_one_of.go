/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// DnaAlignmentBaseFilesInnerOneOf struct for DnaAlignmentBaseFilesInnerOneOf
type DnaAlignmentBaseFilesInnerOneOf struct {
	SequenceId *string `json:"sequenceId,omitempty"`
}

// NewDnaAlignmentBaseFilesInnerOneOf instantiates a new DnaAlignmentBaseFilesInnerOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnaAlignmentBaseFilesInnerOneOf() *DnaAlignmentBaseFilesInnerOneOf {
	this := DnaAlignmentBaseFilesInnerOneOf{}
	return &this
}

// NewDnaAlignmentBaseFilesInnerOneOfWithDefaults instantiates a new DnaAlignmentBaseFilesInnerOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnaAlignmentBaseFilesInnerOneOfWithDefaults() *DnaAlignmentBaseFilesInnerOneOf {
	this := DnaAlignmentBaseFilesInnerOneOf{}
	return &this
}

// GetSequenceId returns the SequenceId field value if set, zero value otherwise.
func (o *DnaAlignmentBaseFilesInnerOneOf) GetSequenceId() string {
	if o == nil || isNil(o.SequenceId) {
		var ret string
		return ret
	}
	return *o.SequenceId
}

// GetSequenceIdOk returns a tuple with the SequenceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnaAlignmentBaseFilesInnerOneOf) GetSequenceIdOk() (*string, bool) {
	if o == nil || isNil(o.SequenceId) {
    return nil, false
	}
	return o.SequenceId, true
}

// HasSequenceId returns a boolean if a field has been set.
func (o *DnaAlignmentBaseFilesInnerOneOf) HasSequenceId() bool {
	if o != nil && !isNil(o.SequenceId) {
		return true
	}

	return false
}

// SetSequenceId gets a reference to the given string and assigns it to the SequenceId field.
func (o *DnaAlignmentBaseFilesInnerOneOf) SetSequenceId(v string) {
	o.SequenceId = &v
}

func (o DnaAlignmentBaseFilesInnerOneOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SequenceId) {
		toSerialize["sequenceId"] = o.SequenceId
	}
	return json.Marshal(toSerialize)
}

type NullableDnaAlignmentBaseFilesInnerOneOf struct {
	value *DnaAlignmentBaseFilesInnerOneOf
	isSet bool
}

func (v NullableDnaAlignmentBaseFilesInnerOneOf) Get() *DnaAlignmentBaseFilesInnerOneOf {
	return v.value
}

func (v *NullableDnaAlignmentBaseFilesInnerOneOf) Set(val *DnaAlignmentBaseFilesInnerOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDnaAlignmentBaseFilesInnerOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDnaAlignmentBaseFilesInnerOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnaAlignmentBaseFilesInnerOneOf(val *DnaAlignmentBaseFilesInnerOneOf) *NullableDnaAlignmentBaseFilesInnerOneOf {
	return &NullableDnaAlignmentBaseFilesInnerOneOf{value: val, isSet: true}
}

func (v NullableDnaAlignmentBaseFilesInnerOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnaAlignmentBaseFilesInnerOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


