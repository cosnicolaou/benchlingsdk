/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// MixtureMeasurementUnits the model 'MixtureMeasurementUnits'
type MixtureMeasurementUnits string

// List of MixtureMeasurementUnits
const (
	N_L MixtureMeasurementUnits = "nL"
	U_L MixtureMeasurementUnits = "uL"
	M_L MixtureMeasurementUnits = "mL"
	L MixtureMeasurementUnits = "L"
	G MixtureMeasurementUnits = "g"
	KG MixtureMeasurementUnits = "kg"
	UNITS MixtureMeasurementUnits = "Units"
)

// All allowed values of MixtureMeasurementUnits enum
var AllowedMixtureMeasurementUnitsEnumValues = []MixtureMeasurementUnits{
	"nL",
	"uL",
	"mL",
	"L",
	"g",
	"kg",
	"Units",
}

func (v *MixtureMeasurementUnits) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MixtureMeasurementUnits(value)
	for _, existing := range AllowedMixtureMeasurementUnitsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MixtureMeasurementUnits", value)
}

// NewMixtureMeasurementUnitsFromValue returns a pointer to a valid MixtureMeasurementUnits
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMixtureMeasurementUnitsFromValue(v string) (*MixtureMeasurementUnits, error) {
	ev := MixtureMeasurementUnits(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MixtureMeasurementUnits: valid values are %v", v, AllowedMixtureMeasurementUnitsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MixtureMeasurementUnits) IsValid() bool {
	for _, existing := range AllowedMixtureMeasurementUnitsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MixtureMeasurementUnits value
func (v MixtureMeasurementUnits) Ptr() *MixtureMeasurementUnits {
	return &v
}

type NullableMixtureMeasurementUnits struct {
	value *MixtureMeasurementUnits
	isSet bool
}

func (v NullableMixtureMeasurementUnits) Get() *MixtureMeasurementUnits {
	return v.value
}

func (v *NullableMixtureMeasurementUnits) Set(val *MixtureMeasurementUnits) {
	v.value = val
	v.isSet = true
}

func (v NullableMixtureMeasurementUnits) IsSet() bool {
	return v.isSet
}

func (v *NullableMixtureMeasurementUnits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixtureMeasurementUnits(val *MixtureMeasurementUnits) *NullableMixtureMeasurementUnits {
	return &NullableMixtureMeasurementUnits{value: val, isSet: true}
}

func (v NullableMixtureMeasurementUnits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixtureMeasurementUnits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

