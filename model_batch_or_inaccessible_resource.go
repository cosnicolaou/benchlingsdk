/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// BatchOrInaccessibleResource - struct for BatchOrInaccessibleResource
type BatchOrInaccessibleResource struct {
	Batch *Batch
	InaccessibleResource *InaccessibleResource
}

// BatchAsBatchOrInaccessibleResource is a convenience function that returns Batch wrapped in BatchOrInaccessibleResource
func BatchAsBatchOrInaccessibleResource(v *Batch) BatchOrInaccessibleResource {
	return BatchOrInaccessibleResource{
		Batch: v,
	}
}

// InaccessibleResourceAsBatchOrInaccessibleResource is a convenience function that returns InaccessibleResource wrapped in BatchOrInaccessibleResource
func InaccessibleResourceAsBatchOrInaccessibleResource(v *InaccessibleResource) BatchOrInaccessibleResource {
	return BatchOrInaccessibleResource{
		InaccessibleResource: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BatchOrInaccessibleResource) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Batch
	err = newStrictDecoder(data).Decode(&dst.Batch)
	if err == nil {
		jsonBatch, _ := json.Marshal(dst.Batch)
		if string(jsonBatch) == "{}" { // empty struct
			dst.Batch = nil
		} else {
			match++
		}
	} else {
		dst.Batch = nil
	}

	// try to unmarshal data into InaccessibleResource
	err = newStrictDecoder(data).Decode(&dst.InaccessibleResource)
	if err == nil {
		jsonInaccessibleResource, _ := json.Marshal(dst.InaccessibleResource)
		if string(jsonInaccessibleResource) == "{}" { // empty struct
			dst.InaccessibleResource = nil
		} else {
			match++
		}
	} else {
		dst.InaccessibleResource = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Batch = nil
		dst.InaccessibleResource = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BatchOrInaccessibleResource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BatchOrInaccessibleResource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BatchOrInaccessibleResource) MarshalJSON() ([]byte, error) {
	if src.Batch != nil {
		return json.Marshal(&src.Batch)
	}

	if src.InaccessibleResource != nil {
		return json.Marshal(&src.InaccessibleResource)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BatchOrInaccessibleResource) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Batch != nil {
		return obj.Batch
	}

	if obj.InaccessibleResource != nil {
		return obj.InaccessibleResource
	}

	// all schemas are nil
	return nil
}

type NullableBatchOrInaccessibleResource struct {
	value *BatchOrInaccessibleResource
	isSet bool
}

func (v NullableBatchOrInaccessibleResource) Get() *BatchOrInaccessibleResource {
	return v.value
}

func (v *NullableBatchOrInaccessibleResource) Set(val *BatchOrInaccessibleResource) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchOrInaccessibleResource) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchOrInaccessibleResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchOrInaccessibleResource(val *BatchOrInaccessibleResource) *NullableBatchOrInaccessibleResource {
	return &NullableBatchOrInaccessibleResource{value: val, isSet: true}
}

func (v NullableBatchOrInaccessibleResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchOrInaccessibleResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


