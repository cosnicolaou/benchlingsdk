/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// CheckoutRecordAssignee - struct for CheckoutRecordAssignee
type CheckoutRecordAssignee struct {
	TeamSummary *TeamSummary
	UserSummary *UserSummary
}

// TeamSummaryAsCheckoutRecordAssignee is a convenience function that returns TeamSummary wrapped in CheckoutRecordAssignee
func TeamSummaryAsCheckoutRecordAssignee(v *TeamSummary) CheckoutRecordAssignee {
	return CheckoutRecordAssignee{
		TeamSummary: v,
	}
}

// UserSummaryAsCheckoutRecordAssignee is a convenience function that returns UserSummary wrapped in CheckoutRecordAssignee
func UserSummaryAsCheckoutRecordAssignee(v *UserSummary) CheckoutRecordAssignee {
	return CheckoutRecordAssignee{
		UserSummary: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CheckoutRecordAssignee) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into TeamSummary
	err = newStrictDecoder(data).Decode(&dst.TeamSummary)
	if err == nil {
		jsonTeamSummary, _ := json.Marshal(dst.TeamSummary)
		if string(jsonTeamSummary) == "{}" { // empty struct
			dst.TeamSummary = nil
		} else {
			match++
		}
	} else {
		dst.TeamSummary = nil
	}

	// try to unmarshal data into UserSummary
	err = newStrictDecoder(data).Decode(&dst.UserSummary)
	if err == nil {
		jsonUserSummary, _ := json.Marshal(dst.UserSummary)
		if string(jsonUserSummary) == "{}" { // empty struct
			dst.UserSummary = nil
		} else {
			match++
		}
	} else {
		dst.UserSummary = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TeamSummary = nil
		dst.UserSummary = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CheckoutRecordAssignee)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CheckoutRecordAssignee)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CheckoutRecordAssignee) MarshalJSON() ([]byte, error) {
	if src.TeamSummary != nil {
		return json.Marshal(&src.TeamSummary)
	}

	if src.UserSummary != nil {
		return json.Marshal(&src.UserSummary)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CheckoutRecordAssignee) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TeamSummary != nil {
		return obj.TeamSummary
	}

	if obj.UserSummary != nil {
		return obj.UserSummary
	}

	// all schemas are nil
	return nil
}

type NullableCheckoutRecordAssignee struct {
	value *CheckoutRecordAssignee
	isSet bool
}

func (v NullableCheckoutRecordAssignee) Get() *CheckoutRecordAssignee {
	return v.value
}

func (v *NullableCheckoutRecordAssignee) Set(val *CheckoutRecordAssignee) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckoutRecordAssignee) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckoutRecordAssignee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckoutRecordAssignee(val *CheckoutRecordAssignee) *NullableCheckoutRecordAssignee {
	return &NullableCheckoutRecordAssignee{value: val, isSet: true}
}

func (v NullableCheckoutRecordAssignee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckoutRecordAssignee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


