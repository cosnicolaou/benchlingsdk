/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// DropdownCreate struct for DropdownCreate
type DropdownCreate struct {
	// Name of the dropdown
	Name string `json:"name"`
	// Options to set for the dropdown
	Options []DropdownOptionCreate `json:"options"`
	// ID of registry in which to create the dropdown. Required if multiple registries exist.
	RegistryId NullableString `json:"registryId,omitempty"`
}

// NewDropdownCreate instantiates a new DropdownCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDropdownCreate(name string, options []DropdownOptionCreate) *DropdownCreate {
	this := DropdownCreate{}
	this.Name = name
	this.Options = options
	return &this
}

// NewDropdownCreateWithDefaults instantiates a new DropdownCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDropdownCreateWithDefaults() *DropdownCreate {
	this := DropdownCreate{}
	return &this
}

// GetName returns the Name field value
func (o *DropdownCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DropdownCreate) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DropdownCreate) SetName(v string) {
	o.Name = v
}

// GetOptions returns the Options field value
func (o *DropdownCreate) GetOptions() []DropdownOptionCreate {
	if o == nil {
		var ret []DropdownOptionCreate
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *DropdownCreate) GetOptionsOk() ([]DropdownOptionCreate, bool) {
	if o == nil {
    return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *DropdownCreate) SetOptions(v []DropdownOptionCreate) {
	o.Options = v
}

// GetRegistryId returns the RegistryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DropdownCreate) GetRegistryId() string {
	if o == nil || isNil(o.RegistryId.Get()) {
		var ret string
		return ret
	}
	return *o.RegistryId.Get()
}

// GetRegistryIdOk returns a tuple with the RegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DropdownCreate) GetRegistryIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.RegistryId.Get(), o.RegistryId.IsSet()
}

// HasRegistryId returns a boolean if a field has been set.
func (o *DropdownCreate) HasRegistryId() bool {
	if o != nil && o.RegistryId.IsSet() {
		return true
	}

	return false
}

// SetRegistryId gets a reference to the given NullableString and assigns it to the RegistryId field.
func (o *DropdownCreate) SetRegistryId(v string) {
	o.RegistryId.Set(&v)
}
// SetRegistryIdNil sets the value for RegistryId to be an explicit nil
func (o *DropdownCreate) SetRegistryIdNil() {
	o.RegistryId.Set(nil)
}

// UnsetRegistryId ensures that no value is present for RegistryId, not even an explicit nil
func (o *DropdownCreate) UnsetRegistryId() {
	o.RegistryId.Unset()
}

func (o DropdownCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["options"] = o.Options
	}
	if o.RegistryId.IsSet() {
		toSerialize["registryId"] = o.RegistryId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDropdownCreate struct {
	value *DropdownCreate
	isSet bool
}

func (v NullableDropdownCreate) Get() *DropdownCreate {
	return v.value
}

func (v *NullableDropdownCreate) Set(val *DropdownCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableDropdownCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableDropdownCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDropdownCreate(val *DropdownCreate) *NullableDropdownCreate {
	return &NullableDropdownCreate{value: val, isSet: true}
}

func (v NullableDropdownCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDropdownCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


