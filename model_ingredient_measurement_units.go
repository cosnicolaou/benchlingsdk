/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// IngredientMeasurementUnits the model 'IngredientMeasurementUnits'
type IngredientMeasurementUnits string

// List of IngredientMeasurementUnits
const (
	N_L IngredientMeasurementUnits = "nL"
	U_L IngredientMeasurementUnits = "uL"
	M_L IngredientMeasurementUnits = "mL"
	L IngredientMeasurementUnits = "L"
	MG IngredientMeasurementUnits = "mg"
	G IngredientMeasurementUnits = "g"
	UNITS IngredientMeasurementUnits = "Units"
)

// All allowed values of IngredientMeasurementUnits enum
var AllowedIngredientMeasurementUnitsEnumValues = []IngredientMeasurementUnits{
	"nL",
	"uL",
	"mL",
	"L",
	"mg",
	"g",
	"Units",
}

func (v *IngredientMeasurementUnits) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IngredientMeasurementUnits(value)
	for _, existing := range AllowedIngredientMeasurementUnitsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IngredientMeasurementUnits", value)
}

// NewIngredientMeasurementUnitsFromValue returns a pointer to a valid IngredientMeasurementUnits
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIngredientMeasurementUnitsFromValue(v string) (*IngredientMeasurementUnits, error) {
	ev := IngredientMeasurementUnits(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IngredientMeasurementUnits: valid values are %v", v, AllowedIngredientMeasurementUnitsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IngredientMeasurementUnits) IsValid() bool {
	for _, existing := range AllowedIngredientMeasurementUnitsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IngredientMeasurementUnits value
func (v IngredientMeasurementUnits) Ptr() *IngredientMeasurementUnits {
	return &v
}

type NullableIngredientMeasurementUnits struct {
	value *IngredientMeasurementUnits
	isSet bool
}

func (v NullableIngredientMeasurementUnits) Get() *IngredientMeasurementUnits {
	return v.value
}

func (v *NullableIngredientMeasurementUnits) Set(val *IngredientMeasurementUnits) {
	v.value = val
	v.isSet = true
}

func (v NullableIngredientMeasurementUnits) IsSet() bool {
	return v.isSet
}

func (v *NullableIngredientMeasurementUnits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIngredientMeasurementUnits(val *IngredientMeasurementUnits) *NullableIngredientMeasurementUnits {
	return &NullableIngredientMeasurementUnits{value: val, isSet: true}
}

func (v NullableIngredientMeasurementUnits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIngredientMeasurementUnits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

