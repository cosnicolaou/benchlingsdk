/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ResultsTableNotePart struct for ResultsTableNotePart
type ResultsTableNotePart struct {
	// All notes have an indentation level - the default is 0 for no indent. For lists, indentation gives notes hierarchy - a bulleted list with children is modeled as one note part with indentation 1 followed by note parts with indentation 2, for example.
	Indentation *int32 `json:"indentation,omitempty"`
	Type *string `json:"type,omitempty"`
	ApiId *string `json:"apiId,omitempty"`
	Columns []StructuredTableColumnInfo `json:"columns,omitempty"`
	AssayResultSchemaId *string `json:"assayResultSchemaId,omitempty"`
}

// NewResultsTableNotePart instantiates a new ResultsTableNotePart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultsTableNotePart() *ResultsTableNotePart {
	this := ResultsTableNotePart{}
	var indentation int32 = 0
	this.Indentation = &indentation
	return &this
}

// NewResultsTableNotePartWithDefaults instantiates a new ResultsTableNotePart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultsTableNotePartWithDefaults() *ResultsTableNotePart {
	this := ResultsTableNotePart{}
	var indentation int32 = 0
	this.Indentation = &indentation
	return &this
}

// GetIndentation returns the Indentation field value if set, zero value otherwise.
func (o *ResultsTableNotePart) GetIndentation() int32 {
	if o == nil || isNil(o.Indentation) {
		var ret int32
		return ret
	}
	return *o.Indentation
}

// GetIndentationOk returns a tuple with the Indentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsTableNotePart) GetIndentationOk() (*int32, bool) {
	if o == nil || isNil(o.Indentation) {
    return nil, false
	}
	return o.Indentation, true
}

// HasIndentation returns a boolean if a field has been set.
func (o *ResultsTableNotePart) HasIndentation() bool {
	if o != nil && !isNil(o.Indentation) {
		return true
	}

	return false
}

// SetIndentation gets a reference to the given int32 and assigns it to the Indentation field.
func (o *ResultsTableNotePart) SetIndentation(v int32) {
	o.Indentation = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResultsTableNotePart) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsTableNotePart) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResultsTableNotePart) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResultsTableNotePart) SetType(v string) {
	o.Type = &v
}

// GetApiId returns the ApiId field value if set, zero value otherwise.
func (o *ResultsTableNotePart) GetApiId() string {
	if o == nil || isNil(o.ApiId) {
		var ret string
		return ret
	}
	return *o.ApiId
}

// GetApiIdOk returns a tuple with the ApiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsTableNotePart) GetApiIdOk() (*string, bool) {
	if o == nil || isNil(o.ApiId) {
    return nil, false
	}
	return o.ApiId, true
}

// HasApiId returns a boolean if a field has been set.
func (o *ResultsTableNotePart) HasApiId() bool {
	if o != nil && !isNil(o.ApiId) {
		return true
	}

	return false
}

// SetApiId gets a reference to the given string and assigns it to the ApiId field.
func (o *ResultsTableNotePart) SetApiId(v string) {
	o.ApiId = &v
}

// GetColumns returns the Columns field value if set, zero value otherwise.
func (o *ResultsTableNotePart) GetColumns() []StructuredTableColumnInfo {
	if o == nil || isNil(o.Columns) {
		var ret []StructuredTableColumnInfo
		return ret
	}
	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsTableNotePart) GetColumnsOk() ([]StructuredTableColumnInfo, bool) {
	if o == nil || isNil(o.Columns) {
    return nil, false
	}
	return o.Columns, true
}

// HasColumns returns a boolean if a field has been set.
func (o *ResultsTableNotePart) HasColumns() bool {
	if o != nil && !isNil(o.Columns) {
		return true
	}

	return false
}

// SetColumns gets a reference to the given []StructuredTableColumnInfo and assigns it to the Columns field.
func (o *ResultsTableNotePart) SetColumns(v []StructuredTableColumnInfo) {
	o.Columns = v
}

// GetAssayResultSchemaId returns the AssayResultSchemaId field value if set, zero value otherwise.
func (o *ResultsTableNotePart) GetAssayResultSchemaId() string {
	if o == nil || isNil(o.AssayResultSchemaId) {
		var ret string
		return ret
	}
	return *o.AssayResultSchemaId
}

// GetAssayResultSchemaIdOk returns a tuple with the AssayResultSchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsTableNotePart) GetAssayResultSchemaIdOk() (*string, bool) {
	if o == nil || isNil(o.AssayResultSchemaId) {
    return nil, false
	}
	return o.AssayResultSchemaId, true
}

// HasAssayResultSchemaId returns a boolean if a field has been set.
func (o *ResultsTableNotePart) HasAssayResultSchemaId() bool {
	if o != nil && !isNil(o.AssayResultSchemaId) {
		return true
	}

	return false
}

// SetAssayResultSchemaId gets a reference to the given string and assigns it to the AssayResultSchemaId field.
func (o *ResultsTableNotePart) SetAssayResultSchemaId(v string) {
	o.AssayResultSchemaId = &v
}

func (o ResultsTableNotePart) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Indentation) {
		toSerialize["indentation"] = o.Indentation
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.ApiId) {
		toSerialize["apiId"] = o.ApiId
	}
	if !isNil(o.Columns) {
		toSerialize["columns"] = o.Columns
	}
	if !isNil(o.AssayResultSchemaId) {
		toSerialize["assayResultSchemaId"] = o.AssayResultSchemaId
	}
	return json.Marshal(toSerialize)
}

type NullableResultsTableNotePart struct {
	value *ResultsTableNotePart
	isSet bool
}

func (v NullableResultsTableNotePart) Get() *ResultsTableNotePart {
	return v.value
}

func (v *NullableResultsTableNotePart) Set(val *ResultsTableNotePart) {
	v.value = val
	v.isSet = true
}

func (v NullableResultsTableNotePart) IsSet() bool {
	return v.isSet
}

func (v *NullableResultsTableNotePart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultsTableNotePart(val *ResultsTableNotePart) *NullableResultsTableNotePart {
	return &NullableResultsTableNotePart{value: val, isSet: true}
}

func (v NullableResultsTableNotePart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultsTableNotePart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


