/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ProjectsArchive struct for ProjectsArchive
type ProjectsArchive struct {
	// A list of project IDs to archive.
	ProjectIds []string `json:"projectIds"`
	// The reason for archiving the provided projects. Accepted reasons may differ based on tenant configuration. 
	Reason string `json:"reason"`
}

// NewProjectsArchive instantiates a new ProjectsArchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsArchive(projectIds []string, reason string) *ProjectsArchive {
	this := ProjectsArchive{}
	this.ProjectIds = projectIds
	this.Reason = reason
	return &this
}

// NewProjectsArchiveWithDefaults instantiates a new ProjectsArchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsArchiveWithDefaults() *ProjectsArchive {
	this := ProjectsArchive{}
	return &this
}

// GetProjectIds returns the ProjectIds field value
func (o *ProjectsArchive) GetProjectIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value
// and a boolean to check if the value has been set.
func (o *ProjectsArchive) GetProjectIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ProjectIds, true
}

// SetProjectIds sets field value
func (o *ProjectsArchive) SetProjectIds(v []string) {
	o.ProjectIds = v
}

// GetReason returns the Reason field value
func (o *ProjectsArchive) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ProjectsArchive) GetReasonOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ProjectsArchive) SetReason(v string) {
	o.Reason = v
}

func (o ProjectsArchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["projectIds"] = o.ProjectIds
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsArchive struct {
	value *ProjectsArchive
	isSet bool
}

func (v NullableProjectsArchive) Get() *ProjectsArchive {
	return v.value
}

func (v *NullableProjectsArchive) Set(val *ProjectsArchive) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsArchive) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsArchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsArchive(val *ProjectsArchive) *NullableProjectsArchive {
	return &NullableProjectsArchive{value: val, isSet: true}
}

func (v NullableProjectsArchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsArchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


