/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// AppConfigItem - struct for AppConfigItem
type AppConfigItem struct {
	BooleanAppConfigItem *BooleanAppConfigItem
	DateAppConfigItem *DateAppConfigItem
	DatetimeAppConfigItem *DatetimeAppConfigItem
	EntitySchemaAppConfigItem *EntitySchemaAppConfigItem
	FieldAppConfigItem *FieldAppConfigItem
	FloatAppConfigItem *FloatAppConfigItem
	GenericApiIdentifiedAppConfigItem *GenericApiIdentifiedAppConfigItem
	IntegerAppConfigItem *IntegerAppConfigItem
	JsonAppConfigItem *JsonAppConfigItem
	SecureTextAppConfigItem *SecureTextAppConfigItem
	TextAppConfigItem *TextAppConfigItem
}

// BooleanAppConfigItemAsAppConfigItem is a convenience function that returns BooleanAppConfigItem wrapped in AppConfigItem
func BooleanAppConfigItemAsAppConfigItem(v *BooleanAppConfigItem) AppConfigItem {
	return AppConfigItem{
		BooleanAppConfigItem: v,
	}
}

// DateAppConfigItemAsAppConfigItem is a convenience function that returns DateAppConfigItem wrapped in AppConfigItem
func DateAppConfigItemAsAppConfigItem(v *DateAppConfigItem) AppConfigItem {
	return AppConfigItem{
		DateAppConfigItem: v,
	}
}

// DatetimeAppConfigItemAsAppConfigItem is a convenience function that returns DatetimeAppConfigItem wrapped in AppConfigItem
func DatetimeAppConfigItemAsAppConfigItem(v *DatetimeAppConfigItem) AppConfigItem {
	return AppConfigItem{
		DatetimeAppConfigItem: v,
	}
}

// EntitySchemaAppConfigItemAsAppConfigItem is a convenience function that returns EntitySchemaAppConfigItem wrapped in AppConfigItem
func EntitySchemaAppConfigItemAsAppConfigItem(v *EntitySchemaAppConfigItem) AppConfigItem {
	return AppConfigItem{
		EntitySchemaAppConfigItem: v,
	}
}

// FieldAppConfigItemAsAppConfigItem is a convenience function that returns FieldAppConfigItem wrapped in AppConfigItem
func FieldAppConfigItemAsAppConfigItem(v *FieldAppConfigItem) AppConfigItem {
	return AppConfigItem{
		FieldAppConfigItem: v,
	}
}

// FloatAppConfigItemAsAppConfigItem is a convenience function that returns FloatAppConfigItem wrapped in AppConfigItem
func FloatAppConfigItemAsAppConfigItem(v *FloatAppConfigItem) AppConfigItem {
	return AppConfigItem{
		FloatAppConfigItem: v,
	}
}

// GenericApiIdentifiedAppConfigItemAsAppConfigItem is a convenience function that returns GenericApiIdentifiedAppConfigItem wrapped in AppConfigItem
func GenericApiIdentifiedAppConfigItemAsAppConfigItem(v *GenericApiIdentifiedAppConfigItem) AppConfigItem {
	return AppConfigItem{
		GenericApiIdentifiedAppConfigItem: v,
	}
}

// IntegerAppConfigItemAsAppConfigItem is a convenience function that returns IntegerAppConfigItem wrapped in AppConfigItem
func IntegerAppConfigItemAsAppConfigItem(v *IntegerAppConfigItem) AppConfigItem {
	return AppConfigItem{
		IntegerAppConfigItem: v,
	}
}

// JsonAppConfigItemAsAppConfigItem is a convenience function that returns JsonAppConfigItem wrapped in AppConfigItem
func JsonAppConfigItemAsAppConfigItem(v *JsonAppConfigItem) AppConfigItem {
	return AppConfigItem{
		JsonAppConfigItem: v,
	}
}

// SecureTextAppConfigItemAsAppConfigItem is a convenience function that returns SecureTextAppConfigItem wrapped in AppConfigItem
func SecureTextAppConfigItemAsAppConfigItem(v *SecureTextAppConfigItem) AppConfigItem {
	return AppConfigItem{
		SecureTextAppConfigItem: v,
	}
}

// TextAppConfigItemAsAppConfigItem is a convenience function that returns TextAppConfigItem wrapped in AppConfigItem
func TextAppConfigItemAsAppConfigItem(v *TextAppConfigItem) AppConfigItem {
	return AppConfigItem{
		TextAppConfigItem: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AppConfigItem) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BooleanAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.BooleanAppConfigItem)
	if err == nil {
		jsonBooleanAppConfigItem, _ := json.Marshal(dst.BooleanAppConfigItem)
		if string(jsonBooleanAppConfigItem) == "{}" { // empty struct
			dst.BooleanAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.BooleanAppConfigItem = nil
	}

	// try to unmarshal data into DateAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.DateAppConfigItem)
	if err == nil {
		jsonDateAppConfigItem, _ := json.Marshal(dst.DateAppConfigItem)
		if string(jsonDateAppConfigItem) == "{}" { // empty struct
			dst.DateAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.DateAppConfigItem = nil
	}

	// try to unmarshal data into DatetimeAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.DatetimeAppConfigItem)
	if err == nil {
		jsonDatetimeAppConfigItem, _ := json.Marshal(dst.DatetimeAppConfigItem)
		if string(jsonDatetimeAppConfigItem) == "{}" { // empty struct
			dst.DatetimeAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.DatetimeAppConfigItem = nil
	}

	// try to unmarshal data into EntitySchemaAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.EntitySchemaAppConfigItem)
	if err == nil {
		jsonEntitySchemaAppConfigItem, _ := json.Marshal(dst.EntitySchemaAppConfigItem)
		if string(jsonEntitySchemaAppConfigItem) == "{}" { // empty struct
			dst.EntitySchemaAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.EntitySchemaAppConfigItem = nil
	}

	// try to unmarshal data into FieldAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.FieldAppConfigItem)
	if err == nil {
		jsonFieldAppConfigItem, _ := json.Marshal(dst.FieldAppConfigItem)
		if string(jsonFieldAppConfigItem) == "{}" { // empty struct
			dst.FieldAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.FieldAppConfigItem = nil
	}

	// try to unmarshal data into FloatAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.FloatAppConfigItem)
	if err == nil {
		jsonFloatAppConfigItem, _ := json.Marshal(dst.FloatAppConfigItem)
		if string(jsonFloatAppConfigItem) == "{}" { // empty struct
			dst.FloatAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.FloatAppConfigItem = nil
	}

	// try to unmarshal data into GenericApiIdentifiedAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.GenericApiIdentifiedAppConfigItem)
	if err == nil {
		jsonGenericApiIdentifiedAppConfigItem, _ := json.Marshal(dst.GenericApiIdentifiedAppConfigItem)
		if string(jsonGenericApiIdentifiedAppConfigItem) == "{}" { // empty struct
			dst.GenericApiIdentifiedAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.GenericApiIdentifiedAppConfigItem = nil
	}

	// try to unmarshal data into IntegerAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.IntegerAppConfigItem)
	if err == nil {
		jsonIntegerAppConfigItem, _ := json.Marshal(dst.IntegerAppConfigItem)
		if string(jsonIntegerAppConfigItem) == "{}" { // empty struct
			dst.IntegerAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.IntegerAppConfigItem = nil
	}

	// try to unmarshal data into JsonAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.JsonAppConfigItem)
	if err == nil {
		jsonJsonAppConfigItem, _ := json.Marshal(dst.JsonAppConfigItem)
		if string(jsonJsonAppConfigItem) == "{}" { // empty struct
			dst.JsonAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.JsonAppConfigItem = nil
	}

	// try to unmarshal data into SecureTextAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.SecureTextAppConfigItem)
	if err == nil {
		jsonSecureTextAppConfigItem, _ := json.Marshal(dst.SecureTextAppConfigItem)
		if string(jsonSecureTextAppConfigItem) == "{}" { // empty struct
			dst.SecureTextAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.SecureTextAppConfigItem = nil
	}

	// try to unmarshal data into TextAppConfigItem
	err = newStrictDecoder(data).Decode(&dst.TextAppConfigItem)
	if err == nil {
		jsonTextAppConfigItem, _ := json.Marshal(dst.TextAppConfigItem)
		if string(jsonTextAppConfigItem) == "{}" { // empty struct
			dst.TextAppConfigItem = nil
		} else {
			match++
		}
	} else {
		dst.TextAppConfigItem = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BooleanAppConfigItem = nil
		dst.DateAppConfigItem = nil
		dst.DatetimeAppConfigItem = nil
		dst.EntitySchemaAppConfigItem = nil
		dst.FieldAppConfigItem = nil
		dst.FloatAppConfigItem = nil
		dst.GenericApiIdentifiedAppConfigItem = nil
		dst.IntegerAppConfigItem = nil
		dst.JsonAppConfigItem = nil
		dst.SecureTextAppConfigItem = nil
		dst.TextAppConfigItem = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AppConfigItem)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AppConfigItem)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AppConfigItem) MarshalJSON() ([]byte, error) {
	if src.BooleanAppConfigItem != nil {
		return json.Marshal(&src.BooleanAppConfigItem)
	}

	if src.DateAppConfigItem != nil {
		return json.Marshal(&src.DateAppConfigItem)
	}

	if src.DatetimeAppConfigItem != nil {
		return json.Marshal(&src.DatetimeAppConfigItem)
	}

	if src.EntitySchemaAppConfigItem != nil {
		return json.Marshal(&src.EntitySchemaAppConfigItem)
	}

	if src.FieldAppConfigItem != nil {
		return json.Marshal(&src.FieldAppConfigItem)
	}

	if src.FloatAppConfigItem != nil {
		return json.Marshal(&src.FloatAppConfigItem)
	}

	if src.GenericApiIdentifiedAppConfigItem != nil {
		return json.Marshal(&src.GenericApiIdentifiedAppConfigItem)
	}

	if src.IntegerAppConfigItem != nil {
		return json.Marshal(&src.IntegerAppConfigItem)
	}

	if src.JsonAppConfigItem != nil {
		return json.Marshal(&src.JsonAppConfigItem)
	}

	if src.SecureTextAppConfigItem != nil {
		return json.Marshal(&src.SecureTextAppConfigItem)
	}

	if src.TextAppConfigItem != nil {
		return json.Marshal(&src.TextAppConfigItem)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AppConfigItem) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BooleanAppConfigItem != nil {
		return obj.BooleanAppConfigItem
	}

	if obj.DateAppConfigItem != nil {
		return obj.DateAppConfigItem
	}

	if obj.DatetimeAppConfigItem != nil {
		return obj.DatetimeAppConfigItem
	}

	if obj.EntitySchemaAppConfigItem != nil {
		return obj.EntitySchemaAppConfigItem
	}

	if obj.FieldAppConfigItem != nil {
		return obj.FieldAppConfigItem
	}

	if obj.FloatAppConfigItem != nil {
		return obj.FloatAppConfigItem
	}

	if obj.GenericApiIdentifiedAppConfigItem != nil {
		return obj.GenericApiIdentifiedAppConfigItem
	}

	if obj.IntegerAppConfigItem != nil {
		return obj.IntegerAppConfigItem
	}

	if obj.JsonAppConfigItem != nil {
		return obj.JsonAppConfigItem
	}

	if obj.SecureTextAppConfigItem != nil {
		return obj.SecureTextAppConfigItem
	}

	if obj.TextAppConfigItem != nil {
		return obj.TextAppConfigItem
	}

	// all schemas are nil
	return nil
}

type NullableAppConfigItem struct {
	value *AppConfigItem
	isSet bool
}

func (v NullableAppConfigItem) Get() *AppConfigItem {
	return v.value
}

func (v *NullableAppConfigItem) Set(val *AppConfigItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAppConfigItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAppConfigItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppConfigItem(val *AppConfigItem) *NullableAppConfigItem {
	return &NullableAppConfigItem{value: val, isSet: true}
}

func (v NullableAppConfigItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppConfigItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


