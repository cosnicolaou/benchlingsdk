/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// RegisteredEntitiesListEntitiesInner - struct for RegisteredEntitiesListEntitiesInner
type RegisteredEntitiesListEntitiesInner struct {
	AaSequenceWithEntityType *AaSequenceWithEntityType
	CustomEntityWithEntityType *CustomEntityWithEntityType
	DnaOligoWithEntityType *DnaOligoWithEntityType
	DnaSequenceWithEntityType *DnaSequenceWithEntityType
	MixtureWithEntityType *MixtureWithEntityType
	RnaOligoWithEntityType *RnaOligoWithEntityType
}

// AaSequenceWithEntityTypeAsRegisteredEntitiesListEntitiesInner is a convenience function that returns AaSequenceWithEntityType wrapped in RegisteredEntitiesListEntitiesInner
func AaSequenceWithEntityTypeAsRegisteredEntitiesListEntitiesInner(v *AaSequenceWithEntityType) RegisteredEntitiesListEntitiesInner {
	return RegisteredEntitiesListEntitiesInner{
		AaSequenceWithEntityType: v,
	}
}

// CustomEntityWithEntityTypeAsRegisteredEntitiesListEntitiesInner is a convenience function that returns CustomEntityWithEntityType wrapped in RegisteredEntitiesListEntitiesInner
func CustomEntityWithEntityTypeAsRegisteredEntitiesListEntitiesInner(v *CustomEntityWithEntityType) RegisteredEntitiesListEntitiesInner {
	return RegisteredEntitiesListEntitiesInner{
		CustomEntityWithEntityType: v,
	}
}

// DnaOligoWithEntityTypeAsRegisteredEntitiesListEntitiesInner is a convenience function that returns DnaOligoWithEntityType wrapped in RegisteredEntitiesListEntitiesInner
func DnaOligoWithEntityTypeAsRegisteredEntitiesListEntitiesInner(v *DnaOligoWithEntityType) RegisteredEntitiesListEntitiesInner {
	return RegisteredEntitiesListEntitiesInner{
		DnaOligoWithEntityType: v,
	}
}

// DnaSequenceWithEntityTypeAsRegisteredEntitiesListEntitiesInner is a convenience function that returns DnaSequenceWithEntityType wrapped in RegisteredEntitiesListEntitiesInner
func DnaSequenceWithEntityTypeAsRegisteredEntitiesListEntitiesInner(v *DnaSequenceWithEntityType) RegisteredEntitiesListEntitiesInner {
	return RegisteredEntitiesListEntitiesInner{
		DnaSequenceWithEntityType: v,
	}
}

// MixtureWithEntityTypeAsRegisteredEntitiesListEntitiesInner is a convenience function that returns MixtureWithEntityType wrapped in RegisteredEntitiesListEntitiesInner
func MixtureWithEntityTypeAsRegisteredEntitiesListEntitiesInner(v *MixtureWithEntityType) RegisteredEntitiesListEntitiesInner {
	return RegisteredEntitiesListEntitiesInner{
		MixtureWithEntityType: v,
	}
}

// RnaOligoWithEntityTypeAsRegisteredEntitiesListEntitiesInner is a convenience function that returns RnaOligoWithEntityType wrapped in RegisteredEntitiesListEntitiesInner
func RnaOligoWithEntityTypeAsRegisteredEntitiesListEntitiesInner(v *RnaOligoWithEntityType) RegisteredEntitiesListEntitiesInner {
	return RegisteredEntitiesListEntitiesInner{
		RnaOligoWithEntityType: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RegisteredEntitiesListEntitiesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AaSequenceWithEntityType
	err = newStrictDecoder(data).Decode(&dst.AaSequenceWithEntityType)
	if err == nil {
		jsonAaSequenceWithEntityType, _ := json.Marshal(dst.AaSequenceWithEntityType)
		if string(jsonAaSequenceWithEntityType) == "{}" { // empty struct
			dst.AaSequenceWithEntityType = nil
		} else {
			match++
		}
	} else {
		dst.AaSequenceWithEntityType = nil
	}

	// try to unmarshal data into CustomEntityWithEntityType
	err = newStrictDecoder(data).Decode(&dst.CustomEntityWithEntityType)
	if err == nil {
		jsonCustomEntityWithEntityType, _ := json.Marshal(dst.CustomEntityWithEntityType)
		if string(jsonCustomEntityWithEntityType) == "{}" { // empty struct
			dst.CustomEntityWithEntityType = nil
		} else {
			match++
		}
	} else {
		dst.CustomEntityWithEntityType = nil
	}

	// try to unmarshal data into DnaOligoWithEntityType
	err = newStrictDecoder(data).Decode(&dst.DnaOligoWithEntityType)
	if err == nil {
		jsonDnaOligoWithEntityType, _ := json.Marshal(dst.DnaOligoWithEntityType)
		if string(jsonDnaOligoWithEntityType) == "{}" { // empty struct
			dst.DnaOligoWithEntityType = nil
		} else {
			match++
		}
	} else {
		dst.DnaOligoWithEntityType = nil
	}

	// try to unmarshal data into DnaSequenceWithEntityType
	err = newStrictDecoder(data).Decode(&dst.DnaSequenceWithEntityType)
	if err == nil {
		jsonDnaSequenceWithEntityType, _ := json.Marshal(dst.DnaSequenceWithEntityType)
		if string(jsonDnaSequenceWithEntityType) == "{}" { // empty struct
			dst.DnaSequenceWithEntityType = nil
		} else {
			match++
		}
	} else {
		dst.DnaSequenceWithEntityType = nil
	}

	// try to unmarshal data into MixtureWithEntityType
	err = newStrictDecoder(data).Decode(&dst.MixtureWithEntityType)
	if err == nil {
		jsonMixtureWithEntityType, _ := json.Marshal(dst.MixtureWithEntityType)
		if string(jsonMixtureWithEntityType) == "{}" { // empty struct
			dst.MixtureWithEntityType = nil
		} else {
			match++
		}
	} else {
		dst.MixtureWithEntityType = nil
	}

	// try to unmarshal data into RnaOligoWithEntityType
	err = newStrictDecoder(data).Decode(&dst.RnaOligoWithEntityType)
	if err == nil {
		jsonRnaOligoWithEntityType, _ := json.Marshal(dst.RnaOligoWithEntityType)
		if string(jsonRnaOligoWithEntityType) == "{}" { // empty struct
			dst.RnaOligoWithEntityType = nil
		} else {
			match++
		}
	} else {
		dst.RnaOligoWithEntityType = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AaSequenceWithEntityType = nil
		dst.CustomEntityWithEntityType = nil
		dst.DnaOligoWithEntityType = nil
		dst.DnaSequenceWithEntityType = nil
		dst.MixtureWithEntityType = nil
		dst.RnaOligoWithEntityType = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RegisteredEntitiesListEntitiesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RegisteredEntitiesListEntitiesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RegisteredEntitiesListEntitiesInner) MarshalJSON() ([]byte, error) {
	if src.AaSequenceWithEntityType != nil {
		return json.Marshal(&src.AaSequenceWithEntityType)
	}

	if src.CustomEntityWithEntityType != nil {
		return json.Marshal(&src.CustomEntityWithEntityType)
	}

	if src.DnaOligoWithEntityType != nil {
		return json.Marshal(&src.DnaOligoWithEntityType)
	}

	if src.DnaSequenceWithEntityType != nil {
		return json.Marshal(&src.DnaSequenceWithEntityType)
	}

	if src.MixtureWithEntityType != nil {
		return json.Marshal(&src.MixtureWithEntityType)
	}

	if src.RnaOligoWithEntityType != nil {
		return json.Marshal(&src.RnaOligoWithEntityType)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RegisteredEntitiesListEntitiesInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AaSequenceWithEntityType != nil {
		return obj.AaSequenceWithEntityType
	}

	if obj.CustomEntityWithEntityType != nil {
		return obj.CustomEntityWithEntityType
	}

	if obj.DnaOligoWithEntityType != nil {
		return obj.DnaOligoWithEntityType
	}

	if obj.DnaSequenceWithEntityType != nil {
		return obj.DnaSequenceWithEntityType
	}

	if obj.MixtureWithEntityType != nil {
		return obj.MixtureWithEntityType
	}

	if obj.RnaOligoWithEntityType != nil {
		return obj.RnaOligoWithEntityType
	}

	// all schemas are nil
	return nil
}

type NullableRegisteredEntitiesListEntitiesInner struct {
	value *RegisteredEntitiesListEntitiesInner
	isSet bool
}

func (v NullableRegisteredEntitiesListEntitiesInner) Get() *RegisteredEntitiesListEntitiesInner {
	return v.value
}

func (v *NullableRegisteredEntitiesListEntitiesInner) Set(val *RegisteredEntitiesListEntitiesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredEntitiesListEntitiesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredEntitiesListEntitiesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredEntitiesListEntitiesInner(val *RegisteredEntitiesListEntitiesInner) *NullableRegisteredEntitiesListEntitiesInner {
	return &NullableRegisteredEntitiesListEntitiesInner{value: val, isSet: true}
}

func (v NullableRegisteredEntitiesListEntitiesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredEntitiesListEntitiesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


