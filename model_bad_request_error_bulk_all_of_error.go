/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BadRequestErrorBulkAllOfError struct for BadRequestErrorBulkAllOfError
type BadRequestErrorBulkAllOfError struct {
	Errors []BadRequestErrorBulkAllOfErrorErrors `json:"errors,omitempty"`
}

// NewBadRequestErrorBulkAllOfError instantiates a new BadRequestErrorBulkAllOfError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBadRequestErrorBulkAllOfError() *BadRequestErrorBulkAllOfError {
	this := BadRequestErrorBulkAllOfError{}
	return &this
}

// NewBadRequestErrorBulkAllOfErrorWithDefaults instantiates a new BadRequestErrorBulkAllOfError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBadRequestErrorBulkAllOfErrorWithDefaults() *BadRequestErrorBulkAllOfError {
	this := BadRequestErrorBulkAllOfError{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *BadRequestErrorBulkAllOfError) GetErrors() []BadRequestErrorBulkAllOfErrorErrors {
	if o == nil || isNil(o.Errors) {
		var ret []BadRequestErrorBulkAllOfErrorErrors
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadRequestErrorBulkAllOfError) GetErrorsOk() ([]BadRequestErrorBulkAllOfErrorErrors, bool) {
	if o == nil || isNil(o.Errors) {
    return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *BadRequestErrorBulkAllOfError) HasErrors() bool {
	if o != nil && !isNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []BadRequestErrorBulkAllOfErrorErrors and assigns it to the Errors field.
func (o *BadRequestErrorBulkAllOfError) SetErrors(v []BadRequestErrorBulkAllOfErrorErrors) {
	o.Errors = v
}

func (o BadRequestErrorBulkAllOfError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableBadRequestErrorBulkAllOfError struct {
	value *BadRequestErrorBulkAllOfError
	isSet bool
}

func (v NullableBadRequestErrorBulkAllOfError) Get() *BadRequestErrorBulkAllOfError {
	return v.value
}

func (v *NullableBadRequestErrorBulkAllOfError) Set(val *BadRequestErrorBulkAllOfError) {
	v.value = val
	v.isSet = true
}

func (v NullableBadRequestErrorBulkAllOfError) IsSet() bool {
	return v.isSet
}

func (v *NullableBadRequestErrorBulkAllOfError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBadRequestErrorBulkAllOfError(val *BadRequestErrorBulkAllOfError) *NullableBadRequestErrorBulkAllOfError {
	return &NullableBadRequestErrorBulkAllOfError{value: val, isSet: true}
}

func (v NullableBadRequestErrorBulkAllOfError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBadRequestErrorBulkAllOfError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


