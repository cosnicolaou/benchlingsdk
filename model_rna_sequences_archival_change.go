/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// RnaSequencesArchivalChange IDs of all RNA Sequences that were archived or unarchived, grouped by resource type. 
type RnaSequencesArchivalChange struct {
	RnaSequenceIds []string `json:"rnaSequenceIds,omitempty"`
}

// NewRnaSequencesArchivalChange instantiates a new RnaSequencesArchivalChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRnaSequencesArchivalChange() *RnaSequencesArchivalChange {
	this := RnaSequencesArchivalChange{}
	return &this
}

// NewRnaSequencesArchivalChangeWithDefaults instantiates a new RnaSequencesArchivalChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRnaSequencesArchivalChangeWithDefaults() *RnaSequencesArchivalChange {
	this := RnaSequencesArchivalChange{}
	return &this
}

// GetRnaSequenceIds returns the RnaSequenceIds field value if set, zero value otherwise.
func (o *RnaSequencesArchivalChange) GetRnaSequenceIds() []string {
	if o == nil || isNil(o.RnaSequenceIds) {
		var ret []string
		return ret
	}
	return o.RnaSequenceIds
}

// GetRnaSequenceIdsOk returns a tuple with the RnaSequenceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RnaSequencesArchivalChange) GetRnaSequenceIdsOk() ([]string, bool) {
	if o == nil || isNil(o.RnaSequenceIds) {
    return nil, false
	}
	return o.RnaSequenceIds, true
}

// HasRnaSequenceIds returns a boolean if a field has been set.
func (o *RnaSequencesArchivalChange) HasRnaSequenceIds() bool {
	if o != nil && !isNil(o.RnaSequenceIds) {
		return true
	}

	return false
}

// SetRnaSequenceIds gets a reference to the given []string and assigns it to the RnaSequenceIds field.
func (o *RnaSequencesArchivalChange) SetRnaSequenceIds(v []string) {
	o.RnaSequenceIds = v
}

func (o RnaSequencesArchivalChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RnaSequenceIds) {
		toSerialize["rnaSequenceIds"] = o.RnaSequenceIds
	}
	return json.Marshal(toSerialize)
}

type NullableRnaSequencesArchivalChange struct {
	value *RnaSequencesArchivalChange
	isSet bool
}

func (v NullableRnaSequencesArchivalChange) Get() *RnaSequencesArchivalChange {
	return v.value
}

func (v *NullableRnaSequencesArchivalChange) Set(val *RnaSequencesArchivalChange) {
	v.value = val
	v.isSet = true
}

func (v NullableRnaSequencesArchivalChange) IsSet() bool {
	return v.isSet
}

func (v *NullableRnaSequencesArchivalChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRnaSequencesArchivalChange(val *RnaSequencesArchivalChange) *NullableRnaSequencesArchivalChange {
	return &NullableRnaSequencesArchivalChange{value: val, isSet: true}
}

func (v NullableRnaSequencesArchivalChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRnaSequencesArchivalChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


