/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AsyncTaskLink struct for AsyncTaskLink
type AsyncTaskLink struct {
	TaskId *string `json:"taskId,omitempty"`
}

// NewAsyncTaskLink instantiates a new AsyncTaskLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAsyncTaskLink() *AsyncTaskLink {
	this := AsyncTaskLink{}
	return &this
}

// NewAsyncTaskLinkWithDefaults instantiates a new AsyncTaskLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAsyncTaskLinkWithDefaults() *AsyncTaskLink {
	this := AsyncTaskLink{}
	return &this
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *AsyncTaskLink) GetTaskId() string {
	if o == nil || isNil(o.TaskId) {
		var ret string
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AsyncTaskLink) GetTaskIdOk() (*string, bool) {
	if o == nil || isNil(o.TaskId) {
    return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *AsyncTaskLink) HasTaskId() bool {
	if o != nil && !isNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given string and assigns it to the TaskId field.
func (o *AsyncTaskLink) SetTaskId(v string) {
	o.TaskId = &v
}

func (o AsyncTaskLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TaskId) {
		toSerialize["taskId"] = o.TaskId
	}
	return json.Marshal(toSerialize)
}

type NullableAsyncTaskLink struct {
	value *AsyncTaskLink
	isSet bool
}

func (v NullableAsyncTaskLink) Get() *AsyncTaskLink {
	return v.value
}

func (v *NullableAsyncTaskLink) Set(val *AsyncTaskLink) {
	v.value = val
	v.isSet = true
}

func (v NullableAsyncTaskLink) IsSet() bool {
	return v.isSet
}

func (v *NullableAsyncTaskLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAsyncTaskLink(val *AsyncTaskLink) *NullableAsyncTaskLink {
	return &NullableAsyncTaskLink{value: val, isSet: true}
}

func (v NullableAsyncTaskLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAsyncTaskLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


