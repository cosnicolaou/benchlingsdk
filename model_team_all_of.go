/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// TeamAllOf struct for TeamAllOf
type TeamAllOf struct {
	Organization *OrganizationSummary `json:"organization,omitempty"`
}

// NewTeamAllOf instantiates a new TeamAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamAllOf() *TeamAllOf {
	this := TeamAllOf{}
	return &this
}

// NewTeamAllOfWithDefaults instantiates a new TeamAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamAllOfWithDefaults() *TeamAllOf {
	this := TeamAllOf{}
	return &this
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *TeamAllOf) GetOrganization() OrganizationSummary {
	if o == nil || isNil(o.Organization) {
		var ret OrganizationSummary
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamAllOf) GetOrganizationOk() (*OrganizationSummary, bool) {
	if o == nil || isNil(o.Organization) {
    return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *TeamAllOf) HasOrganization() bool {
	if o != nil && !isNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given OrganizationSummary and assigns it to the Organization field.
func (o *TeamAllOf) SetOrganization(v OrganizationSummary) {
	o.Organization = &v
}

func (o TeamAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	return json.Marshal(toSerialize)
}

type NullableTeamAllOf struct {
	value *TeamAllOf
	isSet bool
}

func (v NullableTeamAllOf) Get() *TeamAllOf {
	return v.value
}

func (v *NullableTeamAllOf) Set(val *TeamAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamAllOf(val *TeamAllOf) *NullableTeamAllOf {
	return &NullableTeamAllOf{value: val, isSet: true}
}

func (v NullableTeamAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


