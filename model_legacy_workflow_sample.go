/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"time"
)

// LegacyWorkflowSample struct for LegacyWorkflowSample
type LegacyWorkflowSample struct {
	// ID of the batch
	BatchId *string `json:"batchId,omitempty"`
	// Array of IDs of containers
	ContainerIds []string `json:"containerIds,omitempty"`
	// DateTime at which the the sample was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// ID of the sample
	Id *string `json:"id,omitempty"`
	// Name of the sample
	Name *string `json:"name,omitempty"`
}

// NewLegacyWorkflowSample instantiates a new LegacyWorkflowSample object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyWorkflowSample() *LegacyWorkflowSample {
	this := LegacyWorkflowSample{}
	return &this
}

// NewLegacyWorkflowSampleWithDefaults instantiates a new LegacyWorkflowSample object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyWorkflowSampleWithDefaults() *LegacyWorkflowSample {
	this := LegacyWorkflowSample{}
	return &this
}

// GetBatchId returns the BatchId field value if set, zero value otherwise.
func (o *LegacyWorkflowSample) GetBatchId() string {
	if o == nil || isNil(o.BatchId) {
		var ret string
		return ret
	}
	return *o.BatchId
}

// GetBatchIdOk returns a tuple with the BatchId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflowSample) GetBatchIdOk() (*string, bool) {
	if o == nil || isNil(o.BatchId) {
    return nil, false
	}
	return o.BatchId, true
}

// HasBatchId returns a boolean if a field has been set.
func (o *LegacyWorkflowSample) HasBatchId() bool {
	if o != nil && !isNil(o.BatchId) {
		return true
	}

	return false
}

// SetBatchId gets a reference to the given string and assigns it to the BatchId field.
func (o *LegacyWorkflowSample) SetBatchId(v string) {
	o.BatchId = &v
}

// GetContainerIds returns the ContainerIds field value if set, zero value otherwise.
func (o *LegacyWorkflowSample) GetContainerIds() []string {
	if o == nil || isNil(o.ContainerIds) {
		var ret []string
		return ret
	}
	return o.ContainerIds
}

// GetContainerIdsOk returns a tuple with the ContainerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflowSample) GetContainerIdsOk() ([]string, bool) {
	if o == nil || isNil(o.ContainerIds) {
    return nil, false
	}
	return o.ContainerIds, true
}

// HasContainerIds returns a boolean if a field has been set.
func (o *LegacyWorkflowSample) HasContainerIds() bool {
	if o != nil && !isNil(o.ContainerIds) {
		return true
	}

	return false
}

// SetContainerIds gets a reference to the given []string and assigns it to the ContainerIds field.
func (o *LegacyWorkflowSample) SetContainerIds(v []string) {
	o.ContainerIds = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *LegacyWorkflowSample) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflowSample) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *LegacyWorkflowSample) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *LegacyWorkflowSample) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LegacyWorkflowSample) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflowSample) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LegacyWorkflowSample) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LegacyWorkflowSample) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LegacyWorkflowSample) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflowSample) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LegacyWorkflowSample) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LegacyWorkflowSample) SetName(v string) {
	o.Name = &v
}

func (o LegacyWorkflowSample) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BatchId) {
		toSerialize["batchId"] = o.BatchId
	}
	if !isNil(o.ContainerIds) {
		toSerialize["containerIds"] = o.ContainerIds
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableLegacyWorkflowSample struct {
	value *LegacyWorkflowSample
	isSet bool
}

func (v NullableLegacyWorkflowSample) Get() *LegacyWorkflowSample {
	return v.value
}

func (v *NullableLegacyWorkflowSample) Set(val *LegacyWorkflowSample) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyWorkflowSample) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyWorkflowSample) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyWorkflowSample(val *LegacyWorkflowSample) *NullableLegacyWorkflowSample {
	return &NullableLegacyWorkflowSample{value: val, isSet: true}
}

func (v NullableLegacyWorkflowSample) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyWorkflowSample) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


