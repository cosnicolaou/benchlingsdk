/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"time"
)

// Entry Entries are notes that users can take. They're organized by \"days\" (which are user-configurable) and modeled within each day as a list of \"notes.\" Each note has a type - the simplest is a \"text\" type, but lists, tables, and external files are also supported.  *Note:* the current Entry resource has a few limitations: - Formatting information is not yet supported. Header formatting, bolding, and other stylistic information is not presented. - Data in tables is presented as text always - numeric values will need to be parsed into floats or integers, as appropriate.  Note: Data in Results tables are not accessible through this API call. Results table data can be called through the Results API calls. 
type Entry struct {
	// The canonical url of the Entry in the API.
	ApiURL *string `json:"apiURL,omitempty"`
	ArchiveRecord NullableEntryArchiveRecord `json:"archiveRecord,omitempty"`
	// Array of users assigned to review the entry, if any. 
	AssignedReviewers []UserSummary `json:"assignedReviewers,omitempty"`
	// Array of UserSummary Resources of the authors of the entry. This defaults to the creator but can be manually changed. 
	Authors []UserSummary `json:"authors,omitempty"`
	// DateTime the entry was created at
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Creator *EntryCreator `json:"creator,omitempty"`
	CustomFields *map[string]CustomField `json:"customFields,omitempty"`
	// Array of day objects. Each day object has a date field (string) and notes field (array of notes, expand further for details on note types). 
	Days []EntryDay `json:"days,omitempty"`
	// User-friendly ID of the entry
	DisplayId *string `json:"displayId,omitempty"`
	// ID of the Entry Template this Entry was created from
	EntryTemplateId NullableString `json:"entryTemplateId,omitempty"`
	Fields *map[string]Field `json:"fields,omitempty"`
	// ID of the folder that contains the entry
	FolderId *string `json:"folderId,omitempty"`
	// ID of the entry
	Id *string `json:"id,omitempty"`
	// DateTime the entry was last modified
	ModifiedAt *string `json:"modifiedAt,omitempty"`
	// Title of the entry
	Name *string `json:"name,omitempty"`
	// Review record if set
	ReviewRecord map[string]interface{} `json:"reviewRecord,omitempty"`
	Schema NullableSchemaProperty4 `json:"schema,omitempty"`
	// URL of the entry
	WebURL *string `json:"webURL,omitempty"`
}

// NewEntry instantiates a new Entry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntry() *Entry {
	this := Entry{}
	return &this
}

// NewEntryWithDefaults instantiates a new Entry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryWithDefaults() *Entry {
	this := Entry{}
	return &this
}

// GetApiURL returns the ApiURL field value if set, zero value otherwise.
func (o *Entry) GetApiURL() string {
	if o == nil || isNil(o.ApiURL) {
		var ret string
		return ret
	}
	return *o.ApiURL
}

// GetApiURLOk returns a tuple with the ApiURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetApiURLOk() (*string, bool) {
	if o == nil || isNil(o.ApiURL) {
    return nil, false
	}
	return o.ApiURL, true
}

// HasApiURL returns a boolean if a field has been set.
func (o *Entry) HasApiURL() bool {
	if o != nil && !isNil(o.ApiURL) {
		return true
	}

	return false
}

// SetApiURL gets a reference to the given string and assigns it to the ApiURL field.
func (o *Entry) SetApiURL(v string) {
	o.ApiURL = &v
}

// GetArchiveRecord returns the ArchiveRecord field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Entry) GetArchiveRecord() EntryArchiveRecord {
	if o == nil || isNil(o.ArchiveRecord.Get()) {
		var ret EntryArchiveRecord
		return ret
	}
	return *o.ArchiveRecord.Get()
}

// GetArchiveRecordOk returns a tuple with the ArchiveRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Entry) GetArchiveRecordOk() (*EntryArchiveRecord, bool) {
	if o == nil {
    return nil, false
	}
	return o.ArchiveRecord.Get(), o.ArchiveRecord.IsSet()
}

// HasArchiveRecord returns a boolean if a field has been set.
func (o *Entry) HasArchiveRecord() bool {
	if o != nil && o.ArchiveRecord.IsSet() {
		return true
	}

	return false
}

// SetArchiveRecord gets a reference to the given NullableEntryArchiveRecord and assigns it to the ArchiveRecord field.
func (o *Entry) SetArchiveRecord(v EntryArchiveRecord) {
	o.ArchiveRecord.Set(&v)
}
// SetArchiveRecordNil sets the value for ArchiveRecord to be an explicit nil
func (o *Entry) SetArchiveRecordNil() {
	o.ArchiveRecord.Set(nil)
}

// UnsetArchiveRecord ensures that no value is present for ArchiveRecord, not even an explicit nil
func (o *Entry) UnsetArchiveRecord() {
	o.ArchiveRecord.Unset()
}

// GetAssignedReviewers returns the AssignedReviewers field value if set, zero value otherwise.
func (o *Entry) GetAssignedReviewers() []UserSummary {
	if o == nil || isNil(o.AssignedReviewers) {
		var ret []UserSummary
		return ret
	}
	return o.AssignedReviewers
}

// GetAssignedReviewersOk returns a tuple with the AssignedReviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetAssignedReviewersOk() ([]UserSummary, bool) {
	if o == nil || isNil(o.AssignedReviewers) {
    return nil, false
	}
	return o.AssignedReviewers, true
}

// HasAssignedReviewers returns a boolean if a field has been set.
func (o *Entry) HasAssignedReviewers() bool {
	if o != nil && !isNil(o.AssignedReviewers) {
		return true
	}

	return false
}

// SetAssignedReviewers gets a reference to the given []UserSummary and assigns it to the AssignedReviewers field.
func (o *Entry) SetAssignedReviewers(v []UserSummary) {
	o.AssignedReviewers = v
}

// GetAuthors returns the Authors field value if set, zero value otherwise.
func (o *Entry) GetAuthors() []UserSummary {
	if o == nil || isNil(o.Authors) {
		var ret []UserSummary
		return ret
	}
	return o.Authors
}

// GetAuthorsOk returns a tuple with the Authors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetAuthorsOk() ([]UserSummary, bool) {
	if o == nil || isNil(o.Authors) {
    return nil, false
	}
	return o.Authors, true
}

// HasAuthors returns a boolean if a field has been set.
func (o *Entry) HasAuthors() bool {
	if o != nil && !isNil(o.Authors) {
		return true
	}

	return false
}

// SetAuthors gets a reference to the given []UserSummary and assigns it to the Authors field.
func (o *Entry) SetAuthors(v []UserSummary) {
	o.Authors = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Entry) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Entry) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Entry) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *Entry) GetCreator() EntryCreator {
	if o == nil || isNil(o.Creator) {
		var ret EntryCreator
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetCreatorOk() (*EntryCreator, bool) {
	if o == nil || isNil(o.Creator) {
    return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *Entry) HasCreator() bool {
	if o != nil && !isNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given EntryCreator and assigns it to the Creator field.
func (o *Entry) SetCreator(v EntryCreator) {
	o.Creator = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Entry) GetCustomFields() map[string]CustomField {
	if o == nil || isNil(o.CustomFields) {
		var ret map[string]CustomField
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetCustomFieldsOk() (*map[string]CustomField, bool) {
	if o == nil || isNil(o.CustomFields) {
    return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Entry) HasCustomFields() bool {
	if o != nil && !isNil(o.CustomFields) {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]CustomField and assigns it to the CustomFields field.
func (o *Entry) SetCustomFields(v map[string]CustomField) {
	o.CustomFields = &v
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *Entry) GetDays() []EntryDay {
	if o == nil || isNil(o.Days) {
		var ret []EntryDay
		return ret
	}
	return o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDaysOk() ([]EntryDay, bool) {
	if o == nil || isNil(o.Days) {
    return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *Entry) HasDays() bool {
	if o != nil && !isNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given []EntryDay and assigns it to the Days field.
func (o *Entry) SetDays(v []EntryDay) {
	o.Days = v
}

// GetDisplayId returns the DisplayId field value if set, zero value otherwise.
func (o *Entry) GetDisplayId() string {
	if o == nil || isNil(o.DisplayId) {
		var ret string
		return ret
	}
	return *o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetDisplayIdOk() (*string, bool) {
	if o == nil || isNil(o.DisplayId) {
    return nil, false
	}
	return o.DisplayId, true
}

// HasDisplayId returns a boolean if a field has been set.
func (o *Entry) HasDisplayId() bool {
	if o != nil && !isNil(o.DisplayId) {
		return true
	}

	return false
}

// SetDisplayId gets a reference to the given string and assigns it to the DisplayId field.
func (o *Entry) SetDisplayId(v string) {
	o.DisplayId = &v
}

// GetEntryTemplateId returns the EntryTemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Entry) GetEntryTemplateId() string {
	if o == nil || isNil(o.EntryTemplateId.Get()) {
		var ret string
		return ret
	}
	return *o.EntryTemplateId.Get()
}

// GetEntryTemplateIdOk returns a tuple with the EntryTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Entry) GetEntryTemplateIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.EntryTemplateId.Get(), o.EntryTemplateId.IsSet()
}

// HasEntryTemplateId returns a boolean if a field has been set.
func (o *Entry) HasEntryTemplateId() bool {
	if o != nil && o.EntryTemplateId.IsSet() {
		return true
	}

	return false
}

// SetEntryTemplateId gets a reference to the given NullableString and assigns it to the EntryTemplateId field.
func (o *Entry) SetEntryTemplateId(v string) {
	o.EntryTemplateId.Set(&v)
}
// SetEntryTemplateIdNil sets the value for EntryTemplateId to be an explicit nil
func (o *Entry) SetEntryTemplateIdNil() {
	o.EntryTemplateId.Set(nil)
}

// UnsetEntryTemplateId ensures that no value is present for EntryTemplateId, not even an explicit nil
func (o *Entry) UnsetEntryTemplateId() {
	o.EntryTemplateId.Unset()
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *Entry) GetFields() map[string]Field {
	if o == nil || isNil(o.Fields) {
		var ret map[string]Field
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetFieldsOk() (*map[string]Field, bool) {
	if o == nil || isNil(o.Fields) {
    return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *Entry) HasFields() bool {
	if o != nil && !isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]Field and assigns it to the Fields field.
func (o *Entry) SetFields(v map[string]Field) {
	o.Fields = &v
}

// GetFolderId returns the FolderId field value if set, zero value otherwise.
func (o *Entry) GetFolderId() string {
	if o == nil || isNil(o.FolderId) {
		var ret string
		return ret
	}
	return *o.FolderId
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetFolderIdOk() (*string, bool) {
	if o == nil || isNil(o.FolderId) {
    return nil, false
	}
	return o.FolderId, true
}

// HasFolderId returns a boolean if a field has been set.
func (o *Entry) HasFolderId() bool {
	if o != nil && !isNil(o.FolderId) {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given string and assigns it to the FolderId field.
func (o *Entry) SetFolderId(v string) {
	o.FolderId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Entry) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Entry) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Entry) SetId(v string) {
	o.Id = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *Entry) GetModifiedAt() string {
	if o == nil || isNil(o.ModifiedAt) {
		var ret string
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetModifiedAtOk() (*string, bool) {
	if o == nil || isNil(o.ModifiedAt) {
    return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *Entry) HasModifiedAt() bool {
	if o != nil && !isNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given string and assigns it to the ModifiedAt field.
func (o *Entry) SetModifiedAt(v string) {
	o.ModifiedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Entry) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Entry) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Entry) SetName(v string) {
	o.Name = &v
}

// GetReviewRecord returns the ReviewRecord field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Entry) GetReviewRecord() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ReviewRecord
}

// GetReviewRecordOk returns a tuple with the ReviewRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Entry) GetReviewRecordOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.ReviewRecord) {
    return map[string]interface{}{}, false
	}
	return o.ReviewRecord, true
}

// HasReviewRecord returns a boolean if a field has been set.
func (o *Entry) HasReviewRecord() bool {
	if o != nil && isNil(o.ReviewRecord) {
		return true
	}

	return false
}

// SetReviewRecord gets a reference to the given map[string]interface{} and assigns it to the ReviewRecord field.
func (o *Entry) SetReviewRecord(v map[string]interface{}) {
	o.ReviewRecord = v
}

// GetSchema returns the Schema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Entry) GetSchema() SchemaProperty4 {
	if o == nil || isNil(o.Schema.Get()) {
		var ret SchemaProperty4
		return ret
	}
	return *o.Schema.Get()
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Entry) GetSchemaOk() (*SchemaProperty4, bool) {
	if o == nil {
    return nil, false
	}
	return o.Schema.Get(), o.Schema.IsSet()
}

// HasSchema returns a boolean if a field has been set.
func (o *Entry) HasSchema() bool {
	if o != nil && o.Schema.IsSet() {
		return true
	}

	return false
}

// SetSchema gets a reference to the given NullableSchemaProperty4 and assigns it to the Schema field.
func (o *Entry) SetSchema(v SchemaProperty4) {
	o.Schema.Set(&v)
}
// SetSchemaNil sets the value for Schema to be an explicit nil
func (o *Entry) SetSchemaNil() {
	o.Schema.Set(nil)
}

// UnsetSchema ensures that no value is present for Schema, not even an explicit nil
func (o *Entry) UnsetSchema() {
	o.Schema.Unset()
}

// GetWebURL returns the WebURL field value if set, zero value otherwise.
func (o *Entry) GetWebURL() string {
	if o == nil || isNil(o.WebURL) {
		var ret string
		return ret
	}
	return *o.WebURL
}

// GetWebURLOk returns a tuple with the WebURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Entry) GetWebURLOk() (*string, bool) {
	if o == nil || isNil(o.WebURL) {
    return nil, false
	}
	return o.WebURL, true
}

// HasWebURL returns a boolean if a field has been set.
func (o *Entry) HasWebURL() bool {
	if o != nil && !isNil(o.WebURL) {
		return true
	}

	return false
}

// SetWebURL gets a reference to the given string and assigns it to the WebURL field.
func (o *Entry) SetWebURL(v string) {
	o.WebURL = &v
}

func (o Entry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ApiURL) {
		toSerialize["apiURL"] = o.ApiURL
	}
	if o.ArchiveRecord.IsSet() {
		toSerialize["archiveRecord"] = o.ArchiveRecord.Get()
	}
	if !isNil(o.AssignedReviewers) {
		toSerialize["assignedReviewers"] = o.AssignedReviewers
	}
	if !isNil(o.Authors) {
		toSerialize["authors"] = o.Authors
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !isNil(o.CustomFields) {
		toSerialize["customFields"] = o.CustomFields
	}
	if !isNil(o.Days) {
		toSerialize["days"] = o.Days
	}
	if !isNil(o.DisplayId) {
		toSerialize["displayId"] = o.DisplayId
	}
	if o.EntryTemplateId.IsSet() {
		toSerialize["entryTemplateId"] = o.EntryTemplateId.Get()
	}
	if !isNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !isNil(o.FolderId) {
		toSerialize["folderId"] = o.FolderId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.ReviewRecord != nil {
		toSerialize["reviewRecord"] = o.ReviewRecord
	}
	if o.Schema.IsSet() {
		toSerialize["schema"] = o.Schema.Get()
	}
	if !isNil(o.WebURL) {
		toSerialize["webURL"] = o.WebURL
	}
	return json.Marshal(toSerialize)
}

type NullableEntry struct {
	value *Entry
	isSet bool
}

func (v NullableEntry) Get() *Entry {
	return v.value
}

func (v *NullableEntry) Set(val *Entry) {
	v.value = val
	v.isSet = true
}

func (v NullableEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntry(val *Entry) *NullableEntry {
	return &NullableEntry{value: val, isSet: true}
}

func (v NullableEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


