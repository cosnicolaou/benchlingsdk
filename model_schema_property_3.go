/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// SchemaProperty3 struct for SchemaProperty3
type SchemaProperty3 struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewSchemaProperty3 instantiates a new SchemaProperty3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaProperty3() *SchemaProperty3 {
	this := SchemaProperty3{}
	return &this
}

// NewSchemaProperty3WithDefaults instantiates a new SchemaProperty3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaProperty3WithDefaults() *SchemaProperty3 {
	this := SchemaProperty3{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SchemaProperty3) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaProperty3) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SchemaProperty3) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SchemaProperty3) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchemaProperty3) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaProperty3) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchemaProperty3) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchemaProperty3) SetName(v string) {
	o.Name = &v
}

func (o SchemaProperty3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaProperty3 struct {
	value *SchemaProperty3
	isSet bool
}

func (v NullableSchemaProperty3) Get() *SchemaProperty3 {
	return v.value
}

func (v *NullableSchemaProperty3) Set(val *SchemaProperty3) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaProperty3) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaProperty3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaProperty3(val *SchemaProperty3) *NullableSchemaProperty3 {
	return &NullableSchemaProperty3{value: val, isSet: true}
}

func (v NullableSchemaProperty3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaProperty3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


