/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BarcodesList struct for BarcodesList
type BarcodesList struct {
	// Array of barcodes to validate.
	Barcodes []string `json:"barcodes"`
}

// NewBarcodesList instantiates a new BarcodesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBarcodesList(barcodes []string) *BarcodesList {
	this := BarcodesList{}
	this.Barcodes = barcodes
	return &this
}

// NewBarcodesListWithDefaults instantiates a new BarcodesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBarcodesListWithDefaults() *BarcodesList {
	this := BarcodesList{}
	return &this
}

// GetBarcodes returns the Barcodes field value
func (o *BarcodesList) GetBarcodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Barcodes
}

// GetBarcodesOk returns a tuple with the Barcodes field value
// and a boolean to check if the value has been set.
func (o *BarcodesList) GetBarcodesOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Barcodes, true
}

// SetBarcodes sets field value
func (o *BarcodesList) SetBarcodes(v []string) {
	o.Barcodes = v
}

func (o BarcodesList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["barcodes"] = o.Barcodes
	}
	return json.Marshal(toSerialize)
}

type NullableBarcodesList struct {
	value *BarcodesList
	isSet bool
}

func (v NullableBarcodesList) Get() *BarcodesList {
	return v.value
}

func (v *NullableBarcodesList) Set(val *BarcodesList) {
	v.value = val
	v.isSet = true
}

func (v NullableBarcodesList) IsSet() bool {
	return v.isSet
}

func (v *NullableBarcodesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBarcodesList(val *BarcodesList) *NullableBarcodesList {
	return &NullableBarcodesList{value: val, isSet: true}
}

func (v NullableBarcodesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBarcodesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


