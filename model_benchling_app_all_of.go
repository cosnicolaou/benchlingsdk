/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"time"
)

// BenchlingAppAllOf struct for BenchlingAppAllOf
type BenchlingAppAllOf struct {
	ApiUrl *string `json:"apiUrl,omitempty"`
	ArchiveRecord NullableArchiveRecord `json:"archiveRecord,omitempty"`
	// DateTime at which the the app was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Creator *UserSummary `json:"creator,omitempty"`
	Id *string `json:"id,omitempty"`
	// DateTime at which the the app was last modified
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`
	WebUrl *string `json:"webUrl,omitempty"`
}

// NewBenchlingAppAllOf instantiates a new BenchlingAppAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBenchlingAppAllOf() *BenchlingAppAllOf {
	this := BenchlingAppAllOf{}
	return &this
}

// NewBenchlingAppAllOfWithDefaults instantiates a new BenchlingAppAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBenchlingAppAllOfWithDefaults() *BenchlingAppAllOf {
	this := BenchlingAppAllOf{}
	return &this
}

// GetApiUrl returns the ApiUrl field value if set, zero value otherwise.
func (o *BenchlingAppAllOf) GetApiUrl() string {
	if o == nil || isNil(o.ApiUrl) {
		var ret string
		return ret
	}
	return *o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchlingAppAllOf) GetApiUrlOk() (*string, bool) {
	if o == nil || isNil(o.ApiUrl) {
    return nil, false
	}
	return o.ApiUrl, true
}

// HasApiUrl returns a boolean if a field has been set.
func (o *BenchlingAppAllOf) HasApiUrl() bool {
	if o != nil && !isNil(o.ApiUrl) {
		return true
	}

	return false
}

// SetApiUrl gets a reference to the given string and assigns it to the ApiUrl field.
func (o *BenchlingAppAllOf) SetApiUrl(v string) {
	o.ApiUrl = &v
}

// GetArchiveRecord returns the ArchiveRecord field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BenchlingAppAllOf) GetArchiveRecord() ArchiveRecord {
	if o == nil || isNil(o.ArchiveRecord.Get()) {
		var ret ArchiveRecord
		return ret
	}
	return *o.ArchiveRecord.Get()
}

// GetArchiveRecordOk returns a tuple with the ArchiveRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BenchlingAppAllOf) GetArchiveRecordOk() (*ArchiveRecord, bool) {
	if o == nil {
    return nil, false
	}
	return o.ArchiveRecord.Get(), o.ArchiveRecord.IsSet()
}

// HasArchiveRecord returns a boolean if a field has been set.
func (o *BenchlingAppAllOf) HasArchiveRecord() bool {
	if o != nil && o.ArchiveRecord.IsSet() {
		return true
	}

	return false
}

// SetArchiveRecord gets a reference to the given NullableArchiveRecord and assigns it to the ArchiveRecord field.
func (o *BenchlingAppAllOf) SetArchiveRecord(v ArchiveRecord) {
	o.ArchiveRecord.Set(&v)
}
// SetArchiveRecordNil sets the value for ArchiveRecord to be an explicit nil
func (o *BenchlingAppAllOf) SetArchiveRecordNil() {
	o.ArchiveRecord.Set(nil)
}

// UnsetArchiveRecord ensures that no value is present for ArchiveRecord, not even an explicit nil
func (o *BenchlingAppAllOf) UnsetArchiveRecord() {
	o.ArchiveRecord.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *BenchlingAppAllOf) GetCreatedAt() time.Time {
	if o == nil || isNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchlingAppAllOf) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.CreatedAt) {
    return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *BenchlingAppAllOf) HasCreatedAt() bool {
	if o != nil && !isNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *BenchlingAppAllOf) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *BenchlingAppAllOf) GetCreator() UserSummary {
	if o == nil || isNil(o.Creator) {
		var ret UserSummary
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchlingAppAllOf) GetCreatorOk() (*UserSummary, bool) {
	if o == nil || isNil(o.Creator) {
    return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *BenchlingAppAllOf) HasCreator() bool {
	if o != nil && !isNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given UserSummary and assigns it to the Creator field.
func (o *BenchlingAppAllOf) SetCreator(v UserSummary) {
	o.Creator = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *BenchlingAppAllOf) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchlingAppAllOf) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *BenchlingAppAllOf) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *BenchlingAppAllOf) SetId(v string) {
	o.Id = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *BenchlingAppAllOf) GetModifiedAt() time.Time {
	if o == nil || isNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchlingAppAllOf) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.ModifiedAt) {
    return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *BenchlingAppAllOf) HasModifiedAt() bool {
	if o != nil && !isNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *BenchlingAppAllOf) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

// GetWebUrl returns the WebUrl field value if set, zero value otherwise.
func (o *BenchlingAppAllOf) GetWebUrl() string {
	if o == nil || isNil(o.WebUrl) {
		var ret string
		return ret
	}
	return *o.WebUrl
}

// GetWebUrlOk returns a tuple with the WebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BenchlingAppAllOf) GetWebUrlOk() (*string, bool) {
	if o == nil || isNil(o.WebUrl) {
    return nil, false
	}
	return o.WebUrl, true
}

// HasWebUrl returns a boolean if a field has been set.
func (o *BenchlingAppAllOf) HasWebUrl() bool {
	if o != nil && !isNil(o.WebUrl) {
		return true
	}

	return false
}

// SetWebUrl gets a reference to the given string and assigns it to the WebUrl field.
func (o *BenchlingAppAllOf) SetWebUrl(v string) {
	o.WebUrl = &v
}

func (o BenchlingAppAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ApiUrl) {
		toSerialize["apiUrl"] = o.ApiUrl
	}
	if o.ArchiveRecord.IsSet() {
		toSerialize["archiveRecord"] = o.ArchiveRecord.Get()
	}
	if !isNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !isNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	if !isNil(o.WebUrl) {
		toSerialize["webUrl"] = o.WebUrl
	}
	return json.Marshal(toSerialize)
}

type NullableBenchlingAppAllOf struct {
	value *BenchlingAppAllOf
	isSet bool
}

func (v NullableBenchlingAppAllOf) Get() *BenchlingAppAllOf {
	return v.value
}

func (v *NullableBenchlingAppAllOf) Set(val *BenchlingAppAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBenchlingAppAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBenchlingAppAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBenchlingAppAllOf(val *BenchlingAppAllOf) *NullableBenchlingAppAllOf {
	return &NullableBenchlingAppAllOf{value: val, isSet: true}
}

func (v NullableBenchlingAppAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBenchlingAppAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


