/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// SchemaFieldDefinitionsInner - struct for SchemaFieldDefinitionsInner
type SchemaFieldDefinitionsInner struct {
	DropdownFieldDefinition *DropdownFieldDefinition
	FloatFieldDefinition *FloatFieldDefinition
	IntegerFieldDefinition *IntegerFieldDefinition
	SchemaLinkFieldDefinition *SchemaLinkFieldDefinition
	SimpleFieldDefinition *SimpleFieldDefinition
}

// DropdownFieldDefinitionAsSchemaFieldDefinitionsInner is a convenience function that returns DropdownFieldDefinition wrapped in SchemaFieldDefinitionsInner
func DropdownFieldDefinitionAsSchemaFieldDefinitionsInner(v *DropdownFieldDefinition) SchemaFieldDefinitionsInner {
	return SchemaFieldDefinitionsInner{
		DropdownFieldDefinition: v,
	}
}

// FloatFieldDefinitionAsSchemaFieldDefinitionsInner is a convenience function that returns FloatFieldDefinition wrapped in SchemaFieldDefinitionsInner
func FloatFieldDefinitionAsSchemaFieldDefinitionsInner(v *FloatFieldDefinition) SchemaFieldDefinitionsInner {
	return SchemaFieldDefinitionsInner{
		FloatFieldDefinition: v,
	}
}

// IntegerFieldDefinitionAsSchemaFieldDefinitionsInner is a convenience function that returns IntegerFieldDefinition wrapped in SchemaFieldDefinitionsInner
func IntegerFieldDefinitionAsSchemaFieldDefinitionsInner(v *IntegerFieldDefinition) SchemaFieldDefinitionsInner {
	return SchemaFieldDefinitionsInner{
		IntegerFieldDefinition: v,
	}
}

// SchemaLinkFieldDefinitionAsSchemaFieldDefinitionsInner is a convenience function that returns SchemaLinkFieldDefinition wrapped in SchemaFieldDefinitionsInner
func SchemaLinkFieldDefinitionAsSchemaFieldDefinitionsInner(v *SchemaLinkFieldDefinition) SchemaFieldDefinitionsInner {
	return SchemaFieldDefinitionsInner{
		SchemaLinkFieldDefinition: v,
	}
}

// SimpleFieldDefinitionAsSchemaFieldDefinitionsInner is a convenience function that returns SimpleFieldDefinition wrapped in SchemaFieldDefinitionsInner
func SimpleFieldDefinitionAsSchemaFieldDefinitionsInner(v *SimpleFieldDefinition) SchemaFieldDefinitionsInner {
	return SchemaFieldDefinitionsInner{
		SimpleFieldDefinition: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SchemaFieldDefinitionsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DropdownFieldDefinition
	err = newStrictDecoder(data).Decode(&dst.DropdownFieldDefinition)
	if err == nil {
		jsonDropdownFieldDefinition, _ := json.Marshal(dst.DropdownFieldDefinition)
		if string(jsonDropdownFieldDefinition) == "{}" { // empty struct
			dst.DropdownFieldDefinition = nil
		} else {
			match++
		}
	} else {
		dst.DropdownFieldDefinition = nil
	}

	// try to unmarshal data into FloatFieldDefinition
	err = newStrictDecoder(data).Decode(&dst.FloatFieldDefinition)
	if err == nil {
		jsonFloatFieldDefinition, _ := json.Marshal(dst.FloatFieldDefinition)
		if string(jsonFloatFieldDefinition) == "{}" { // empty struct
			dst.FloatFieldDefinition = nil
		} else {
			match++
		}
	} else {
		dst.FloatFieldDefinition = nil
	}

	// try to unmarshal data into IntegerFieldDefinition
	err = newStrictDecoder(data).Decode(&dst.IntegerFieldDefinition)
	if err == nil {
		jsonIntegerFieldDefinition, _ := json.Marshal(dst.IntegerFieldDefinition)
		if string(jsonIntegerFieldDefinition) == "{}" { // empty struct
			dst.IntegerFieldDefinition = nil
		} else {
			match++
		}
	} else {
		dst.IntegerFieldDefinition = nil
	}

	// try to unmarshal data into SchemaLinkFieldDefinition
	err = newStrictDecoder(data).Decode(&dst.SchemaLinkFieldDefinition)
	if err == nil {
		jsonSchemaLinkFieldDefinition, _ := json.Marshal(dst.SchemaLinkFieldDefinition)
		if string(jsonSchemaLinkFieldDefinition) == "{}" { // empty struct
			dst.SchemaLinkFieldDefinition = nil
		} else {
			match++
		}
	} else {
		dst.SchemaLinkFieldDefinition = nil
	}

	// try to unmarshal data into SimpleFieldDefinition
	err = newStrictDecoder(data).Decode(&dst.SimpleFieldDefinition)
	if err == nil {
		jsonSimpleFieldDefinition, _ := json.Marshal(dst.SimpleFieldDefinition)
		if string(jsonSimpleFieldDefinition) == "{}" { // empty struct
			dst.SimpleFieldDefinition = nil
		} else {
			match++
		}
	} else {
		dst.SimpleFieldDefinition = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DropdownFieldDefinition = nil
		dst.FloatFieldDefinition = nil
		dst.IntegerFieldDefinition = nil
		dst.SchemaLinkFieldDefinition = nil
		dst.SimpleFieldDefinition = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SchemaFieldDefinitionsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SchemaFieldDefinitionsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SchemaFieldDefinitionsInner) MarshalJSON() ([]byte, error) {
	if src.DropdownFieldDefinition != nil {
		return json.Marshal(&src.DropdownFieldDefinition)
	}

	if src.FloatFieldDefinition != nil {
		return json.Marshal(&src.FloatFieldDefinition)
	}

	if src.IntegerFieldDefinition != nil {
		return json.Marshal(&src.IntegerFieldDefinition)
	}

	if src.SchemaLinkFieldDefinition != nil {
		return json.Marshal(&src.SchemaLinkFieldDefinition)
	}

	if src.SimpleFieldDefinition != nil {
		return json.Marshal(&src.SimpleFieldDefinition)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SchemaFieldDefinitionsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DropdownFieldDefinition != nil {
		return obj.DropdownFieldDefinition
	}

	if obj.FloatFieldDefinition != nil {
		return obj.FloatFieldDefinition
	}

	if obj.IntegerFieldDefinition != nil {
		return obj.IntegerFieldDefinition
	}

	if obj.SchemaLinkFieldDefinition != nil {
		return obj.SchemaLinkFieldDefinition
	}

	if obj.SimpleFieldDefinition != nil {
		return obj.SimpleFieldDefinition
	}

	// all schemas are nil
	return nil
}

type NullableSchemaFieldDefinitionsInner struct {
	value *SchemaFieldDefinitionsInner
	isSet bool
}

func (v NullableSchemaFieldDefinitionsInner) Get() *SchemaFieldDefinitionsInner {
	return v.value
}

func (v *NullableSchemaFieldDefinitionsInner) Set(val *SchemaFieldDefinitionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaFieldDefinitionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaFieldDefinitionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaFieldDefinitionsInner(val *SchemaFieldDefinitionsInner) *NullableSchemaFieldDefinitionsInner {
	return &NullableSchemaFieldDefinitionsInner{value: val, isSet: true}
}

func (v NullableSchemaFieldDefinitionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaFieldDefinitionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


