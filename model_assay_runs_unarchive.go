/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// AssayRunsUnarchive The request body for unarchiving Assay Runs. 
type AssayRunsUnarchive struct {
	AssayRunIds []string `json:"assayRunIds"`
}

// NewAssayRunsUnarchive instantiates a new AssayRunsUnarchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssayRunsUnarchive(assayRunIds []string) *AssayRunsUnarchive {
	this := AssayRunsUnarchive{}
	this.AssayRunIds = assayRunIds
	return &this
}

// NewAssayRunsUnarchiveWithDefaults instantiates a new AssayRunsUnarchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssayRunsUnarchiveWithDefaults() *AssayRunsUnarchive {
	this := AssayRunsUnarchive{}
	return &this
}

// GetAssayRunIds returns the AssayRunIds field value
func (o *AssayRunsUnarchive) GetAssayRunIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AssayRunIds
}

// GetAssayRunIdsOk returns a tuple with the AssayRunIds field value
// and a boolean to check if the value has been set.
func (o *AssayRunsUnarchive) GetAssayRunIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.AssayRunIds, true
}

// SetAssayRunIds sets field value
func (o *AssayRunsUnarchive) SetAssayRunIds(v []string) {
	o.AssayRunIds = v
}

func (o AssayRunsUnarchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assayRunIds"] = o.AssayRunIds
	}
	return json.Marshal(toSerialize)
}

type NullableAssayRunsUnarchive struct {
	value *AssayRunsUnarchive
	isSet bool
}

func (v NullableAssayRunsUnarchive) Get() *AssayRunsUnarchive {
	return v.value
}

func (v *NullableAssayRunsUnarchive) Set(val *AssayRunsUnarchive) {
	v.value = val
	v.isSet = true
}

func (v NullableAssayRunsUnarchive) IsSet() bool {
	return v.isSet
}

func (v *NullableAssayRunsUnarchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssayRunsUnarchive(val *AssayRunsUnarchive) *NullableAssayRunsUnarchive {
	return &NullableAssayRunsUnarchive{value: val, isSet: true}
}

func (v NullableAssayRunsUnarchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssayRunsUnarchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


