/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// RequestTeamAssignee struct for RequestTeamAssignee
type RequestTeamAssignee struct {
	Team *TeamSummary `json:"team,omitempty"`
}

// NewRequestTeamAssignee instantiates a new RequestTeamAssignee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestTeamAssignee() *RequestTeamAssignee {
	this := RequestTeamAssignee{}
	return &this
}

// NewRequestTeamAssigneeWithDefaults instantiates a new RequestTeamAssignee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestTeamAssigneeWithDefaults() *RequestTeamAssignee {
	this := RequestTeamAssignee{}
	return &this
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *RequestTeamAssignee) GetTeam() TeamSummary {
	if o == nil || isNil(o.Team) {
		var ret TeamSummary
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestTeamAssignee) GetTeamOk() (*TeamSummary, bool) {
	if o == nil || isNil(o.Team) {
    return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *RequestTeamAssignee) HasTeam() bool {
	if o != nil && !isNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given TeamSummary and assigns it to the Team field.
func (o *RequestTeamAssignee) SetTeam(v TeamSummary) {
	o.Team = &v
}

func (o RequestTeamAssignee) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	return json.Marshal(toSerialize)
}

type NullableRequestTeamAssignee struct {
	value *RequestTeamAssignee
	isSet bool
}

func (v NullableRequestTeamAssignee) Get() *RequestTeamAssignee {
	return v.value
}

func (v *NullableRequestTeamAssignee) Set(val *RequestTeamAssignee) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestTeamAssignee) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestTeamAssignee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestTeamAssignee(val *RequestTeamAssignee) *NullableRequestTeamAssignee {
	return &NullableRequestTeamAssignee{value: val, isSet: true}
}

func (v NullableRequestTeamAssignee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestTeamAssignee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


