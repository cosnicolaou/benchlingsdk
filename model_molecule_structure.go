/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// MoleculeStructure struct for MoleculeStructure
type MoleculeStructure struct {
	StructureFormat *string `json:"structureFormat,omitempty"`
	// Chemical structure in SMILES or molfile format.
	Value *string `json:"value,omitempty"`
}

// NewMoleculeStructure instantiates a new MoleculeStructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMoleculeStructure() *MoleculeStructure {
	this := MoleculeStructure{}
	return &this
}

// NewMoleculeStructureWithDefaults instantiates a new MoleculeStructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMoleculeStructureWithDefaults() *MoleculeStructure {
	this := MoleculeStructure{}
	return &this
}

// GetStructureFormat returns the StructureFormat field value if set, zero value otherwise.
func (o *MoleculeStructure) GetStructureFormat() string {
	if o == nil || isNil(o.StructureFormat) {
		var ret string
		return ret
	}
	return *o.StructureFormat
}

// GetStructureFormatOk returns a tuple with the StructureFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeStructure) GetStructureFormatOk() (*string, bool) {
	if o == nil || isNil(o.StructureFormat) {
    return nil, false
	}
	return o.StructureFormat, true
}

// HasStructureFormat returns a boolean if a field has been set.
func (o *MoleculeStructure) HasStructureFormat() bool {
	if o != nil && !isNil(o.StructureFormat) {
		return true
	}

	return false
}

// SetStructureFormat gets a reference to the given string and assigns it to the StructureFormat field.
func (o *MoleculeStructure) SetStructureFormat(v string) {
	o.StructureFormat = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *MoleculeStructure) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MoleculeStructure) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
    return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MoleculeStructure) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *MoleculeStructure) SetValue(v string) {
	o.Value = &v
}

func (o MoleculeStructure) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StructureFormat) {
		toSerialize["structureFormat"] = o.StructureFormat
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableMoleculeStructure struct {
	value *MoleculeStructure
	isSet bool
}

func (v NullableMoleculeStructure) Get() *MoleculeStructure {
	return v.value
}

func (v *NullableMoleculeStructure) Set(val *MoleculeStructure) {
	v.value = val
	v.isSet = true
}

func (v NullableMoleculeStructure) IsSet() bool {
	return v.isSet
}

func (v *NullableMoleculeStructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMoleculeStructure(val *MoleculeStructure) *NullableMoleculeStructure {
	return &NullableMoleculeStructure{value: val, isSet: true}
}

func (v NullableMoleculeStructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMoleculeStructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


