/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// RnaSequencesBulkUpdateRequest struct for RnaSequencesBulkUpdateRequest
type RnaSequencesBulkUpdateRequest struct {
	RnaSequences []RnaSequenceBulkUpdate `json:"rnaSequences,omitempty"`
}

// NewRnaSequencesBulkUpdateRequest instantiates a new RnaSequencesBulkUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRnaSequencesBulkUpdateRequest() *RnaSequencesBulkUpdateRequest {
	this := RnaSequencesBulkUpdateRequest{}
	return &this
}

// NewRnaSequencesBulkUpdateRequestWithDefaults instantiates a new RnaSequencesBulkUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRnaSequencesBulkUpdateRequestWithDefaults() *RnaSequencesBulkUpdateRequest {
	this := RnaSequencesBulkUpdateRequest{}
	return &this
}

// GetRnaSequences returns the RnaSequences field value if set, zero value otherwise.
func (o *RnaSequencesBulkUpdateRequest) GetRnaSequences() []RnaSequenceBulkUpdate {
	if o == nil || isNil(o.RnaSequences) {
		var ret []RnaSequenceBulkUpdate
		return ret
	}
	return o.RnaSequences
}

// GetRnaSequencesOk returns a tuple with the RnaSequences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RnaSequencesBulkUpdateRequest) GetRnaSequencesOk() ([]RnaSequenceBulkUpdate, bool) {
	if o == nil || isNil(o.RnaSequences) {
    return nil, false
	}
	return o.RnaSequences, true
}

// HasRnaSequences returns a boolean if a field has been set.
func (o *RnaSequencesBulkUpdateRequest) HasRnaSequences() bool {
	if o != nil && !isNil(o.RnaSequences) {
		return true
	}

	return false
}

// SetRnaSequences gets a reference to the given []RnaSequenceBulkUpdate and assigns it to the RnaSequences field.
func (o *RnaSequencesBulkUpdateRequest) SetRnaSequences(v []RnaSequenceBulkUpdate) {
	o.RnaSequences = v
}

func (o RnaSequencesBulkUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RnaSequences) {
		toSerialize["rnaSequences"] = o.RnaSequences
	}
	return json.Marshal(toSerialize)
}

type NullableRnaSequencesBulkUpdateRequest struct {
	value *RnaSequencesBulkUpdateRequest
	isSet bool
}

func (v NullableRnaSequencesBulkUpdateRequest) Get() *RnaSequencesBulkUpdateRequest {
	return v.value
}

func (v *NullableRnaSequencesBulkUpdateRequest) Set(val *RnaSequencesBulkUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRnaSequencesBulkUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRnaSequencesBulkUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRnaSequencesBulkUpdateRequest(val *RnaSequencesBulkUpdateRequest) *NullableRnaSequencesBulkUpdateRequest {
	return &NullableRnaSequencesBulkUpdateRequest{value: val, isSet: true}
}

func (v NullableRnaSequencesBulkUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRnaSequencesBulkUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


