/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ResultsTableNotePartAllOf struct for ResultsTableNotePartAllOf
type ResultsTableNotePartAllOf struct {
	AssayResultSchemaId *string `json:"assayResultSchemaId,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewResultsTableNotePartAllOf instantiates a new ResultsTableNotePartAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultsTableNotePartAllOf() *ResultsTableNotePartAllOf {
	this := ResultsTableNotePartAllOf{}
	return &this
}

// NewResultsTableNotePartAllOfWithDefaults instantiates a new ResultsTableNotePartAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultsTableNotePartAllOfWithDefaults() *ResultsTableNotePartAllOf {
	this := ResultsTableNotePartAllOf{}
	return &this
}

// GetAssayResultSchemaId returns the AssayResultSchemaId field value if set, zero value otherwise.
func (o *ResultsTableNotePartAllOf) GetAssayResultSchemaId() string {
	if o == nil || isNil(o.AssayResultSchemaId) {
		var ret string
		return ret
	}
	return *o.AssayResultSchemaId
}

// GetAssayResultSchemaIdOk returns a tuple with the AssayResultSchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsTableNotePartAllOf) GetAssayResultSchemaIdOk() (*string, bool) {
	if o == nil || isNil(o.AssayResultSchemaId) {
    return nil, false
	}
	return o.AssayResultSchemaId, true
}

// HasAssayResultSchemaId returns a boolean if a field has been set.
func (o *ResultsTableNotePartAllOf) HasAssayResultSchemaId() bool {
	if o != nil && !isNil(o.AssayResultSchemaId) {
		return true
	}

	return false
}

// SetAssayResultSchemaId gets a reference to the given string and assigns it to the AssayResultSchemaId field.
func (o *ResultsTableNotePartAllOf) SetAssayResultSchemaId(v string) {
	o.AssayResultSchemaId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResultsTableNotePartAllOf) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsTableNotePartAllOf) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResultsTableNotePartAllOf) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResultsTableNotePartAllOf) SetType(v string) {
	o.Type = &v
}

func (o ResultsTableNotePartAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AssayResultSchemaId) {
		toSerialize["assayResultSchemaId"] = o.AssayResultSchemaId
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableResultsTableNotePartAllOf struct {
	value *ResultsTableNotePartAllOf
	isSet bool
}

func (v NullableResultsTableNotePartAllOf) Get() *ResultsTableNotePartAllOf {
	return v.value
}

func (v *NullableResultsTableNotePartAllOf) Set(val *ResultsTableNotePartAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableResultsTableNotePartAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableResultsTableNotePartAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultsTableNotePartAllOf(val *ResultsTableNotePartAllOf) *NullableResultsTableNotePartAllOf {
	return &NullableResultsTableNotePartAllOf{value: val, isSet: true}
}

func (v NullableResultsTableNotePartAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultsTableNotePartAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


