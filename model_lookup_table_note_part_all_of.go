/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// LookupTableNotePartAllOf struct for LookupTableNotePartAllOf
type LookupTableNotePartAllOf struct {
	Type *string `json:"type,omitempty"`
}

// NewLookupTableNotePartAllOf instantiates a new LookupTableNotePartAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLookupTableNotePartAllOf() *LookupTableNotePartAllOf {
	this := LookupTableNotePartAllOf{}
	return &this
}

// NewLookupTableNotePartAllOfWithDefaults instantiates a new LookupTableNotePartAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLookupTableNotePartAllOfWithDefaults() *LookupTableNotePartAllOf {
	this := LookupTableNotePartAllOf{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LookupTableNotePartAllOf) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LookupTableNotePartAllOf) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LookupTableNotePartAllOf) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LookupTableNotePartAllOf) SetType(v string) {
	o.Type = &v
}

func (o LookupTableNotePartAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableLookupTableNotePartAllOf struct {
	value *LookupTableNotePartAllOf
	isSet bool
}

func (v NullableLookupTableNotePartAllOf) Get() *LookupTableNotePartAllOf {
	return v.value
}

func (v *NullableLookupTableNotePartAllOf) Set(val *LookupTableNotePartAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLookupTableNotePartAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLookupTableNotePartAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLookupTableNotePartAllOf(val *LookupTableNotePartAllOf) *NullableLookupTableNotePartAllOf {
	return &NullableLookupTableNotePartAllOf{value: val, isSet: true}
}

func (v NullableLookupTableNotePartAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLookupTableNotePartAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


