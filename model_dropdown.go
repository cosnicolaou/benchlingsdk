/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// Dropdown Dropdowns are registry-wide enums. Use dropdowns to standardize on spelling and naming conventions, especially for important metadata like resistance markers.
type Dropdown struct {
	// ID of the dropdown
	Id *string `json:"id,omitempty"`
	// Name of the dropdown
	Name *string `json:"name,omitempty"`
	ArchiveRecord NullableArchiveRecord `json:"archiveRecord,omitempty"`
	// Array of dropdown options
	Options []DropdownOption `json:"options,omitempty"`
}

// NewDropdown instantiates a new Dropdown object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDropdown() *Dropdown {
	this := Dropdown{}
	return &this
}

// NewDropdownWithDefaults instantiates a new Dropdown object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDropdownWithDefaults() *Dropdown {
	this := Dropdown{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Dropdown) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dropdown) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Dropdown) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Dropdown) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Dropdown) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dropdown) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Dropdown) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Dropdown) SetName(v string) {
	o.Name = &v
}

// GetArchiveRecord returns the ArchiveRecord field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dropdown) GetArchiveRecord() ArchiveRecord {
	if o == nil || isNil(o.ArchiveRecord.Get()) {
		var ret ArchiveRecord
		return ret
	}
	return *o.ArchiveRecord.Get()
}

// GetArchiveRecordOk returns a tuple with the ArchiveRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dropdown) GetArchiveRecordOk() (*ArchiveRecord, bool) {
	if o == nil {
    return nil, false
	}
	return o.ArchiveRecord.Get(), o.ArchiveRecord.IsSet()
}

// HasArchiveRecord returns a boolean if a field has been set.
func (o *Dropdown) HasArchiveRecord() bool {
	if o != nil && o.ArchiveRecord.IsSet() {
		return true
	}

	return false
}

// SetArchiveRecord gets a reference to the given NullableArchiveRecord and assigns it to the ArchiveRecord field.
func (o *Dropdown) SetArchiveRecord(v ArchiveRecord) {
	o.ArchiveRecord.Set(&v)
}
// SetArchiveRecordNil sets the value for ArchiveRecord to be an explicit nil
func (o *Dropdown) SetArchiveRecordNil() {
	o.ArchiveRecord.Set(nil)
}

// UnsetArchiveRecord ensures that no value is present for ArchiveRecord, not even an explicit nil
func (o *Dropdown) UnsetArchiveRecord() {
	o.ArchiveRecord.Unset()
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Dropdown) GetOptions() []DropdownOption {
	if o == nil || isNil(o.Options) {
		var ret []DropdownOption
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dropdown) GetOptionsOk() ([]DropdownOption, bool) {
	if o == nil || isNil(o.Options) {
    return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Dropdown) HasOptions() bool {
	if o != nil && !isNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []DropdownOption and assigns it to the Options field.
func (o *Dropdown) SetOptions(v []DropdownOption) {
	o.Options = v
}

func (o Dropdown) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.ArchiveRecord.IsSet() {
		toSerialize["archiveRecord"] = o.ArchiveRecord.Get()
	}
	if !isNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	return json.Marshal(toSerialize)
}

type NullableDropdown struct {
	value *Dropdown
	isSet bool
}

func (v NullableDropdown) Get() *Dropdown {
	return v.value
}

func (v *NullableDropdown) Set(val *Dropdown) {
	v.value = val
	v.isSet = true
}

func (v NullableDropdown) IsSet() bool {
	return v.isSet
}

func (v *NullableDropdown) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDropdown(val *Dropdown) *NullableDropdown {
	return &NullableDropdown{value: val, isSet: true}
}

func (v NullableDropdown) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDropdown) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


