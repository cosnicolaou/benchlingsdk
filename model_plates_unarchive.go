/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// PlatesUnarchive struct for PlatesUnarchive
type PlatesUnarchive struct {
	// Array of plate IDs
	PlateIds []string `json:"plateIds"`
}

// NewPlatesUnarchive instantiates a new PlatesUnarchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlatesUnarchive(plateIds []string) *PlatesUnarchive {
	this := PlatesUnarchive{}
	this.PlateIds = plateIds
	return &this
}

// NewPlatesUnarchiveWithDefaults instantiates a new PlatesUnarchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlatesUnarchiveWithDefaults() *PlatesUnarchive {
	this := PlatesUnarchive{}
	return &this
}

// GetPlateIds returns the PlateIds field value
func (o *PlatesUnarchive) GetPlateIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PlateIds
}

// GetPlateIdsOk returns a tuple with the PlateIds field value
// and a boolean to check if the value has been set.
func (o *PlatesUnarchive) GetPlateIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.PlateIds, true
}

// SetPlateIds sets field value
func (o *PlatesUnarchive) SetPlateIds(v []string) {
	o.PlateIds = v
}

func (o PlatesUnarchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["plateIds"] = o.PlateIds
	}
	return json.Marshal(toSerialize)
}

type NullablePlatesUnarchive struct {
	value *PlatesUnarchive
	isSet bool
}

func (v NullablePlatesUnarchive) Get() *PlatesUnarchive {
	return v.value
}

func (v *NullablePlatesUnarchive) Set(val *PlatesUnarchive) {
	v.value = val
	v.isSet = true
}

func (v NullablePlatesUnarchive) IsSet() bool {
	return v.isSet
}

func (v *NullablePlatesUnarchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlatesUnarchive(val *PlatesUnarchive) *NullablePlatesUnarchive {
	return &NullablePlatesUnarchive{value: val, isSet: true}
}

func (v NullablePlatesUnarchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlatesUnarchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


