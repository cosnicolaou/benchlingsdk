/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// OligosUnarchive The request body for unarchiving Oligos. 
type OligosUnarchive struct {
	OligoIds []string `json:"oligoIds"`
}

// NewOligosUnarchive instantiates a new OligosUnarchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOligosUnarchive(oligoIds []string) *OligosUnarchive {
	this := OligosUnarchive{}
	this.OligoIds = oligoIds
	return &this
}

// NewOligosUnarchiveWithDefaults instantiates a new OligosUnarchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOligosUnarchiveWithDefaults() *OligosUnarchive {
	this := OligosUnarchive{}
	return &this
}

// GetOligoIds returns the OligoIds field value
func (o *OligosUnarchive) GetOligoIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.OligoIds
}

// GetOligoIdsOk returns a tuple with the OligoIds field value
// and a boolean to check if the value has been set.
func (o *OligosUnarchive) GetOligoIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.OligoIds, true
}

// SetOligoIds sets field value
func (o *OligosUnarchive) SetOligoIds(v []string) {
	o.OligoIds = v
}

func (o OligosUnarchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["oligoIds"] = o.OligoIds
	}
	return json.Marshal(toSerialize)
}

type NullableOligosUnarchive struct {
	value *OligosUnarchive
	isSet bool
}

func (v NullableOligosUnarchive) Get() *OligosUnarchive {
	return v.value
}

func (v *NullableOligosUnarchive) Set(val *OligosUnarchive) {
	v.value = val
	v.isSet = true
}

func (v NullableOligosUnarchive) IsSet() bool {
	return v.isSet
}

func (v *NullableOligosUnarchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOligosUnarchive(val *OligosUnarchive) *NullableOligosUnarchive {
	return &NullableOligosUnarchive{value: val, isSet: true}
}

func (v NullableOligosUnarchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOligosUnarchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


