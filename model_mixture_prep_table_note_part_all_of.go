/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// MixturePrepTableNotePartAllOf struct for MixturePrepTableNotePartAllOf
type MixturePrepTableNotePartAllOf struct {
	MixtureSchemaId *string `json:"mixtureSchemaId,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewMixturePrepTableNotePartAllOf instantiates a new MixturePrepTableNotePartAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMixturePrepTableNotePartAllOf() *MixturePrepTableNotePartAllOf {
	this := MixturePrepTableNotePartAllOf{}
	return &this
}

// NewMixturePrepTableNotePartAllOfWithDefaults instantiates a new MixturePrepTableNotePartAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMixturePrepTableNotePartAllOfWithDefaults() *MixturePrepTableNotePartAllOf {
	this := MixturePrepTableNotePartAllOf{}
	return &this
}

// GetMixtureSchemaId returns the MixtureSchemaId field value if set, zero value otherwise.
func (o *MixturePrepTableNotePartAllOf) GetMixtureSchemaId() string {
	if o == nil || isNil(o.MixtureSchemaId) {
		var ret string
		return ret
	}
	return *o.MixtureSchemaId
}

// GetMixtureSchemaIdOk returns a tuple with the MixtureSchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixturePrepTableNotePartAllOf) GetMixtureSchemaIdOk() (*string, bool) {
	if o == nil || isNil(o.MixtureSchemaId) {
    return nil, false
	}
	return o.MixtureSchemaId, true
}

// HasMixtureSchemaId returns a boolean if a field has been set.
func (o *MixturePrepTableNotePartAllOf) HasMixtureSchemaId() bool {
	if o != nil && !isNil(o.MixtureSchemaId) {
		return true
	}

	return false
}

// SetMixtureSchemaId gets a reference to the given string and assigns it to the MixtureSchemaId field.
func (o *MixturePrepTableNotePartAllOf) SetMixtureSchemaId(v string) {
	o.MixtureSchemaId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MixturePrepTableNotePartAllOf) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MixturePrepTableNotePartAllOf) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MixturePrepTableNotePartAllOf) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MixturePrepTableNotePartAllOf) SetType(v string) {
	o.Type = &v
}

func (o MixturePrepTableNotePartAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.MixtureSchemaId) {
		toSerialize["mixtureSchemaId"] = o.MixtureSchemaId
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMixturePrepTableNotePartAllOf struct {
	value *MixturePrepTableNotePartAllOf
	isSet bool
}

func (v NullableMixturePrepTableNotePartAllOf) Get() *MixturePrepTableNotePartAllOf {
	return v.value
}

func (v *NullableMixturePrepTableNotePartAllOf) Set(val *MixturePrepTableNotePartAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMixturePrepTableNotePartAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMixturePrepTableNotePartAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMixturePrepTableNotePartAllOf(val *MixturePrepTableNotePartAllOf) *NullableMixturePrepTableNotePartAllOf {
	return &NullableMixturePrepTableNotePartAllOf{value: val, isSet: true}
}

func (v NullableMixturePrepTableNotePartAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMixturePrepTableNotePartAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


