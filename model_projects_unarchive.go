/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// ProjectsUnarchive struct for ProjectsUnarchive
type ProjectsUnarchive struct {
	// A list of project IDs to unarchive.
	ProjectIds []string `json:"projectIds"`
}

// NewProjectsUnarchive instantiates a new ProjectsUnarchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectsUnarchive(projectIds []string) *ProjectsUnarchive {
	this := ProjectsUnarchive{}
	this.ProjectIds = projectIds
	return &this
}

// NewProjectsUnarchiveWithDefaults instantiates a new ProjectsUnarchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectsUnarchiveWithDefaults() *ProjectsUnarchive {
	this := ProjectsUnarchive{}
	return &this
}

// GetProjectIds returns the ProjectIds field value
func (o *ProjectsUnarchive) GetProjectIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value
// and a boolean to check if the value has been set.
func (o *ProjectsUnarchive) GetProjectIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ProjectIds, true
}

// SetProjectIds sets field value
func (o *ProjectsUnarchive) SetProjectIds(v []string) {
	o.ProjectIds = v
}

func (o ProjectsUnarchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["projectIds"] = o.ProjectIds
	}
	return json.Marshal(toSerialize)
}

type NullableProjectsUnarchive struct {
	value *ProjectsUnarchive
	isSet bool
}

func (v NullableProjectsUnarchive) Get() *ProjectsUnarchive {
	return v.value
}

func (v *NullableProjectsUnarchive) Set(val *ProjectsUnarchive) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectsUnarchive) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectsUnarchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectsUnarchive(val *ProjectsUnarchive) *NullableProjectsUnarchive {
	return &NullableProjectsUnarchive{value: val, isSet: true}
}

func (v NullableProjectsUnarchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectsUnarchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


