/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BlobCreate struct for BlobCreate
type BlobCreate struct {
	// base64 encoded file contents
	Data64 string `json:"data64"`
	// The MD5 hash of the blob part. Note: this should be the hash of the raw data of the blob part, not the hash of the base64 encoding. 
	Md5 string `json:"md5"`
	// eg. application/jpeg
	MimeType *string `json:"mimeType,omitempty"`
	// Name of the blob
	Name string `json:"name"`
	// One of RAW_FILE or VISUALIZATION. If VISUALIZATION, the blob may be displayed as an image preview. 
	Type string `json:"type"`
}

// NewBlobCreate instantiates a new BlobCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlobCreate(data64 string, md5 string, name string, type_ string) *BlobCreate {
	this := BlobCreate{}
	this.Data64 = data64
	this.Md5 = md5
	var mimeType string = "application/octet-stream"
	this.MimeType = &mimeType
	this.Name = name
	this.Type = type_
	return &this
}

// NewBlobCreateWithDefaults instantiates a new BlobCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlobCreateWithDefaults() *BlobCreate {
	this := BlobCreate{}
	var mimeType string = "application/octet-stream"
	this.MimeType = &mimeType
	return &this
}

// GetData64 returns the Data64 field value
func (o *BlobCreate) GetData64() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data64
}

// GetData64Ok returns a tuple with the Data64 field value
// and a boolean to check if the value has been set.
func (o *BlobCreate) GetData64Ok() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Data64, true
}

// SetData64 sets field value
func (o *BlobCreate) SetData64(v string) {
	o.Data64 = v
}

// GetMd5 returns the Md5 field value
func (o *BlobCreate) GetMd5() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Md5
}

// GetMd5Ok returns a tuple with the Md5 field value
// and a boolean to check if the value has been set.
func (o *BlobCreate) GetMd5Ok() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Md5, true
}

// SetMd5 sets field value
func (o *BlobCreate) SetMd5(v string) {
	o.Md5 = v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *BlobCreate) GetMimeType() string {
	if o == nil || isNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlobCreate) GetMimeTypeOk() (*string, bool) {
	if o == nil || isNil(o.MimeType) {
    return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *BlobCreate) HasMimeType() bool {
	if o != nil && !isNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *BlobCreate) SetMimeType(v string) {
	o.MimeType = &v
}

// GetName returns the Name field value
func (o *BlobCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BlobCreate) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BlobCreate) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *BlobCreate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BlobCreate) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BlobCreate) SetType(v string) {
	o.Type = v
}

func (o BlobCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data64"] = o.Data64
	}
	if true {
		toSerialize["md5"] = o.Md5
	}
	if !isNil(o.MimeType) {
		toSerialize["mimeType"] = o.MimeType
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableBlobCreate struct {
	value *BlobCreate
	isSet bool
}

func (v NullableBlobCreate) Get() *BlobCreate {
	return v.value
}

func (v *NullableBlobCreate) Set(val *BlobCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableBlobCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableBlobCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlobCreate(val *BlobCreate) *NullableBlobCreate {
	return &NullableBlobCreate{value: val, isSet: true}
}

func (v NullableBlobCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlobCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


