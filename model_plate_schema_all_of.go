/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// PlateSchemaAllOf struct for PlateSchemaAllOf
type PlateSchemaAllOf struct {
	ContainerSchema NullableBoxSchemaAllOfContainerSchema `json:"containerSchema,omitempty"`
	Height *float32 `json:"height,omitempty"`
	PlateType *string `json:"plateType,omitempty"`
	Type *string `json:"type,omitempty"`
	Width *float32 `json:"width,omitempty"`
}

// NewPlateSchemaAllOf instantiates a new PlateSchemaAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlateSchemaAllOf() *PlateSchemaAllOf {
	this := PlateSchemaAllOf{}
	return &this
}

// NewPlateSchemaAllOfWithDefaults instantiates a new PlateSchemaAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlateSchemaAllOfWithDefaults() *PlateSchemaAllOf {
	this := PlateSchemaAllOf{}
	return &this
}

// GetContainerSchema returns the ContainerSchema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlateSchemaAllOf) GetContainerSchema() BoxSchemaAllOfContainerSchema {
	if o == nil || isNil(o.ContainerSchema.Get()) {
		var ret BoxSchemaAllOfContainerSchema
		return ret
	}
	return *o.ContainerSchema.Get()
}

// GetContainerSchemaOk returns a tuple with the ContainerSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlateSchemaAllOf) GetContainerSchemaOk() (*BoxSchemaAllOfContainerSchema, bool) {
	if o == nil {
    return nil, false
	}
	return o.ContainerSchema.Get(), o.ContainerSchema.IsSet()
}

// HasContainerSchema returns a boolean if a field has been set.
func (o *PlateSchemaAllOf) HasContainerSchema() bool {
	if o != nil && o.ContainerSchema.IsSet() {
		return true
	}

	return false
}

// SetContainerSchema gets a reference to the given NullableBoxSchemaAllOfContainerSchema and assigns it to the ContainerSchema field.
func (o *PlateSchemaAllOf) SetContainerSchema(v BoxSchemaAllOfContainerSchema) {
	o.ContainerSchema.Set(&v)
}
// SetContainerSchemaNil sets the value for ContainerSchema to be an explicit nil
func (o *PlateSchemaAllOf) SetContainerSchemaNil() {
	o.ContainerSchema.Set(nil)
}

// UnsetContainerSchema ensures that no value is present for ContainerSchema, not even an explicit nil
func (o *PlateSchemaAllOf) UnsetContainerSchema() {
	o.ContainerSchema.Unset()
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *PlateSchemaAllOf) GetHeight() float32 {
	if o == nil || isNil(o.Height) {
		var ret float32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlateSchemaAllOf) GetHeightOk() (*float32, bool) {
	if o == nil || isNil(o.Height) {
    return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *PlateSchemaAllOf) HasHeight() bool {
	if o != nil && !isNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given float32 and assigns it to the Height field.
func (o *PlateSchemaAllOf) SetHeight(v float32) {
	o.Height = &v
}

// GetPlateType returns the PlateType field value if set, zero value otherwise.
func (o *PlateSchemaAllOf) GetPlateType() string {
	if o == nil || isNil(o.PlateType) {
		var ret string
		return ret
	}
	return *o.PlateType
}

// GetPlateTypeOk returns a tuple with the PlateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlateSchemaAllOf) GetPlateTypeOk() (*string, bool) {
	if o == nil || isNil(o.PlateType) {
    return nil, false
	}
	return o.PlateType, true
}

// HasPlateType returns a boolean if a field has been set.
func (o *PlateSchemaAllOf) HasPlateType() bool {
	if o != nil && !isNil(o.PlateType) {
		return true
	}

	return false
}

// SetPlateType gets a reference to the given string and assigns it to the PlateType field.
func (o *PlateSchemaAllOf) SetPlateType(v string) {
	o.PlateType = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PlateSchemaAllOf) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlateSchemaAllOf) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PlateSchemaAllOf) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PlateSchemaAllOf) SetType(v string) {
	o.Type = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *PlateSchemaAllOf) GetWidth() float32 {
	if o == nil || isNil(o.Width) {
		var ret float32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlateSchemaAllOf) GetWidthOk() (*float32, bool) {
	if o == nil || isNil(o.Width) {
    return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *PlateSchemaAllOf) HasWidth() bool {
	if o != nil && !isNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given float32 and assigns it to the Width field.
func (o *PlateSchemaAllOf) SetWidth(v float32) {
	o.Width = &v
}

func (o PlateSchemaAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContainerSchema.IsSet() {
		toSerialize["containerSchema"] = o.ContainerSchema.Get()
	}
	if !isNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !isNil(o.PlateType) {
		toSerialize["plateType"] = o.PlateType
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	return json.Marshal(toSerialize)
}

type NullablePlateSchemaAllOf struct {
	value *PlateSchemaAllOf
	isSet bool
}

func (v NullablePlateSchemaAllOf) Get() *PlateSchemaAllOf {
	return v.value
}

func (v *NullablePlateSchemaAllOf) Set(val *PlateSchemaAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePlateSchemaAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePlateSchemaAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlateSchemaAllOf(val *PlateSchemaAllOf) *NullablePlateSchemaAllOf {
	return &NullablePlateSchemaAllOf{value: val, isSet: true}
}

func (v NullablePlateSchemaAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlateSchemaAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


