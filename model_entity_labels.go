/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntityLabels struct for EntityLabels
type EntityLabels struct {
	EntityRegistryId NullableString `json:"entityRegistryId,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewEntityLabels instantiates a new EntityLabels object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityLabels() *EntityLabels {
	this := EntityLabels{}
	return &this
}

// NewEntityLabelsWithDefaults instantiates a new EntityLabels object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityLabelsWithDefaults() *EntityLabels {
	this := EntityLabels{}
	return &this
}

// GetEntityRegistryId returns the EntityRegistryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntityLabels) GetEntityRegistryId() string {
	if o == nil || isNil(o.EntityRegistryId.Get()) {
		var ret string
		return ret
	}
	return *o.EntityRegistryId.Get()
}

// GetEntityRegistryIdOk returns a tuple with the EntityRegistryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntityLabels) GetEntityRegistryIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.EntityRegistryId.Get(), o.EntityRegistryId.IsSet()
}

// HasEntityRegistryId returns a boolean if a field has been set.
func (o *EntityLabels) HasEntityRegistryId() bool {
	if o != nil && o.EntityRegistryId.IsSet() {
		return true
	}

	return false
}

// SetEntityRegistryId gets a reference to the given NullableString and assigns it to the EntityRegistryId field.
func (o *EntityLabels) SetEntityRegistryId(v string) {
	o.EntityRegistryId.Set(&v)
}
// SetEntityRegistryIdNil sets the value for EntityRegistryId to be an explicit nil
func (o *EntityLabels) SetEntityRegistryIdNil() {
	o.EntityRegistryId.Set(nil)
}

// UnsetEntityRegistryId ensures that no value is present for EntityRegistryId, not even an explicit nil
func (o *EntityLabels) UnsetEntityRegistryId() {
	o.EntityRegistryId.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EntityLabels) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityLabels) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EntityLabels) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EntityLabels) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EntityLabels) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityLabels) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EntityLabels) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EntityLabels) SetName(v string) {
	o.Name = &v
}

func (o EntityLabels) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityRegistryId.IsSet() {
		toSerialize["entityRegistryId"] = o.EntityRegistryId.Get()
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableEntityLabels struct {
	value *EntityLabels
	isSet bool
}

func (v NullableEntityLabels) Get() *EntityLabels {
	return v.value
}

func (v *NullableEntityLabels) Set(val *EntityLabels) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityLabels) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityLabels) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityLabels(val *EntityLabels) *NullableEntityLabels {
	return &NullableEntityLabels{value: val, isSet: true}
}

func (v NullableEntityLabels) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityLabels) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


