/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// EntryTemplateDayNotesInner - Notes are the main building blocks of entries. Each note corresponds roughly to a paragraph. 
type EntryTemplateDayNotesInner struct {
	AssayRunNotePart *AssayRunNotePart
	BoxCreationTableNotePart *BoxCreationTableNotePart
	CheckboxNotePart *CheckboxNotePart
	ExternalFileNotePart *ExternalFileNotePart
	LookupTableNotePart *LookupTableNotePart
	MixturePrepTableNotePart *MixturePrepTableNotePart
	PlateCreationTableNotePart *PlateCreationTableNotePart
	RegistrationTableNotePart *RegistrationTableNotePart
	ResultsTableNotePart *ResultsTableNotePart
	SimpleNotePart *SimpleNotePart
	TableNotePart *TableNotePart
}

// AssayRunNotePartAsEntryTemplateDayNotesInner is a convenience function that returns AssayRunNotePart wrapped in EntryTemplateDayNotesInner
func AssayRunNotePartAsEntryTemplateDayNotesInner(v *AssayRunNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		AssayRunNotePart: v,
	}
}

// BoxCreationTableNotePartAsEntryTemplateDayNotesInner is a convenience function that returns BoxCreationTableNotePart wrapped in EntryTemplateDayNotesInner
func BoxCreationTableNotePartAsEntryTemplateDayNotesInner(v *BoxCreationTableNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		BoxCreationTableNotePart: v,
	}
}

// CheckboxNotePartAsEntryTemplateDayNotesInner is a convenience function that returns CheckboxNotePart wrapped in EntryTemplateDayNotesInner
func CheckboxNotePartAsEntryTemplateDayNotesInner(v *CheckboxNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		CheckboxNotePart: v,
	}
}

// ExternalFileNotePartAsEntryTemplateDayNotesInner is a convenience function that returns ExternalFileNotePart wrapped in EntryTemplateDayNotesInner
func ExternalFileNotePartAsEntryTemplateDayNotesInner(v *ExternalFileNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		ExternalFileNotePart: v,
	}
}

// LookupTableNotePartAsEntryTemplateDayNotesInner is a convenience function that returns LookupTableNotePart wrapped in EntryTemplateDayNotesInner
func LookupTableNotePartAsEntryTemplateDayNotesInner(v *LookupTableNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		LookupTableNotePart: v,
	}
}

// MixturePrepTableNotePartAsEntryTemplateDayNotesInner is a convenience function that returns MixturePrepTableNotePart wrapped in EntryTemplateDayNotesInner
func MixturePrepTableNotePartAsEntryTemplateDayNotesInner(v *MixturePrepTableNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		MixturePrepTableNotePart: v,
	}
}

// PlateCreationTableNotePartAsEntryTemplateDayNotesInner is a convenience function that returns PlateCreationTableNotePart wrapped in EntryTemplateDayNotesInner
func PlateCreationTableNotePartAsEntryTemplateDayNotesInner(v *PlateCreationTableNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		PlateCreationTableNotePart: v,
	}
}

// RegistrationTableNotePartAsEntryTemplateDayNotesInner is a convenience function that returns RegistrationTableNotePart wrapped in EntryTemplateDayNotesInner
func RegistrationTableNotePartAsEntryTemplateDayNotesInner(v *RegistrationTableNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		RegistrationTableNotePart: v,
	}
}

// ResultsTableNotePartAsEntryTemplateDayNotesInner is a convenience function that returns ResultsTableNotePart wrapped in EntryTemplateDayNotesInner
func ResultsTableNotePartAsEntryTemplateDayNotesInner(v *ResultsTableNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		ResultsTableNotePart: v,
	}
}

// SimpleNotePartAsEntryTemplateDayNotesInner is a convenience function that returns SimpleNotePart wrapped in EntryTemplateDayNotesInner
func SimpleNotePartAsEntryTemplateDayNotesInner(v *SimpleNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		SimpleNotePart: v,
	}
}

// TableNotePartAsEntryTemplateDayNotesInner is a convenience function that returns TableNotePart wrapped in EntryTemplateDayNotesInner
func TableNotePartAsEntryTemplateDayNotesInner(v *TableNotePart) EntryTemplateDayNotesInner {
	return EntryTemplateDayNotesInner{
		TableNotePart: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EntryTemplateDayNotesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AssayRunNotePart
	err = newStrictDecoder(data).Decode(&dst.AssayRunNotePart)
	if err == nil {
		jsonAssayRunNotePart, _ := json.Marshal(dst.AssayRunNotePart)
		if string(jsonAssayRunNotePart) == "{}" { // empty struct
			dst.AssayRunNotePart = nil
		} else {
			match++
		}
	} else {
		dst.AssayRunNotePart = nil
	}

	// try to unmarshal data into BoxCreationTableNotePart
	err = newStrictDecoder(data).Decode(&dst.BoxCreationTableNotePart)
	if err == nil {
		jsonBoxCreationTableNotePart, _ := json.Marshal(dst.BoxCreationTableNotePart)
		if string(jsonBoxCreationTableNotePart) == "{}" { // empty struct
			dst.BoxCreationTableNotePart = nil
		} else {
			match++
		}
	} else {
		dst.BoxCreationTableNotePart = nil
	}

	// try to unmarshal data into CheckboxNotePart
	err = newStrictDecoder(data).Decode(&dst.CheckboxNotePart)
	if err == nil {
		jsonCheckboxNotePart, _ := json.Marshal(dst.CheckboxNotePart)
		if string(jsonCheckboxNotePart) == "{}" { // empty struct
			dst.CheckboxNotePart = nil
		} else {
			match++
		}
	} else {
		dst.CheckboxNotePart = nil
	}

	// try to unmarshal data into ExternalFileNotePart
	err = newStrictDecoder(data).Decode(&dst.ExternalFileNotePart)
	if err == nil {
		jsonExternalFileNotePart, _ := json.Marshal(dst.ExternalFileNotePart)
		if string(jsonExternalFileNotePart) == "{}" { // empty struct
			dst.ExternalFileNotePart = nil
		} else {
			match++
		}
	} else {
		dst.ExternalFileNotePart = nil
	}

	// try to unmarshal data into LookupTableNotePart
	err = newStrictDecoder(data).Decode(&dst.LookupTableNotePart)
	if err == nil {
		jsonLookupTableNotePart, _ := json.Marshal(dst.LookupTableNotePart)
		if string(jsonLookupTableNotePart) == "{}" { // empty struct
			dst.LookupTableNotePart = nil
		} else {
			match++
		}
	} else {
		dst.LookupTableNotePart = nil
	}

	// try to unmarshal data into MixturePrepTableNotePart
	err = newStrictDecoder(data).Decode(&dst.MixturePrepTableNotePart)
	if err == nil {
		jsonMixturePrepTableNotePart, _ := json.Marshal(dst.MixturePrepTableNotePart)
		if string(jsonMixturePrepTableNotePart) == "{}" { // empty struct
			dst.MixturePrepTableNotePart = nil
		} else {
			match++
		}
	} else {
		dst.MixturePrepTableNotePart = nil
	}

	// try to unmarshal data into PlateCreationTableNotePart
	err = newStrictDecoder(data).Decode(&dst.PlateCreationTableNotePart)
	if err == nil {
		jsonPlateCreationTableNotePart, _ := json.Marshal(dst.PlateCreationTableNotePart)
		if string(jsonPlateCreationTableNotePart) == "{}" { // empty struct
			dst.PlateCreationTableNotePart = nil
		} else {
			match++
		}
	} else {
		dst.PlateCreationTableNotePart = nil
	}

	// try to unmarshal data into RegistrationTableNotePart
	err = newStrictDecoder(data).Decode(&dst.RegistrationTableNotePart)
	if err == nil {
		jsonRegistrationTableNotePart, _ := json.Marshal(dst.RegistrationTableNotePart)
		if string(jsonRegistrationTableNotePart) == "{}" { // empty struct
			dst.RegistrationTableNotePart = nil
		} else {
			match++
		}
	} else {
		dst.RegistrationTableNotePart = nil
	}

	// try to unmarshal data into ResultsTableNotePart
	err = newStrictDecoder(data).Decode(&dst.ResultsTableNotePart)
	if err == nil {
		jsonResultsTableNotePart, _ := json.Marshal(dst.ResultsTableNotePart)
		if string(jsonResultsTableNotePart) == "{}" { // empty struct
			dst.ResultsTableNotePart = nil
		} else {
			match++
		}
	} else {
		dst.ResultsTableNotePart = nil
	}

	// try to unmarshal data into SimpleNotePart
	err = newStrictDecoder(data).Decode(&dst.SimpleNotePart)
	if err == nil {
		jsonSimpleNotePart, _ := json.Marshal(dst.SimpleNotePart)
		if string(jsonSimpleNotePart) == "{}" { // empty struct
			dst.SimpleNotePart = nil
		} else {
			match++
		}
	} else {
		dst.SimpleNotePart = nil
	}

	// try to unmarshal data into TableNotePart
	err = newStrictDecoder(data).Decode(&dst.TableNotePart)
	if err == nil {
		jsonTableNotePart, _ := json.Marshal(dst.TableNotePart)
		if string(jsonTableNotePart) == "{}" { // empty struct
			dst.TableNotePart = nil
		} else {
			match++
		}
	} else {
		dst.TableNotePart = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AssayRunNotePart = nil
		dst.BoxCreationTableNotePart = nil
		dst.CheckboxNotePart = nil
		dst.ExternalFileNotePart = nil
		dst.LookupTableNotePart = nil
		dst.MixturePrepTableNotePart = nil
		dst.PlateCreationTableNotePart = nil
		dst.RegistrationTableNotePart = nil
		dst.ResultsTableNotePart = nil
		dst.SimpleNotePart = nil
		dst.TableNotePart = nil

		return fmt.Errorf("data matches more than one schema in oneOf(EntryTemplateDayNotesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(EntryTemplateDayNotesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EntryTemplateDayNotesInner) MarshalJSON() ([]byte, error) {
	if src.AssayRunNotePart != nil {
		return json.Marshal(&src.AssayRunNotePart)
	}

	if src.BoxCreationTableNotePart != nil {
		return json.Marshal(&src.BoxCreationTableNotePart)
	}

	if src.CheckboxNotePart != nil {
		return json.Marshal(&src.CheckboxNotePart)
	}

	if src.ExternalFileNotePart != nil {
		return json.Marshal(&src.ExternalFileNotePart)
	}

	if src.LookupTableNotePart != nil {
		return json.Marshal(&src.LookupTableNotePart)
	}

	if src.MixturePrepTableNotePart != nil {
		return json.Marshal(&src.MixturePrepTableNotePart)
	}

	if src.PlateCreationTableNotePart != nil {
		return json.Marshal(&src.PlateCreationTableNotePart)
	}

	if src.RegistrationTableNotePart != nil {
		return json.Marshal(&src.RegistrationTableNotePart)
	}

	if src.ResultsTableNotePart != nil {
		return json.Marshal(&src.ResultsTableNotePart)
	}

	if src.SimpleNotePart != nil {
		return json.Marshal(&src.SimpleNotePart)
	}

	if src.TableNotePart != nil {
		return json.Marshal(&src.TableNotePart)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EntryTemplateDayNotesInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AssayRunNotePart != nil {
		return obj.AssayRunNotePart
	}

	if obj.BoxCreationTableNotePart != nil {
		return obj.BoxCreationTableNotePart
	}

	if obj.CheckboxNotePart != nil {
		return obj.CheckboxNotePart
	}

	if obj.ExternalFileNotePart != nil {
		return obj.ExternalFileNotePart
	}

	if obj.LookupTableNotePart != nil {
		return obj.LookupTableNotePart
	}

	if obj.MixturePrepTableNotePart != nil {
		return obj.MixturePrepTableNotePart
	}

	if obj.PlateCreationTableNotePart != nil {
		return obj.PlateCreationTableNotePart
	}

	if obj.RegistrationTableNotePart != nil {
		return obj.RegistrationTableNotePart
	}

	if obj.ResultsTableNotePart != nil {
		return obj.ResultsTableNotePart
	}

	if obj.SimpleNotePart != nil {
		return obj.SimpleNotePart
	}

	if obj.TableNotePart != nil {
		return obj.TableNotePart
	}

	// all schemas are nil
	return nil
}

type NullableEntryTemplateDayNotesInner struct {
	value *EntryTemplateDayNotesInner
	isSet bool
}

func (v NullableEntryTemplateDayNotesInner) Get() *EntryTemplateDayNotesInner {
	return v.value
}

func (v *NullableEntryTemplateDayNotesInner) Set(val *EntryTemplateDayNotesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryTemplateDayNotesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryTemplateDayNotesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryTemplateDayNotesInner(val *EntryTemplateDayNotesInner) *NullableEntryTemplateDayNotesInner {
	return &NullableEntryTemplateDayNotesInner{value: val, isSet: true}
}

func (v NullableEntryTemplateDayNotesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryTemplateDayNotesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


