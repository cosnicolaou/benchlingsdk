/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// BatchesArchivalChange IDs of all batches that were archived / unarchived, grouped by resource type. 
type BatchesArchivalChange struct {
	BatchIds []string `json:"batchIds,omitempty"`
}

// NewBatchesArchivalChange instantiates a new BatchesArchivalChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchesArchivalChange() *BatchesArchivalChange {
	this := BatchesArchivalChange{}
	return &this
}

// NewBatchesArchivalChangeWithDefaults instantiates a new BatchesArchivalChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchesArchivalChangeWithDefaults() *BatchesArchivalChange {
	this := BatchesArchivalChange{}
	return &this
}

// GetBatchIds returns the BatchIds field value if set, zero value otherwise.
func (o *BatchesArchivalChange) GetBatchIds() []string {
	if o == nil || isNil(o.BatchIds) {
		var ret []string
		return ret
	}
	return o.BatchIds
}

// GetBatchIdsOk returns a tuple with the BatchIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchesArchivalChange) GetBatchIdsOk() ([]string, bool) {
	if o == nil || isNil(o.BatchIds) {
    return nil, false
	}
	return o.BatchIds, true
}

// HasBatchIds returns a boolean if a field has been set.
func (o *BatchesArchivalChange) HasBatchIds() bool {
	if o != nil && !isNil(o.BatchIds) {
		return true
	}

	return false
}

// SetBatchIds gets a reference to the given []string and assigns it to the BatchIds field.
func (o *BatchesArchivalChange) SetBatchIds(v []string) {
	o.BatchIds = v
}

func (o BatchesArchivalChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BatchIds) {
		toSerialize["batchIds"] = o.BatchIds
	}
	return json.Marshal(toSerialize)
}

type NullableBatchesArchivalChange struct {
	value *BatchesArchivalChange
	isSet bool
}

func (v NullableBatchesArchivalChange) Get() *BatchesArchivalChange {
	return v.value
}

func (v *NullableBatchesArchivalChange) Set(val *BatchesArchivalChange) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchesArchivalChange) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchesArchivalChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchesArchivalChange(val *BatchesArchivalChange) *NullableBatchesArchivalChange {
	return &NullableBatchesArchivalChange{value: val, isSet: true}
}

func (v NullableBatchesArchivalChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchesArchivalChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


