/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"time"
)

// BatchSchemaAllOf struct for BatchSchemaAllOf
type BatchSchemaAllOf struct {
	EntitySchemaId *string `json:"entitySchemaId,omitempty"`
	// DateTime the Batch Schema was last modified
	ModifiedAt *time.Time `json:"modifiedAt,omitempty"`
}

// NewBatchSchemaAllOf instantiates a new BatchSchemaAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchSchemaAllOf() *BatchSchemaAllOf {
	this := BatchSchemaAllOf{}
	return &this
}

// NewBatchSchemaAllOfWithDefaults instantiates a new BatchSchemaAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchSchemaAllOfWithDefaults() *BatchSchemaAllOf {
	this := BatchSchemaAllOf{}
	return &this
}

// GetEntitySchemaId returns the EntitySchemaId field value if set, zero value otherwise.
func (o *BatchSchemaAllOf) GetEntitySchemaId() string {
	if o == nil || isNil(o.EntitySchemaId) {
		var ret string
		return ret
	}
	return *o.EntitySchemaId
}

// GetEntitySchemaIdOk returns a tuple with the EntitySchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchSchemaAllOf) GetEntitySchemaIdOk() (*string, bool) {
	if o == nil || isNil(o.EntitySchemaId) {
    return nil, false
	}
	return o.EntitySchemaId, true
}

// HasEntitySchemaId returns a boolean if a field has been set.
func (o *BatchSchemaAllOf) HasEntitySchemaId() bool {
	if o != nil && !isNil(o.EntitySchemaId) {
		return true
	}

	return false
}

// SetEntitySchemaId gets a reference to the given string and assigns it to the EntitySchemaId field.
func (o *BatchSchemaAllOf) SetEntitySchemaId(v string) {
	o.EntitySchemaId = &v
}

// GetModifiedAt returns the ModifiedAt field value if set, zero value otherwise.
func (o *BatchSchemaAllOf) GetModifiedAt() time.Time {
	if o == nil || isNil(o.ModifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.ModifiedAt
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchSchemaAllOf) GetModifiedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.ModifiedAt) {
    return nil, false
	}
	return o.ModifiedAt, true
}

// HasModifiedAt returns a boolean if a field has been set.
func (o *BatchSchemaAllOf) HasModifiedAt() bool {
	if o != nil && !isNil(o.ModifiedAt) {
		return true
	}

	return false
}

// SetModifiedAt gets a reference to the given time.Time and assigns it to the ModifiedAt field.
func (o *BatchSchemaAllOf) SetModifiedAt(v time.Time) {
	o.ModifiedAt = &v
}

func (o BatchSchemaAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EntitySchemaId) {
		toSerialize["entitySchemaId"] = o.EntitySchemaId
	}
	if !isNil(o.ModifiedAt) {
		toSerialize["modifiedAt"] = o.ModifiedAt
	}
	return json.Marshal(toSerialize)
}

type NullableBatchSchemaAllOf struct {
	value *BatchSchemaAllOf
	isSet bool
}

func (v NullableBatchSchemaAllOf) Get() *BatchSchemaAllOf {
	return v.value
}

func (v *NullableBatchSchemaAllOf) Set(val *BatchSchemaAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchSchemaAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchSchemaAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchSchemaAllOf(val *BatchSchemaAllOf) *NullableBatchSchemaAllOf {
	return &NullableBatchSchemaAllOf{value: val, isSet: true}
}

func (v NullableBatchSchemaAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchSchemaAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


