/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// EntryExternalFileById struct for EntryExternalFileById
type EntryExternalFileById struct {
	ExternalFile *EntryExternalFile `json:"externalFile,omitempty"`
}

// NewEntryExternalFileById instantiates a new EntryExternalFileById object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryExternalFileById() *EntryExternalFileById {
	this := EntryExternalFileById{}
	return &this
}

// NewEntryExternalFileByIdWithDefaults instantiates a new EntryExternalFileById object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryExternalFileByIdWithDefaults() *EntryExternalFileById {
	this := EntryExternalFileById{}
	return &this
}

// GetExternalFile returns the ExternalFile field value if set, zero value otherwise.
func (o *EntryExternalFileById) GetExternalFile() EntryExternalFile {
	if o == nil || isNil(o.ExternalFile) {
		var ret EntryExternalFile
		return ret
	}
	return *o.ExternalFile
}

// GetExternalFileOk returns a tuple with the ExternalFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryExternalFileById) GetExternalFileOk() (*EntryExternalFile, bool) {
	if o == nil || isNil(o.ExternalFile) {
    return nil, false
	}
	return o.ExternalFile, true
}

// HasExternalFile returns a boolean if a field has been set.
func (o *EntryExternalFileById) HasExternalFile() bool {
	if o != nil && !isNil(o.ExternalFile) {
		return true
	}

	return false
}

// SetExternalFile gets a reference to the given EntryExternalFile and assigns it to the ExternalFile field.
func (o *EntryExternalFileById) SetExternalFile(v EntryExternalFile) {
	o.ExternalFile = &v
}

func (o EntryExternalFileById) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExternalFile) {
		toSerialize["externalFile"] = o.ExternalFile
	}
	return json.Marshal(toSerialize)
}

type NullableEntryExternalFileById struct {
	value *EntryExternalFileById
	isSet bool
}

func (v NullableEntryExternalFileById) Get() *EntryExternalFileById {
	return v.value
}

func (v *NullableEntryExternalFileById) Set(val *EntryExternalFileById) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryExternalFileById) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryExternalFileById) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryExternalFileById(val *EntryExternalFileById) *NullableEntryExternalFileById {
	return &NullableEntryExternalFileById{value: val, isSet: true}
}

func (v NullableEntryExternalFileById) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryExternalFileById) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


