/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// LabAutomationApiService LabAutomationApi service
type LabAutomationApiService service

type ApiArchiveAutomationOutputProcessorsRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	automationOutputProcessorsArchive *AutomationOutputProcessorsArchive
}

func (r ApiArchiveAutomationOutputProcessorsRequest) AutomationOutputProcessorsArchive(automationOutputProcessorsArchive AutomationOutputProcessorsArchive) ApiArchiveAutomationOutputProcessorsRequest {
	r.automationOutputProcessorsArchive = &automationOutputProcessorsArchive
	return r
}

func (r ApiArchiveAutomationOutputProcessorsRequest) Execute() (*AutomationOutputProcessorArchivalChange, *http.Response, error) {
	return r.ApiService.ArchiveAutomationOutputProcessorsExecute(r)
}

/*
ArchiveAutomationOutputProcessors Archive Automation Output Processors and linked Results

Archive Automation Output Processors and linked Results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiArchiveAutomationOutputProcessorsRequest
*/
func (a *LabAutomationApiService) ArchiveAutomationOutputProcessors(ctx context.Context) ApiArchiveAutomationOutputProcessorsRequest {
	return ApiArchiveAutomationOutputProcessorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AutomationOutputProcessorArchivalChange
func (a *LabAutomationApiService) ArchiveAutomationOutputProcessorsExecute(r ApiArchiveAutomationOutputProcessorsRequest) (*AutomationOutputProcessorArchivalChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutomationOutputProcessorArchivalChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.ArchiveAutomationOutputProcessors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-output-processors:archive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.automationOutputProcessorsArchive
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateAutomationOutputProcessorRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	automationOutputProcessorCreate *AutomationOutputProcessorCreate
}

func (r ApiCreateAutomationOutputProcessorRequest) AutomationOutputProcessorCreate(automationOutputProcessorCreate AutomationOutputProcessorCreate) ApiCreateAutomationOutputProcessorRequest {
	r.automationOutputProcessorCreate = &automationOutputProcessorCreate
	return r
}

func (r ApiCreateAutomationOutputProcessorRequest) Execute() (*AutomationOutputProcessor, *http.Response, error) {
	return r.ApiService.CreateAutomationOutputProcessorExecute(r)
}

/*
CreateAutomationOutputProcessor Create Automation Output Processor

Create Automation Output Processor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateAutomationOutputProcessorRequest
*/
func (a *LabAutomationApiService) CreateAutomationOutputProcessor(ctx context.Context) ApiCreateAutomationOutputProcessorRequest {
	return ApiCreateAutomationOutputProcessorRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AutomationOutputProcessor
func (a *LabAutomationApiService) CreateAutomationOutputProcessorExecute(r ApiCreateAutomationOutputProcessorRequest) (*AutomationOutputProcessor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutomationOutputProcessor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.CreateAutomationOutputProcessor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-output-processors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.automationOutputProcessorCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGenerateInputWithAutomationInputGeneratorRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	inputGeneratorId string
}

func (r ApiGenerateInputWithAutomationInputGeneratorRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.GenerateInputWithAutomationInputGeneratorExecute(r)
}

/*
GenerateInputWithAutomationInputGenerator Generate Input with an Automation Input Generator

Generate Input with an Automation Input Generator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param inputGeneratorId
 @return ApiGenerateInputWithAutomationInputGeneratorRequest
*/
func (a *LabAutomationApiService) GenerateInputWithAutomationInputGenerator(ctx context.Context, inputGeneratorId string) ApiGenerateInputWithAutomationInputGeneratorRequest {
	return ApiGenerateInputWithAutomationInputGeneratorRequest{
		ApiService: a,
		ctx: ctx,
		inputGeneratorId: inputGeneratorId,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *LabAutomationApiService) GenerateInputWithAutomationInputGeneratorExecute(r ApiGenerateInputWithAutomationInputGeneratorRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.GenerateInputWithAutomationInputGenerator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-input-generators/{input_generator_id}:generate-input"
	localVarPath = strings.Replace(localVarPath, "{"+"input_generator_id"+"}", url.PathEscape(parameterToString(r.inputGeneratorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutomationInputGeneratorRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	inputGeneratorId string
}

func (r ApiGetAutomationInputGeneratorRequest) Execute() (*AutomationInputGenerator, *http.Response, error) {
	return r.ApiService.GetAutomationInputGeneratorExecute(r)
}

/*
GetAutomationInputGenerator Get an Automation Input Generator

Get an Automation Input Generator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param inputGeneratorId
 @return ApiGetAutomationInputGeneratorRequest
*/
func (a *LabAutomationApiService) GetAutomationInputGenerator(ctx context.Context, inputGeneratorId string) ApiGetAutomationInputGeneratorRequest {
	return ApiGetAutomationInputGeneratorRequest{
		ApiService: a,
		ctx: ctx,
		inputGeneratorId: inputGeneratorId,
	}
}

// Execute executes the request
//  @return AutomationInputGenerator
func (a *LabAutomationApiService) GetAutomationInputGeneratorExecute(r ApiGetAutomationInputGeneratorRequest) (*AutomationInputGenerator, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutomationInputGenerator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.GetAutomationInputGenerator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-input-generators/{input_generator_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"input_generator_id"+"}", url.PathEscape(parameterToString(r.inputGeneratorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAutomationOutputProcessorRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	outputProcessorId string
}

func (r ApiGetAutomationOutputProcessorRequest) Execute() (*AutomationOutputProcessor, *http.Response, error) {
	return r.ApiService.GetAutomationOutputProcessorExecute(r)
}

/*
GetAutomationOutputProcessor Get an Automation Output Processor

Get an Automation Output Processor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outputProcessorId
 @return ApiGetAutomationOutputProcessorRequest
*/
func (a *LabAutomationApiService) GetAutomationOutputProcessor(ctx context.Context, outputProcessorId string) ApiGetAutomationOutputProcessorRequest {
	return ApiGetAutomationOutputProcessorRequest{
		ApiService: a,
		ctx: ctx,
		outputProcessorId: outputProcessorId,
	}
}

// Execute executes the request
//  @return AutomationOutputProcessor
func (a *LabAutomationApiService) GetAutomationOutputProcessorExecute(r ApiGetAutomationOutputProcessorRequest) (*AutomationOutputProcessor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutomationOutputProcessor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.GetAutomationOutputProcessor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-output-processors/{output_processor_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"output_processor_id"+"}", url.PathEscape(parameterToString(r.outputProcessorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLabAutomationTransformRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	transformId string
}

func (r ApiGetLabAutomationTransformRequest) Execute() (*LabAutomationTransform, *http.Response, error) {
	return r.ApiService.GetLabAutomationTransformExecute(r)
}

/*
GetLabAutomationTransform Get a Lab Automation Transform step

Get a Lab Automation Transform step

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transformId
 @return ApiGetLabAutomationTransformRequest
*/
func (a *LabAutomationApiService) GetLabAutomationTransform(ctx context.Context, transformId string) ApiGetLabAutomationTransformRequest {
	return ApiGetLabAutomationTransformRequest{
		ApiService: a,
		ctx: ctx,
		transformId: transformId,
	}
}

// Execute executes the request
//  @return LabAutomationTransform
func (a *LabAutomationApiService) GetLabAutomationTransformExecute(r ApiGetLabAutomationTransformRequest) (*LabAutomationTransform, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LabAutomationTransform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.GetLabAutomationTransform")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-file-transforms/{transform_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"transform_id"+"}", url.PathEscape(parameterToString(r.transformId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v NotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAutomationOutputProcessorsRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	assayRunId *string
	automationFileConfigName *string
	archiveReason *string
	modifiedAt *string
	nextToken *string
}

// Id of the Run
func (r ApiListAutomationOutputProcessorsRequest) AssayRunId(assayRunId string) ApiListAutomationOutputProcessorsRequest {
	r.assayRunId = &assayRunId
	return r
}

// Name of the Automation File Config
func (r ApiListAutomationOutputProcessorsRequest) AutomationFileConfigName(automationFileConfigName string) ApiListAutomationOutputProcessorsRequest {
	r.automationFileConfigName = &automationFileConfigName
	return r
}

// Archive reason. Restricts items to those with the specified archive reason. Use \&quot;NOT_ARCHIVED\&quot; to filter for unarchived processors. Use \&quot;ANY_ARCHIVED\&quot; to filter for archived processors regardless of reason. Use \&quot;ANY_ARCHIVED_OR_NOT_ARCHIVED\&quot; to return items for both archived and unarchived. 
func (r ApiListAutomationOutputProcessorsRequest) ArchiveReason(archiveReason string) ApiListAutomationOutputProcessorsRequest {
	r.archiveReason = &archiveReason
	return r
}

// Datetime, in RFC 3339 format. Supports the &gt; and &lt; operators. Time zone defaults to UTC. Restricts results to those modified in the specified range. e.g. &gt; 2017-04-30. 
func (r ApiListAutomationOutputProcessorsRequest) ModifiedAt(modifiedAt string) ApiListAutomationOutputProcessorsRequest {
	r.modifiedAt = &modifiedAt
	return r
}

// Token for pagination
func (r ApiListAutomationOutputProcessorsRequest) NextToken(nextToken string) ApiListAutomationOutputProcessorsRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiListAutomationOutputProcessorsRequest) Execute() (*AutomationOutputProcessorsPaginatedList, *http.Response, error) {
	return r.ApiService.ListAutomationOutputProcessorsExecute(r)
}

/*
ListAutomationOutputProcessors List non-empty Automation Output Processors

List Automation Output Processors which have an attached file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListAutomationOutputProcessorsRequest
*/
func (a *LabAutomationApiService) ListAutomationOutputProcessors(ctx context.Context) ApiListAutomationOutputProcessorsRequest {
	return ApiListAutomationOutputProcessorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AutomationOutputProcessorsPaginatedList
func (a *LabAutomationApiService) ListAutomationOutputProcessorsExecute(r ApiListAutomationOutputProcessorsRequest) (*AutomationOutputProcessorsPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutomationOutputProcessorsPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.ListAutomationOutputProcessors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-output-processors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assayRunId != nil {
		localVarQueryParams.Add("assayRunId", parameterToString(*r.assayRunId, ""))
	}
	if r.automationFileConfigName != nil {
		localVarQueryParams.Add("automationFileConfigName", parameterToString(*r.automationFileConfigName, ""))
	}
	if r.archiveReason != nil {
		localVarQueryParams.Add("archiveReason", parameterToString(*r.archiveReason, ""))
	}
	if r.modifiedAt != nil {
		localVarQueryParams.Add("modifiedAt", parameterToString(*r.modifiedAt, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("nextToken", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProcessOutputWithAutomationOutputProcessorRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	outputProcessorId string
}

func (r ApiProcessOutputWithAutomationOutputProcessorRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.ProcessOutputWithAutomationOutputProcessorExecute(r)
}

/*
ProcessOutputWithAutomationOutputProcessor Process Output with an Automation Output Processor

Process Output with an Automation Output Processor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outputProcessorId
 @return ApiProcessOutputWithAutomationOutputProcessorRequest
*/
func (a *LabAutomationApiService) ProcessOutputWithAutomationOutputProcessor(ctx context.Context, outputProcessorId string) ApiProcessOutputWithAutomationOutputProcessorRequest {
	return ApiProcessOutputWithAutomationOutputProcessorRequest{
		ApiService: a,
		ctx: ctx,
		outputProcessorId: outputProcessorId,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *LabAutomationApiService) ProcessOutputWithAutomationOutputProcessorExecute(r ApiProcessOutputWithAutomationOutputProcessorRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.ProcessOutputWithAutomationOutputProcessor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-output-processors/{output_processor_id}:process-output"
	localVarPath = strings.Replace(localVarPath, "{"+"output_processor_id"+"}", url.PathEscape(parameterToString(r.outputProcessorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnarchiveAutomationOutputProcessorsRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	automationOutputProcessorsUnarchive *AutomationOutputProcessorsUnarchive
}

func (r ApiUnarchiveAutomationOutputProcessorsRequest) AutomationOutputProcessorsUnarchive(automationOutputProcessorsUnarchive AutomationOutputProcessorsUnarchive) ApiUnarchiveAutomationOutputProcessorsRequest {
	r.automationOutputProcessorsUnarchive = &automationOutputProcessorsUnarchive
	return r
}

func (r ApiUnarchiveAutomationOutputProcessorsRequest) Execute() (*AutomationOutputProcessorArchivalChange, *http.Response, error) {
	return r.ApiService.UnarchiveAutomationOutputProcessorsExecute(r)
}

/*
UnarchiveAutomationOutputProcessors Unarchive Automation Output Processors and linked Results

Unarchive Automation Output Processors and linked Results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUnarchiveAutomationOutputProcessorsRequest
*/
func (a *LabAutomationApiService) UnarchiveAutomationOutputProcessors(ctx context.Context) ApiUnarchiveAutomationOutputProcessorsRequest {
	return ApiUnarchiveAutomationOutputProcessorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AutomationOutputProcessorArchivalChange
func (a *LabAutomationApiService) UnarchiveAutomationOutputProcessorsExecute(r ApiUnarchiveAutomationOutputProcessorsRequest) (*AutomationOutputProcessorArchivalChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutomationOutputProcessorArchivalChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.UnarchiveAutomationOutputProcessors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-output-processors:unarchive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.automationOutputProcessorsUnarchive
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAutomationInputGeneratorRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	inputGeneratorId string
	automationInputGeneratorUpdate *AutomationInputGeneratorUpdate
}

func (r ApiUpdateAutomationInputGeneratorRequest) AutomationInputGeneratorUpdate(automationInputGeneratorUpdate AutomationInputGeneratorUpdate) ApiUpdateAutomationInputGeneratorRequest {
	r.automationInputGeneratorUpdate = &automationInputGeneratorUpdate
	return r
}

func (r ApiUpdateAutomationInputGeneratorRequest) Execute() (*AutomationInputGenerator, *http.Response, error) {
	return r.ApiService.UpdateAutomationInputGeneratorExecute(r)
}

/*
UpdateAutomationInputGenerator Update an Automation Input Generator

Update an Automation Input Generator

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param inputGeneratorId
 @return ApiUpdateAutomationInputGeneratorRequest
*/
func (a *LabAutomationApiService) UpdateAutomationInputGenerator(ctx context.Context, inputGeneratorId string) ApiUpdateAutomationInputGeneratorRequest {
	return ApiUpdateAutomationInputGeneratorRequest{
		ApiService: a,
		ctx: ctx,
		inputGeneratorId: inputGeneratorId,
	}
}

// Execute executes the request
//  @return AutomationInputGenerator
func (a *LabAutomationApiService) UpdateAutomationInputGeneratorExecute(r ApiUpdateAutomationInputGeneratorRequest) (*AutomationInputGenerator, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutomationInputGenerator
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.UpdateAutomationInputGenerator")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-input-generators/{input_generator_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"input_generator_id"+"}", url.PathEscape(parameterToString(r.inputGeneratorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.automationInputGeneratorUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAutomationOutputProcessorRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	outputProcessorId string
	automationOutputProcessorUpdate *AutomationOutputProcessorUpdate
}

func (r ApiUpdateAutomationOutputProcessorRequest) AutomationOutputProcessorUpdate(automationOutputProcessorUpdate AutomationOutputProcessorUpdate) ApiUpdateAutomationOutputProcessorRequest {
	r.automationOutputProcessorUpdate = &automationOutputProcessorUpdate
	return r
}

func (r ApiUpdateAutomationOutputProcessorRequest) Execute() (*AutomationOutputProcessor, *http.Response, error) {
	return r.ApiService.UpdateAutomationOutputProcessorExecute(r)
}

/*
UpdateAutomationOutputProcessor Update an Automation Output Processor

Update an Automation Output Processor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param outputProcessorId
 @return ApiUpdateAutomationOutputProcessorRequest
*/
func (a *LabAutomationApiService) UpdateAutomationOutputProcessor(ctx context.Context, outputProcessorId string) ApiUpdateAutomationOutputProcessorRequest {
	return ApiUpdateAutomationOutputProcessorRequest{
		ApiService: a,
		ctx: ctx,
		outputProcessorId: outputProcessorId,
	}
}

// Execute executes the request
//  @return AutomationOutputProcessor
func (a *LabAutomationApiService) UpdateAutomationOutputProcessorExecute(r ApiUpdateAutomationOutputProcessorRequest) (*AutomationOutputProcessor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutomationOutputProcessor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.UpdateAutomationOutputProcessor")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-output-processors/{output_processor_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"output_processor_id"+"}", url.PathEscape(parameterToString(r.outputProcessorId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.automationOutputProcessorUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateLabAutomationTransformRequest struct {
	ctx context.Context
	ApiService *LabAutomationApiService
	transformId string
	labAutomationTransformUpdate *LabAutomationTransformUpdate
}

func (r ApiUpdateLabAutomationTransformRequest) LabAutomationTransformUpdate(labAutomationTransformUpdate LabAutomationTransformUpdate) ApiUpdateLabAutomationTransformRequest {
	r.labAutomationTransformUpdate = &labAutomationTransformUpdate
	return r
}

func (r ApiUpdateLabAutomationTransformRequest) Execute() (*LabAutomationTransform, *http.Response, error) {
	return r.ApiService.UpdateLabAutomationTransformExecute(r)
}

/*
UpdateLabAutomationTransform Update a Lab Automation Transform step

Update a Lab Automation Transform step

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transformId
 @return ApiUpdateLabAutomationTransformRequest
*/
func (a *LabAutomationApiService) UpdateLabAutomationTransform(ctx context.Context, transformId string) ApiUpdateLabAutomationTransformRequest {
	return ApiUpdateLabAutomationTransformRequest{
		ApiService: a,
		ctx: ctx,
		transformId: transformId,
	}
}

// Execute executes the request
//  @return LabAutomationTransform
func (a *LabAutomationApiService) UpdateLabAutomationTransformExecute(r ApiUpdateLabAutomationTransformRequest) (*LabAutomationTransform, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LabAutomationTransform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabAutomationApiService.UpdateLabAutomationTransform")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/automation-file-transforms/{transform_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"transform_id"+"}", url.PathEscape(parameterToString(r.transformId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.labAutomationTransformUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
