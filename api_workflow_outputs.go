/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// WorkflowOutputsApiService WorkflowOutputsApi service
type WorkflowOutputsApiService service

type ApiArchiveWorkflowOutputsRequest struct {
	ctx context.Context
	ApiService *WorkflowOutputsApiService
	workflowOutputsArchive *WorkflowOutputsArchive
}

func (r ApiArchiveWorkflowOutputsRequest) WorkflowOutputsArchive(workflowOutputsArchive WorkflowOutputsArchive) ApiArchiveWorkflowOutputsRequest {
	r.workflowOutputsArchive = &workflowOutputsArchive
	return r
}

func (r ApiArchiveWorkflowOutputsRequest) Execute() (*WorkflowOutputsArchivalChange, *http.Response, error) {
	return r.ApiService.ArchiveWorkflowOutputsExecute(r)
}

/*
ArchiveWorkflowOutputs Archive one or more workflow outputs

Archive one or more workflow outputs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiArchiveWorkflowOutputsRequest
*/
func (a *WorkflowOutputsApiService) ArchiveWorkflowOutputs(ctx context.Context) ApiArchiveWorkflowOutputsRequest {
	return ApiArchiveWorkflowOutputsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WorkflowOutputsArchivalChange
func (a *WorkflowOutputsApiService) ArchiveWorkflowOutputsExecute(r ApiArchiveWorkflowOutputsRequest) (*WorkflowOutputsArchivalChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowOutputsArchivalChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowOutputsApiService.ArchiveWorkflowOutputs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-outputs:archive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workflowOutputsArchive
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkCreateWorkflowOutputsRequest struct {
	ctx context.Context
	ApiService *WorkflowOutputsApiService
	workflowOutputsBulkCreateRequest *WorkflowOutputsBulkCreateRequest
}

func (r ApiBulkCreateWorkflowOutputsRequest) WorkflowOutputsBulkCreateRequest(workflowOutputsBulkCreateRequest WorkflowOutputsBulkCreateRequest) ApiBulkCreateWorkflowOutputsRequest {
	r.workflowOutputsBulkCreateRequest = &workflowOutputsBulkCreateRequest
	return r
}

func (r ApiBulkCreateWorkflowOutputsRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.BulkCreateWorkflowOutputsExecute(r)
}

/*
BulkCreateWorkflowOutputs Bulk create new workflow outputs

Bulk create new workflow outputs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkCreateWorkflowOutputsRequest
*/
func (a *WorkflowOutputsApiService) BulkCreateWorkflowOutputs(ctx context.Context) ApiBulkCreateWorkflowOutputsRequest {
	return ApiBulkCreateWorkflowOutputsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *WorkflowOutputsApiService) BulkCreateWorkflowOutputsExecute(r ApiBulkCreateWorkflowOutputsRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowOutputsApiService.BulkCreateWorkflowOutputs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-outputs:bulk-create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workflowOutputsBulkCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBulkUpdateWorkflowOutputsRequest struct {
	ctx context.Context
	ApiService *WorkflowOutputsApiService
	workflowOutputsBulkUpdateRequest *WorkflowOutputsBulkUpdateRequest
}

func (r ApiBulkUpdateWorkflowOutputsRequest) WorkflowOutputsBulkUpdateRequest(workflowOutputsBulkUpdateRequest WorkflowOutputsBulkUpdateRequest) ApiBulkUpdateWorkflowOutputsRequest {
	r.workflowOutputsBulkUpdateRequest = &workflowOutputsBulkUpdateRequest
	return r
}

func (r ApiBulkUpdateWorkflowOutputsRequest) Execute() (*AsyncTaskLink, *http.Response, error) {
	return r.ApiService.BulkUpdateWorkflowOutputsExecute(r)
}

/*
BulkUpdateWorkflowOutputs Bulk update workflow outputs

Bulk update workflow outputs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBulkUpdateWorkflowOutputsRequest
*/
func (a *WorkflowOutputsApiService) BulkUpdateWorkflowOutputs(ctx context.Context) ApiBulkUpdateWorkflowOutputsRequest {
	return ApiBulkUpdateWorkflowOutputsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AsyncTaskLink
func (a *WorkflowOutputsApiService) BulkUpdateWorkflowOutputsExecute(r ApiBulkUpdateWorkflowOutputsRequest) (*AsyncTaskLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AsyncTaskLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowOutputsApiService.BulkUpdateWorkflowOutputs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-outputs:bulk-update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workflowOutputsBulkUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateWorkflowOutputRequest struct {
	ctx context.Context
	ApiService *WorkflowOutputsApiService
	workflowOutputCreate *WorkflowOutputCreate
}

func (r ApiCreateWorkflowOutputRequest) WorkflowOutputCreate(workflowOutputCreate WorkflowOutputCreate) ApiCreateWorkflowOutputRequest {
	r.workflowOutputCreate = &workflowOutputCreate
	return r
}

func (r ApiCreateWorkflowOutputRequest) Execute() (*WorkflowOutput, *http.Response, error) {
	return r.ApiService.CreateWorkflowOutputExecute(r)
}

/*
CreateWorkflowOutput Create a new workflow output

Create a new workflow output

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateWorkflowOutputRequest
*/
func (a *WorkflowOutputsApiService) CreateWorkflowOutput(ctx context.Context) ApiCreateWorkflowOutputRequest {
	return ApiCreateWorkflowOutputRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WorkflowOutput
func (a *WorkflowOutputsApiService) CreateWorkflowOutputExecute(r ApiCreateWorkflowOutputRequest) (*WorkflowOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowOutputsApiService.CreateWorkflowOutput")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-outputs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workflowOutputCreate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetWorkflowOutputRequest struct {
	ctx context.Context
	ApiService *WorkflowOutputsApiService
	workflowOutputId string
}

func (r ApiGetWorkflowOutputRequest) Execute() (*WorkflowOutput, *http.Response, error) {
	return r.ApiService.GetWorkflowOutputExecute(r)
}

/*
GetWorkflowOutput Get a workflow output

Get a workflow output

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowOutputId The ID of the workflow task output
 @return ApiGetWorkflowOutputRequest
*/
func (a *WorkflowOutputsApiService) GetWorkflowOutput(ctx context.Context, workflowOutputId string) ApiGetWorkflowOutputRequest {
	return ApiGetWorkflowOutputRequest{
		ApiService: a,
		ctx: ctx,
		workflowOutputId: workflowOutputId,
	}
}

// Execute executes the request
//  @return WorkflowOutput
func (a *WorkflowOutputsApiService) GetWorkflowOutputExecute(r ApiGetWorkflowOutputRequest) (*WorkflowOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowOutputsApiService.GetWorkflowOutput")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-outputs/{workflow_output_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"workflow_output_id"+"}", url.PathEscape(parameterToString(r.workflowOutputId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v NotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListWorkflowOutputsRequest struct {
	ctx context.Context
	ApiService *WorkflowOutputsApiService
	ids *string
	workflowTaskGroupIds *string
	workflowTaskIds *string
	schemaId *string
	watcherIds *string
	responsibleTeamIds *string
	creationOriginIds *string
	linkedItemIdsAnyOf *string
	linkedItemIdsAllOf *string
	linkedItemIdsNoneOf *string
	schemaFields *map[string]interface{}
	name *string
	nameIncludes *string
	creatorIds *string
	modifiedAt *string
	nextToken *string
	pageSize *int32
	displayIds *string
	archiveReason *string
}

// Comma separated list of workflow output IDs
func (r ApiListWorkflowOutputsRequest) Ids(ids string) ApiListWorkflowOutputsRequest {
	r.ids = &ids
	return r
}

// Comma separated list of workflow IDs
func (r ApiListWorkflowOutputsRequest) WorkflowTaskGroupIds(workflowTaskGroupIds string) ApiListWorkflowOutputsRequest {
	r.workflowTaskGroupIds = &workflowTaskGroupIds
	return r
}

// Comma separated list of workflow task IDs
func (r ApiListWorkflowOutputsRequest) WorkflowTaskIds(workflowTaskIds string) ApiListWorkflowOutputsRequest {
	r.workflowTaskIds = &workflowTaskIds
	return r
}

// The ID of the workflow task schema of the workflow output
func (r ApiListWorkflowOutputsRequest) SchemaId(schemaId string) ApiListWorkflowOutputsRequest {
	r.schemaId = &schemaId
	return r
}

// Comma separated list of user IDs or \&quot;null\&quot;
func (r ApiListWorkflowOutputsRequest) WatcherIds(watcherIds string) ApiListWorkflowOutputsRequest {
	r.watcherIds = &watcherIds
	return r
}

// Comma separated list of team IDs or \&quot;null\&quot;
func (r ApiListWorkflowOutputsRequest) ResponsibleTeamIds(responsibleTeamIds string) ApiListWorkflowOutputsRequest {
	r.responsibleTeamIds = &responsibleTeamIds
	return r
}

// Comma separated list of entry IDs
func (r ApiListWorkflowOutputsRequest) CreationOriginIds(creationOriginIds string) ApiListWorkflowOutputsRequest {
	r.creationOriginIds = &creationOriginIds
	return r
}

// Comma separated list of bioentity or storable IDs. Returns workflow outputs where the output&#39;s schema fields reference at least one of the provided items. 
func (r ApiListWorkflowOutputsRequest) LinkedItemIdsAnyOf(linkedItemIdsAnyOf string) ApiListWorkflowOutputsRequest {
	r.linkedItemIdsAnyOf = &linkedItemIdsAnyOf
	return r
}

// Comma separated list of bioentity or storable IDs. Returns workflow outputs where the output&#39;s schema fields reference all of the provided items. 
func (r ApiListWorkflowOutputsRequest) LinkedItemIdsAllOf(linkedItemIdsAllOf string) ApiListWorkflowOutputsRequest {
	r.linkedItemIdsAllOf = &linkedItemIdsAllOf
	return r
}

// Comma separated list of bioentity or storable IDs. Returns workflow outputs where the output&#39;s schema fields do not reference any of the provided items. 
func (r ApiListWorkflowOutputsRequest) LinkedItemIdsNoneOf(linkedItemIdsNoneOf string) ApiListWorkflowOutputsRequest {
	r.linkedItemIdsNoneOf = &linkedItemIdsNoneOf
	return r
}

// Schema field value. For Integer, Float, and Date type fields, supports the &gt;&#x3D; and &lt;&#x3D; operators. If present, the schemaId param must also be present. Restricts results to those with a field of whose value matches the filter. 
func (r ApiListWorkflowOutputsRequest) SchemaFields(schemaFields map[string]interface{}) ApiListWorkflowOutputsRequest {
	r.schemaFields = &schemaFields
	return r
}

// The name of the workflow task
func (r ApiListWorkflowOutputsRequest) Name(name string) ApiListWorkflowOutputsRequest {
	r.name = &name
	return r
}

// Part of the name of the workflow task
func (r ApiListWorkflowOutputsRequest) NameIncludes(nameIncludes string) ApiListWorkflowOutputsRequest {
	r.nameIncludes = &nameIncludes
	return r
}

// Comma separated list of user IDs.
func (r ApiListWorkflowOutputsRequest) CreatorIds(creatorIds string) ApiListWorkflowOutputsRequest {
	r.creatorIds = &creatorIds
	return r
}

// Datetime, in RFC 3339 format. Supports the &gt; and &lt; operators. Time zone defaults to UTC. Restricts results to those modified in the specified range. e.g. &gt; 2017-04-30. 
func (r ApiListWorkflowOutputsRequest) ModifiedAt(modifiedAt string) ApiListWorkflowOutputsRequest {
	r.modifiedAt = &modifiedAt
	return r
}

func (r ApiListWorkflowOutputsRequest) NextToken(nextToken string) ApiListWorkflowOutputsRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiListWorkflowOutputsRequest) PageSize(pageSize int32) ApiListWorkflowOutputsRequest {
	r.pageSize = &pageSize
	return r
}

// Comma-separated list of Workflow Output Display IDs.
func (r ApiListWorkflowOutputsRequest) DisplayIds(displayIds string) ApiListWorkflowOutputsRequest {
	r.displayIds = &displayIds
	return r
}

// Archive reason. Restricts items to those with the specified archive reason. Use \&quot;NOT_ARCHIVED\&quot; to filter for unarchived workflow outputs. Use \&quot;ANY_ARCHIVED\&quot; to filter for archived workflow outputs regardless of reason. Use \&quot;ANY_ARCHIVED_OR_NOT_ARCHIVED\&quot; to return items for both archived and unarchived. 
func (r ApiListWorkflowOutputsRequest) ArchiveReason(archiveReason string) ApiListWorkflowOutputsRequest {
	r.archiveReason = &archiveReason
	return r
}

func (r ApiListWorkflowOutputsRequest) Execute() (*WorkflowOutputsPaginatedList, *http.Response, error) {
	return r.ApiService.ListWorkflowOutputsExecute(r)
}

/*
ListWorkflowOutputs List workflow outputs

List workflow outputs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListWorkflowOutputsRequest
*/
func (a *WorkflowOutputsApiService) ListWorkflowOutputs(ctx context.Context) ApiListWorkflowOutputsRequest {
	return ApiListWorkflowOutputsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WorkflowOutputsPaginatedList
func (a *WorkflowOutputsApiService) ListWorkflowOutputsExecute(r ApiListWorkflowOutputsRequest) (*WorkflowOutputsPaginatedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowOutputsPaginatedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowOutputsApiService.ListWorkflowOutputs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-outputs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ids != nil {
		localVarQueryParams.Add("ids", parameterToString(*r.ids, ""))
	}
	if r.workflowTaskGroupIds != nil {
		localVarQueryParams.Add("workflowTaskGroupIds", parameterToString(*r.workflowTaskGroupIds, ""))
	}
	if r.workflowTaskIds != nil {
		localVarQueryParams.Add("workflowTaskIds", parameterToString(*r.workflowTaskIds, ""))
	}
	if r.schemaId != nil {
		localVarQueryParams.Add("schemaId", parameterToString(*r.schemaId, ""))
	}
	if r.watcherIds != nil {
		localVarQueryParams.Add("watcherIds", parameterToString(*r.watcherIds, ""))
	}
	if r.responsibleTeamIds != nil {
		localVarQueryParams.Add("responsibleTeamIds", parameterToString(*r.responsibleTeamIds, ""))
	}
	if r.creationOriginIds != nil {
		localVarQueryParams.Add("creationOriginIds", parameterToString(*r.creationOriginIds, ""))
	}
	if r.linkedItemIdsAnyOf != nil {
		localVarQueryParams.Add("linkedItemIds.anyOf", parameterToString(*r.linkedItemIdsAnyOf, ""))
	}
	if r.linkedItemIdsAllOf != nil {
		localVarQueryParams.Add("linkedItemIds.allOf", parameterToString(*r.linkedItemIdsAllOf, ""))
	}
	if r.linkedItemIdsNoneOf != nil {
		localVarQueryParams.Add("linkedItemIds.noneOf", parameterToString(*r.linkedItemIdsNoneOf, ""))
	}
	if r.schemaFields != nil {
		localVarQueryParams.Add("schemaFields", parameterToString(*r.schemaFields, ""))
	}
	if r.name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.nameIncludes != nil {
		localVarQueryParams.Add("nameIncludes", parameterToString(*r.nameIncludes, ""))
	}
	if r.creatorIds != nil {
		localVarQueryParams.Add("creatorIds", parameterToString(*r.creatorIds, ""))
	}
	if r.modifiedAt != nil {
		localVarQueryParams.Add("modifiedAt", parameterToString(*r.modifiedAt, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("nextToken", parameterToString(*r.nextToken, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.displayIds != nil {
		localVarQueryParams.Add("displayIds", parameterToString(*r.displayIds, ""))
	}
	if r.archiveReason != nil {
		localVarQueryParams.Add("archiveReason", parameterToString(*r.archiveReason, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnarchiveWorkflowOutputsRequest struct {
	ctx context.Context
	ApiService *WorkflowOutputsApiService
	workflowOutputsUnarchive *WorkflowOutputsUnarchive
}

func (r ApiUnarchiveWorkflowOutputsRequest) WorkflowOutputsUnarchive(workflowOutputsUnarchive WorkflowOutputsUnarchive) ApiUnarchiveWorkflowOutputsRequest {
	r.workflowOutputsUnarchive = &workflowOutputsUnarchive
	return r
}

func (r ApiUnarchiveWorkflowOutputsRequest) Execute() (*WorkflowOutputsArchivalChange, *http.Response, error) {
	return r.ApiService.UnarchiveWorkflowOutputsExecute(r)
}

/*
UnarchiveWorkflowOutputs Unarchive one or more workflow outputs

Unarchive one or more workflow outputs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUnarchiveWorkflowOutputsRequest
*/
func (a *WorkflowOutputsApiService) UnarchiveWorkflowOutputs(ctx context.Context) ApiUnarchiveWorkflowOutputsRequest {
	return ApiUnarchiveWorkflowOutputsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WorkflowOutputsArchivalChange
func (a *WorkflowOutputsApiService) UnarchiveWorkflowOutputsExecute(r ApiUnarchiveWorkflowOutputsRequest) (*WorkflowOutputsArchivalChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowOutputsArchivalChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowOutputsApiService.UnarchiveWorkflowOutputs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-outputs:unarchive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workflowOutputsUnarchive
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateWorkflowOutputRequest struct {
	ctx context.Context
	ApiService *WorkflowOutputsApiService
	workflowOutputId string
	workflowOutputUpdate *WorkflowOutputUpdate
}

func (r ApiUpdateWorkflowOutputRequest) WorkflowOutputUpdate(workflowOutputUpdate WorkflowOutputUpdate) ApiUpdateWorkflowOutputRequest {
	r.workflowOutputUpdate = &workflowOutputUpdate
	return r
}

func (r ApiUpdateWorkflowOutputRequest) Execute() (*WorkflowOutput, *http.Response, error) {
	return r.ApiService.UpdateWorkflowOutputExecute(r)
}

/*
UpdateWorkflowOutput Update a workflow output

Update a workflow output

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowOutputId The ID of the workflow output
 @return ApiUpdateWorkflowOutputRequest
*/
func (a *WorkflowOutputsApiService) UpdateWorkflowOutput(ctx context.Context, workflowOutputId string) ApiUpdateWorkflowOutputRequest {
	return ApiUpdateWorkflowOutputRequest{
		ApiService: a,
		ctx: ctx,
		workflowOutputId: workflowOutputId,
	}
}

// Execute executes the request
//  @return WorkflowOutput
func (a *WorkflowOutputsApiService) UpdateWorkflowOutputExecute(r ApiUpdateWorkflowOutputRequest) (*WorkflowOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowOutputsApiService.UpdateWorkflowOutput")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workflow-outputs/{workflow_output_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"workflow_output_id"+"}", url.PathEscape(parameterToString(r.workflowOutputId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowOutputUpdate == nil {
		return localVarReturnValue, nil, reportError("workflowOutputUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workflowOutputUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadRequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v NotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
