/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// WorkflowTaskBase struct for WorkflowTaskBase
type WorkflowTaskBase struct {
	// User-friendly ID of the workflow task
	DisplayId *string `json:"displayId,omitempty"`
	// The ID of the workflow task
	Id *string `json:"id,omitempty"`
	Assignee NullableUserSummary `json:"assignee,omitempty"`
	ClonedFrom NullableWorkflowTaskSummary `json:"clonedFrom,omitempty"`
	CreationOrigin *CreationOrigin `json:"creationOrigin,omitempty"`
	Creator *UserSummary `json:"creator,omitempty"`
	ExecutionOrigin NullableWorkflowTaskExecutionOrigin `json:"executionOrigin,omitempty"`
	Fields *map[string]Field `json:"fields,omitempty"`
	Outputs []WorkflowOutputSummary `json:"outputs,omitempty"`
	// The date on which the task is scheduled to be executed
	ScheduledOn NullableString `json:"scheduledOn,omitempty"`
	Status *WorkflowTaskStatus `json:"status,omitempty"`
	// URL of the workflow task
	WebURL *string `json:"webURL,omitempty"`
	WorkflowTaskGroup *WorkflowTaskGroupSummary `json:"workflowTaskGroup,omitempty"`
}

// NewWorkflowTaskBase instantiates a new WorkflowTaskBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowTaskBase() *WorkflowTaskBase {
	this := WorkflowTaskBase{}
	return &this
}

// NewWorkflowTaskBaseWithDefaults instantiates a new WorkflowTaskBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowTaskBaseWithDefaults() *WorkflowTaskBase {
	this := WorkflowTaskBase{}
	return &this
}

// GetDisplayId returns the DisplayId field value if set, zero value otherwise.
func (o *WorkflowTaskBase) GetDisplayId() string {
	if o == nil || isNil(o.DisplayId) {
		var ret string
		return ret
	}
	return *o.DisplayId
}

// GetDisplayIdOk returns a tuple with the DisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskBase) GetDisplayIdOk() (*string, bool) {
	if o == nil || isNil(o.DisplayId) {
    return nil, false
	}
	return o.DisplayId, true
}

// HasDisplayId returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasDisplayId() bool {
	if o != nil && !isNil(o.DisplayId) {
		return true
	}

	return false
}

// SetDisplayId gets a reference to the given string and assigns it to the DisplayId field.
func (o *WorkflowTaskBase) SetDisplayId(v string) {
	o.DisplayId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WorkflowTaskBase) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskBase) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WorkflowTaskBase) SetId(v string) {
	o.Id = &v
}

// GetAssignee returns the Assignee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowTaskBase) GetAssignee() UserSummary {
	if o == nil || isNil(o.Assignee.Get()) {
		var ret UserSummary
		return ret
	}
	return *o.Assignee.Get()
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowTaskBase) GetAssigneeOk() (*UserSummary, bool) {
	if o == nil {
    return nil, false
	}
	return o.Assignee.Get(), o.Assignee.IsSet()
}

// HasAssignee returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasAssignee() bool {
	if o != nil && o.Assignee.IsSet() {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given NullableUserSummary and assigns it to the Assignee field.
func (o *WorkflowTaskBase) SetAssignee(v UserSummary) {
	o.Assignee.Set(&v)
}
// SetAssigneeNil sets the value for Assignee to be an explicit nil
func (o *WorkflowTaskBase) SetAssigneeNil() {
	o.Assignee.Set(nil)
}

// UnsetAssignee ensures that no value is present for Assignee, not even an explicit nil
func (o *WorkflowTaskBase) UnsetAssignee() {
	o.Assignee.Unset()
}

// GetClonedFrom returns the ClonedFrom field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowTaskBase) GetClonedFrom() WorkflowTaskSummary {
	if o == nil || isNil(o.ClonedFrom.Get()) {
		var ret WorkflowTaskSummary
		return ret
	}
	return *o.ClonedFrom.Get()
}

// GetClonedFromOk returns a tuple with the ClonedFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowTaskBase) GetClonedFromOk() (*WorkflowTaskSummary, bool) {
	if o == nil {
    return nil, false
	}
	return o.ClonedFrom.Get(), o.ClonedFrom.IsSet()
}

// HasClonedFrom returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasClonedFrom() bool {
	if o != nil && o.ClonedFrom.IsSet() {
		return true
	}

	return false
}

// SetClonedFrom gets a reference to the given NullableWorkflowTaskSummary and assigns it to the ClonedFrom field.
func (o *WorkflowTaskBase) SetClonedFrom(v WorkflowTaskSummary) {
	o.ClonedFrom.Set(&v)
}
// SetClonedFromNil sets the value for ClonedFrom to be an explicit nil
func (o *WorkflowTaskBase) SetClonedFromNil() {
	o.ClonedFrom.Set(nil)
}

// UnsetClonedFrom ensures that no value is present for ClonedFrom, not even an explicit nil
func (o *WorkflowTaskBase) UnsetClonedFrom() {
	o.ClonedFrom.Unset()
}

// GetCreationOrigin returns the CreationOrigin field value if set, zero value otherwise.
func (o *WorkflowTaskBase) GetCreationOrigin() CreationOrigin {
	if o == nil || isNil(o.CreationOrigin) {
		var ret CreationOrigin
		return ret
	}
	return *o.CreationOrigin
}

// GetCreationOriginOk returns a tuple with the CreationOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskBase) GetCreationOriginOk() (*CreationOrigin, bool) {
	if o == nil || isNil(o.CreationOrigin) {
    return nil, false
	}
	return o.CreationOrigin, true
}

// HasCreationOrigin returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasCreationOrigin() bool {
	if o != nil && !isNil(o.CreationOrigin) {
		return true
	}

	return false
}

// SetCreationOrigin gets a reference to the given CreationOrigin and assigns it to the CreationOrigin field.
func (o *WorkflowTaskBase) SetCreationOrigin(v CreationOrigin) {
	o.CreationOrigin = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *WorkflowTaskBase) GetCreator() UserSummary {
	if o == nil || isNil(o.Creator) {
		var ret UserSummary
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskBase) GetCreatorOk() (*UserSummary, bool) {
	if o == nil || isNil(o.Creator) {
    return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasCreator() bool {
	if o != nil && !isNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given UserSummary and assigns it to the Creator field.
func (o *WorkflowTaskBase) SetCreator(v UserSummary) {
	o.Creator = &v
}

// GetExecutionOrigin returns the ExecutionOrigin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowTaskBase) GetExecutionOrigin() WorkflowTaskExecutionOrigin {
	if o == nil || isNil(o.ExecutionOrigin.Get()) {
		var ret WorkflowTaskExecutionOrigin
		return ret
	}
	return *o.ExecutionOrigin.Get()
}

// GetExecutionOriginOk returns a tuple with the ExecutionOrigin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowTaskBase) GetExecutionOriginOk() (*WorkflowTaskExecutionOrigin, bool) {
	if o == nil {
    return nil, false
	}
	return o.ExecutionOrigin.Get(), o.ExecutionOrigin.IsSet()
}

// HasExecutionOrigin returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasExecutionOrigin() bool {
	if o != nil && o.ExecutionOrigin.IsSet() {
		return true
	}

	return false
}

// SetExecutionOrigin gets a reference to the given NullableWorkflowTaskExecutionOrigin and assigns it to the ExecutionOrigin field.
func (o *WorkflowTaskBase) SetExecutionOrigin(v WorkflowTaskExecutionOrigin) {
	o.ExecutionOrigin.Set(&v)
}
// SetExecutionOriginNil sets the value for ExecutionOrigin to be an explicit nil
func (o *WorkflowTaskBase) SetExecutionOriginNil() {
	o.ExecutionOrigin.Set(nil)
}

// UnsetExecutionOrigin ensures that no value is present for ExecutionOrigin, not even an explicit nil
func (o *WorkflowTaskBase) UnsetExecutionOrigin() {
	o.ExecutionOrigin.Unset()
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *WorkflowTaskBase) GetFields() map[string]Field {
	if o == nil || isNil(o.Fields) {
		var ret map[string]Field
		return ret
	}
	return *o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskBase) GetFieldsOk() (*map[string]Field, bool) {
	if o == nil || isNil(o.Fields) {
    return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasFields() bool {
	if o != nil && !isNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given map[string]Field and assigns it to the Fields field.
func (o *WorkflowTaskBase) SetFields(v map[string]Field) {
	o.Fields = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *WorkflowTaskBase) GetOutputs() []WorkflowOutputSummary {
	if o == nil || isNil(o.Outputs) {
		var ret []WorkflowOutputSummary
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskBase) GetOutputsOk() ([]WorkflowOutputSummary, bool) {
	if o == nil || isNil(o.Outputs) {
    return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasOutputs() bool {
	if o != nil && !isNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []WorkflowOutputSummary and assigns it to the Outputs field.
func (o *WorkflowTaskBase) SetOutputs(v []WorkflowOutputSummary) {
	o.Outputs = v
}

// GetScheduledOn returns the ScheduledOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowTaskBase) GetScheduledOn() string {
	if o == nil || isNil(o.ScheduledOn.Get()) {
		var ret string
		return ret
	}
	return *o.ScheduledOn.Get()
}

// GetScheduledOnOk returns a tuple with the ScheduledOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowTaskBase) GetScheduledOnOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ScheduledOn.Get(), o.ScheduledOn.IsSet()
}

// HasScheduledOn returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasScheduledOn() bool {
	if o != nil && o.ScheduledOn.IsSet() {
		return true
	}

	return false
}

// SetScheduledOn gets a reference to the given NullableString and assigns it to the ScheduledOn field.
func (o *WorkflowTaskBase) SetScheduledOn(v string) {
	o.ScheduledOn.Set(&v)
}
// SetScheduledOnNil sets the value for ScheduledOn to be an explicit nil
func (o *WorkflowTaskBase) SetScheduledOnNil() {
	o.ScheduledOn.Set(nil)
}

// UnsetScheduledOn ensures that no value is present for ScheduledOn, not even an explicit nil
func (o *WorkflowTaskBase) UnsetScheduledOn() {
	o.ScheduledOn.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WorkflowTaskBase) GetStatus() WorkflowTaskStatus {
	if o == nil || isNil(o.Status) {
		var ret WorkflowTaskStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskBase) GetStatusOk() (*WorkflowTaskStatus, bool) {
	if o == nil || isNil(o.Status) {
    return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given WorkflowTaskStatus and assigns it to the Status field.
func (o *WorkflowTaskBase) SetStatus(v WorkflowTaskStatus) {
	o.Status = &v
}

// GetWebURL returns the WebURL field value if set, zero value otherwise.
func (o *WorkflowTaskBase) GetWebURL() string {
	if o == nil || isNil(o.WebURL) {
		var ret string
		return ret
	}
	return *o.WebURL
}

// GetWebURLOk returns a tuple with the WebURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskBase) GetWebURLOk() (*string, bool) {
	if o == nil || isNil(o.WebURL) {
    return nil, false
	}
	return o.WebURL, true
}

// HasWebURL returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasWebURL() bool {
	if o != nil && !isNil(o.WebURL) {
		return true
	}

	return false
}

// SetWebURL gets a reference to the given string and assigns it to the WebURL field.
func (o *WorkflowTaskBase) SetWebURL(v string) {
	o.WebURL = &v
}

// GetWorkflowTaskGroup returns the WorkflowTaskGroup field value if set, zero value otherwise.
func (o *WorkflowTaskBase) GetWorkflowTaskGroup() WorkflowTaskGroupSummary {
	if o == nil || isNil(o.WorkflowTaskGroup) {
		var ret WorkflowTaskGroupSummary
		return ret
	}
	return *o.WorkflowTaskGroup
}

// GetWorkflowTaskGroupOk returns a tuple with the WorkflowTaskGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTaskBase) GetWorkflowTaskGroupOk() (*WorkflowTaskGroupSummary, bool) {
	if o == nil || isNil(o.WorkflowTaskGroup) {
    return nil, false
	}
	return o.WorkflowTaskGroup, true
}

// HasWorkflowTaskGroup returns a boolean if a field has been set.
func (o *WorkflowTaskBase) HasWorkflowTaskGroup() bool {
	if o != nil && !isNil(o.WorkflowTaskGroup) {
		return true
	}

	return false
}

// SetWorkflowTaskGroup gets a reference to the given WorkflowTaskGroupSummary and assigns it to the WorkflowTaskGroup field.
func (o *WorkflowTaskBase) SetWorkflowTaskGroup(v WorkflowTaskGroupSummary) {
	o.WorkflowTaskGroup = &v
}

func (o WorkflowTaskBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DisplayId) {
		toSerialize["displayId"] = o.DisplayId
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Assignee.IsSet() {
		toSerialize["assignee"] = o.Assignee.Get()
	}
	if o.ClonedFrom.IsSet() {
		toSerialize["clonedFrom"] = o.ClonedFrom.Get()
	}
	if !isNil(o.CreationOrigin) {
		toSerialize["creationOrigin"] = o.CreationOrigin
	}
	if !isNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if o.ExecutionOrigin.IsSet() {
		toSerialize["executionOrigin"] = o.ExecutionOrigin.Get()
	}
	if !isNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !isNil(o.Outputs) {
		toSerialize["outputs"] = o.Outputs
	}
	if o.ScheduledOn.IsSet() {
		toSerialize["scheduledOn"] = o.ScheduledOn.Get()
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.WebURL) {
		toSerialize["webURL"] = o.WebURL
	}
	if !isNil(o.WorkflowTaskGroup) {
		toSerialize["workflowTaskGroup"] = o.WorkflowTaskGroup
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowTaskBase struct {
	value *WorkflowTaskBase
	isSet bool
}

func (v NullableWorkflowTaskBase) Get() *WorkflowTaskBase {
	return v.value
}

func (v *NullableWorkflowTaskBase) Set(val *WorkflowTaskBase) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowTaskBase) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowTaskBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowTaskBase(val *WorkflowTaskBase) *NullableWorkflowTaskBase {
	return &NullableWorkflowTaskBase{value: val, isSet: true}
}

func (v NullableWorkflowTaskBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowTaskBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


