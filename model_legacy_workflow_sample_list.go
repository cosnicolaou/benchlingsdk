/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// LegacyWorkflowSampleList struct for LegacyWorkflowSampleList
type LegacyWorkflowSampleList struct {
	Samples []LegacyWorkflowSample `json:"samples,omitempty"`
}

// NewLegacyWorkflowSampleList instantiates a new LegacyWorkflowSampleList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyWorkflowSampleList() *LegacyWorkflowSampleList {
	this := LegacyWorkflowSampleList{}
	return &this
}

// NewLegacyWorkflowSampleListWithDefaults instantiates a new LegacyWorkflowSampleList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyWorkflowSampleListWithDefaults() *LegacyWorkflowSampleList {
	this := LegacyWorkflowSampleList{}
	return &this
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *LegacyWorkflowSampleList) GetSamples() []LegacyWorkflowSample {
	if o == nil || isNil(o.Samples) {
		var ret []LegacyWorkflowSample
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyWorkflowSampleList) GetSamplesOk() ([]LegacyWorkflowSample, bool) {
	if o == nil || isNil(o.Samples) {
    return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *LegacyWorkflowSampleList) HasSamples() bool {
	if o != nil && !isNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []LegacyWorkflowSample and assigns it to the Samples field.
func (o *LegacyWorkflowSampleList) SetSamples(v []LegacyWorkflowSample) {
	o.Samples = v
}

func (o LegacyWorkflowSampleList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return json.Marshal(toSerialize)
}

type NullableLegacyWorkflowSampleList struct {
	value *LegacyWorkflowSampleList
	isSet bool
}

func (v NullableLegacyWorkflowSampleList) Get() *LegacyWorkflowSampleList {
	return v.value
}

func (v *NullableLegacyWorkflowSampleList) Set(val *LegacyWorkflowSampleList) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyWorkflowSampleList) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyWorkflowSampleList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyWorkflowSampleList(val *LegacyWorkflowSampleList) *NullableLegacyWorkflowSampleList {
	return &NullableLegacyWorkflowSampleList{value: val, isSet: true}
}

func (v NullableLegacyWorkflowSampleList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyWorkflowSampleList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


