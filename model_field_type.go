/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
	"fmt"
)

// FieldType the model 'FieldType'
type FieldType string

// List of FieldType
const (
	DNA_SEQUENCE_LINK FieldType = "dna_sequence_link"
	AA_SEQUENCE_LINK FieldType = "aa_sequence_link"
	CUSTOM_ENTITY_LINK FieldType = "custom_entity_link"
	ENTITY_LINK FieldType = "entity_link"
	MIXTURE_LINK FieldType = "mixture_link"
	DROPDOWN FieldType = "dropdown"
	PART_LINK FieldType = "part_link"
	TRANSLATION_LINK FieldType = "translation_link"
	BLOB_LINK FieldType = "blob_link"
	TEXT FieldType = "text"
	LONG_TEXT FieldType = "long_text"
	BATCH_LINK FieldType = "batch_link"
	STORAGE_LINK FieldType = "storage_link"
	ENTRY_LINK FieldType = "entry_link"
	ASSAY_REQUEST_LINK FieldType = "assay_request_link"
	ASSAY_RESULT_LINK FieldType = "assay_result_link"
	ASSAY_RUN_LINK FieldType = "assay_run_link"
	BOOLEAN FieldType = "boolean"
	FLOAT FieldType = "float"
	INTEGER FieldType = "integer"
	DATETIME FieldType = "datetime"
	DATE FieldType = "date"
	JSON FieldType = "json"
)

// All allowed values of FieldType enum
var AllowedFieldTypeEnumValues = []FieldType{
	"dna_sequence_link",
	"aa_sequence_link",
	"custom_entity_link",
	"entity_link",
	"mixture_link",
	"dropdown",
	"part_link",
	"translation_link",
	"blob_link",
	"text",
	"long_text",
	"batch_link",
	"storage_link",
	"entry_link",
	"assay_request_link",
	"assay_result_link",
	"assay_run_link",
	"boolean",
	"float",
	"integer",
	"datetime",
	"date",
	"json",
}

func (v *FieldType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FieldType(value)
	for _, existing := range AllowedFieldTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FieldType", value)
}

// NewFieldTypeFromValue returns a pointer to a valid FieldType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFieldTypeFromValue(v string) (*FieldType, error) {
	ev := FieldType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FieldType: valid values are %v", v, AllowedFieldTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FieldType) IsValid() bool {
	for _, existing := range AllowedFieldTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FieldType value
func (v FieldType) Ptr() *FieldType {
	return &v
}

type NullableFieldType struct {
	value *FieldType
	isSet bool
}

func (v NullableFieldType) Get() *FieldType {
	return v.value
}

func (v *NullableFieldType) Set(val *FieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldType(val *FieldType) *NullableFieldType {
	return &NullableFieldType{value: val, isSet: true}
}

func (v NullableFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

