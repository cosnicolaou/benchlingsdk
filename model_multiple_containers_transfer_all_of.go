/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// MultipleContainersTransferAllOf struct for MultipleContainersTransferAllOf
type MultipleContainersTransferAllOf struct {
	// ID of container that will be transferred into.
	DestinationContainerId string `json:"destinationContainerId"`
	FinalQuantity *ContainerQuantity `json:"finalQuantity,omitempty"`
	FinalVolume *DeprecatedContainerVolumeForInput `json:"finalVolume,omitempty"`
	// Concentration at which to transfer entities or batches. Not applicable for container-to-container transfers (the concentration of the source containerâ€™s contents will be used). 
	SourceConcentration map[string]interface{} `json:"sourceConcentration,omitempty"`
}

// NewMultipleContainersTransferAllOf instantiates a new MultipleContainersTransferAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleContainersTransferAllOf(destinationContainerId string) *MultipleContainersTransferAllOf {
	this := MultipleContainersTransferAllOf{}
	this.DestinationContainerId = destinationContainerId
	return &this
}

// NewMultipleContainersTransferAllOfWithDefaults instantiates a new MultipleContainersTransferAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleContainersTransferAllOfWithDefaults() *MultipleContainersTransferAllOf {
	this := MultipleContainersTransferAllOf{}
	return &this
}

// GetDestinationContainerId returns the DestinationContainerId field value
func (o *MultipleContainersTransferAllOf) GetDestinationContainerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationContainerId
}

// GetDestinationContainerIdOk returns a tuple with the DestinationContainerId field value
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransferAllOf) GetDestinationContainerIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DestinationContainerId, true
}

// SetDestinationContainerId sets field value
func (o *MultipleContainersTransferAllOf) SetDestinationContainerId(v string) {
	o.DestinationContainerId = v
}

// GetFinalQuantity returns the FinalQuantity field value if set, zero value otherwise.
func (o *MultipleContainersTransferAllOf) GetFinalQuantity() ContainerQuantity {
	if o == nil || isNil(o.FinalQuantity) {
		var ret ContainerQuantity
		return ret
	}
	return *o.FinalQuantity
}

// GetFinalQuantityOk returns a tuple with the FinalQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransferAllOf) GetFinalQuantityOk() (*ContainerQuantity, bool) {
	if o == nil || isNil(o.FinalQuantity) {
    return nil, false
	}
	return o.FinalQuantity, true
}

// HasFinalQuantity returns a boolean if a field has been set.
func (o *MultipleContainersTransferAllOf) HasFinalQuantity() bool {
	if o != nil && !isNil(o.FinalQuantity) {
		return true
	}

	return false
}

// SetFinalQuantity gets a reference to the given ContainerQuantity and assigns it to the FinalQuantity field.
func (o *MultipleContainersTransferAllOf) SetFinalQuantity(v ContainerQuantity) {
	o.FinalQuantity = &v
}

// GetFinalVolume returns the FinalVolume field value if set, zero value otherwise.
func (o *MultipleContainersTransferAllOf) GetFinalVolume() DeprecatedContainerVolumeForInput {
	if o == nil || isNil(o.FinalVolume) {
		var ret DeprecatedContainerVolumeForInput
		return ret
	}
	return *o.FinalVolume
}

// GetFinalVolumeOk returns a tuple with the FinalVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransferAllOf) GetFinalVolumeOk() (*DeprecatedContainerVolumeForInput, bool) {
	if o == nil || isNil(o.FinalVolume) {
    return nil, false
	}
	return o.FinalVolume, true
}

// HasFinalVolume returns a boolean if a field has been set.
func (o *MultipleContainersTransferAllOf) HasFinalVolume() bool {
	if o != nil && !isNil(o.FinalVolume) {
		return true
	}

	return false
}

// SetFinalVolume gets a reference to the given DeprecatedContainerVolumeForInput and assigns it to the FinalVolume field.
func (o *MultipleContainersTransferAllOf) SetFinalVolume(v DeprecatedContainerVolumeForInput) {
	o.FinalVolume = &v
}

// GetSourceConcentration returns the SourceConcentration field value if set, zero value otherwise.
func (o *MultipleContainersTransferAllOf) GetSourceConcentration() map[string]interface{} {
	if o == nil || isNil(o.SourceConcentration) {
		var ret map[string]interface{}
		return ret
	}
	return o.SourceConcentration
}

// GetSourceConcentrationOk returns a tuple with the SourceConcentration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContainersTransferAllOf) GetSourceConcentrationOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.SourceConcentration) {
    return map[string]interface{}{}, false
	}
	return o.SourceConcentration, true
}

// HasSourceConcentration returns a boolean if a field has been set.
func (o *MultipleContainersTransferAllOf) HasSourceConcentration() bool {
	if o != nil && !isNil(o.SourceConcentration) {
		return true
	}

	return false
}

// SetSourceConcentration gets a reference to the given map[string]interface{} and assigns it to the SourceConcentration field.
func (o *MultipleContainersTransferAllOf) SetSourceConcentration(v map[string]interface{}) {
	o.SourceConcentration = v
}

func (o MultipleContainersTransferAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["destinationContainerId"] = o.DestinationContainerId
	}
	if !isNil(o.FinalQuantity) {
		toSerialize["finalQuantity"] = o.FinalQuantity
	}
	if !isNil(o.FinalVolume) {
		toSerialize["finalVolume"] = o.FinalVolume
	}
	if !isNil(o.SourceConcentration) {
		toSerialize["sourceConcentration"] = o.SourceConcentration
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleContainersTransferAllOf struct {
	value *MultipleContainersTransferAllOf
	isSet bool
}

func (v NullableMultipleContainersTransferAllOf) Get() *MultipleContainersTransferAllOf {
	return v.value
}

func (v *NullableMultipleContainersTransferAllOf) Set(val *MultipleContainersTransferAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleContainersTransferAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleContainersTransferAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleContainersTransferAllOf(val *MultipleContainersTransferAllOf) *NullableMultipleContainersTransferAllOf {
	return &NullableMultipleContainersTransferAllOf{value: val, isSet: true}
}

func (v NullableMultipleContainersTransferAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleContainersTransferAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


