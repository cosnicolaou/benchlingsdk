/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// DropdownOptionsUnarchive struct for DropdownOptionsUnarchive
type DropdownOptionsUnarchive struct {
	// Array of dropdown option IDs
	DropdownOptionIds []string `json:"dropdownOptionIds,omitempty"`
}

// NewDropdownOptionsUnarchive instantiates a new DropdownOptionsUnarchive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDropdownOptionsUnarchive() *DropdownOptionsUnarchive {
	this := DropdownOptionsUnarchive{}
	return &this
}

// NewDropdownOptionsUnarchiveWithDefaults instantiates a new DropdownOptionsUnarchive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDropdownOptionsUnarchiveWithDefaults() *DropdownOptionsUnarchive {
	this := DropdownOptionsUnarchive{}
	return &this
}

// GetDropdownOptionIds returns the DropdownOptionIds field value if set, zero value otherwise.
func (o *DropdownOptionsUnarchive) GetDropdownOptionIds() []string {
	if o == nil || isNil(o.DropdownOptionIds) {
		var ret []string
		return ret
	}
	return o.DropdownOptionIds
}

// GetDropdownOptionIdsOk returns a tuple with the DropdownOptionIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DropdownOptionsUnarchive) GetDropdownOptionIdsOk() ([]string, bool) {
	if o == nil || isNil(o.DropdownOptionIds) {
    return nil, false
	}
	return o.DropdownOptionIds, true
}

// HasDropdownOptionIds returns a boolean if a field has been set.
func (o *DropdownOptionsUnarchive) HasDropdownOptionIds() bool {
	if o != nil && !isNil(o.DropdownOptionIds) {
		return true
	}

	return false
}

// SetDropdownOptionIds gets a reference to the given []string and assigns it to the DropdownOptionIds field.
func (o *DropdownOptionsUnarchive) SetDropdownOptionIds(v []string) {
	o.DropdownOptionIds = v
}

func (o DropdownOptionsUnarchive) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DropdownOptionIds) {
		toSerialize["dropdownOptionIds"] = o.DropdownOptionIds
	}
	return json.Marshal(toSerialize)
}

type NullableDropdownOptionsUnarchive struct {
	value *DropdownOptionsUnarchive
	isSet bool
}

func (v NullableDropdownOptionsUnarchive) Get() *DropdownOptionsUnarchive {
	return v.value
}

func (v *NullableDropdownOptionsUnarchive) Set(val *DropdownOptionsUnarchive) {
	v.value = val
	v.isSet = true
}

func (v NullableDropdownOptionsUnarchive) IsSet() bool {
	return v.isSet
}

func (v *NullableDropdownOptionsUnarchive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDropdownOptionsUnarchive(val *DropdownOptionsUnarchive) *NullableDropdownOptionsUnarchive {
	return &NullableDropdownOptionsUnarchive{value: val, isSet: true}
}

func (v NullableDropdownOptionsUnarchive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDropdownOptionsUnarchive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


