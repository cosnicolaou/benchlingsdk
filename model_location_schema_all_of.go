/*
Benchling API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package benchlingsdk

import (
	"encoding/json"
)

// LocationSchemaAllOf struct for LocationSchemaAllOf
type LocationSchemaAllOf struct {
	Type *string `json:"type,omitempty"`
}

// NewLocationSchemaAllOf instantiates a new LocationSchemaAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationSchemaAllOf() *LocationSchemaAllOf {
	this := LocationSchemaAllOf{}
	return &this
}

// NewLocationSchemaAllOfWithDefaults instantiates a new LocationSchemaAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationSchemaAllOfWithDefaults() *LocationSchemaAllOf {
	this := LocationSchemaAllOf{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LocationSchemaAllOf) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationSchemaAllOf) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LocationSchemaAllOf) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *LocationSchemaAllOf) SetType(v string) {
	o.Type = &v
}

func (o LocationSchemaAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableLocationSchemaAllOf struct {
	value *LocationSchemaAllOf
	isSet bool
}

func (v NullableLocationSchemaAllOf) Get() *LocationSchemaAllOf {
	return v.value
}

func (v *NullableLocationSchemaAllOf) Set(val *LocationSchemaAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationSchemaAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationSchemaAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationSchemaAllOf(val *LocationSchemaAllOf) *NullableLocationSchemaAllOf {
	return &NullableLocationSchemaAllOf{value: val, isSet: true}
}

func (v NullableLocationSchemaAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationSchemaAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


